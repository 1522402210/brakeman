<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Brakeman - Rails Security Scanner</title>
  <link href="http://brakemanscanner.org/atom.xml" rel="self"/>
  <link href="http://brakemanscanner.org/"/>
  <updated>2013-11-26T09:58:37-08:00</updated>
  <id>http://brakemanscanner.org/</id>
  <author>
    <name>Justin Collins</name>
    
  </author>

  
  <entry>
    <title>Brakeman 2.2.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/10/28/brakeman-2-dot-2-0-released/"/>
    <updated>2013-10-28T10:30:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/10/28/brakeman-2-dot-2-0-released</id>
    <content type="html">&lt;p&gt;This is a small release, with some bug and false positive fixes alongside initial support for Rails engines and a new check for detailed exceptions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 2.2.0:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support scanning Rails engines (&lt;a href=&quot;https://github.com/phene&quot;&gt;Geoffrey Hichborn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ignore redirects to models using &lt;code&gt;friendly_id&lt;/code&gt; (&lt;a href=&quot;https://github.com/aj0strow&quot;&gt;AJ Ostrow&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add check for detailed exceptions in production (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/391&quot;&gt;#391&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use Rails version from Gemfile if it is available (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/398&quot;&gt;#398&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only add routes with actual names (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/395&quot;&gt;#395&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reduce command injection false positives&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Rails Engines&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/phene&quot;&gt;Geoffrey Hichborn&lt;/a&gt; added support for checking Rails engines paths when searching for controllers, models, and views. Please let us know if there are any issues or files missed with this change.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/397&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Redirects with Friendly ID&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/aj0strow&quot;&gt;AJ Ostrow&lt;/a&gt;, Brakeman should no longer warn on redirects to models using &lt;code&gt;friendly_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/400&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Detailed Exceptions&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ntalbott&quot;&gt;Nathaniel Talbott&lt;/a&gt; suggested checking that detailed exceptions (treating requests as local) are not enabled in production.&lt;/p&gt;

&lt;p&gt;Brakeman now generates a warning in a new category called &quot;&lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/information_disclosure/&quot;&gt;Information Disclosure&lt;/a&gt;&quot; if &lt;code&gt;config.consider_all_requests_local&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in production or a controller overrides &lt;code&gt;show_detailed_exceptions?&lt;/code&gt; to return something other than &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/396&quot;&gt;changes&lt;/a&gt; regarding the new category and two new warning codes associated with these warnings.&lt;/p&gt;

&lt;h3&gt;Better Version Detection&lt;/h3&gt;

&lt;p&gt;Brakeman now uses the Rails version found in &lt;code&gt;Gemfile&lt;/code&gt; or &lt;code&gt;Gemfile.lock&lt;/code&gt; to determine when to enable Rails 3/4 mode, which seems obvious in retrospect. This required swapping when the &lt;code&gt;Gemfile&lt;/code&gt; and the configuration files are processed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/402&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Rails 3 Routes&lt;/h3&gt;

&lt;p&gt;A small fix prevents Brakeman from raising an error when a route is a redirect or any value other than a string or symbol.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/403&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Command Injection False Positives&lt;/h3&gt;

&lt;p&gt;There should be fewer false positives for command injection when interpolated values are literals. The check also now ignores commonly used values &lt;code&gt;RAILS_ROOT&lt;/code&gt;, &lt;code&gt;Rails.env&lt;/code&gt;, and &lt;code&gt;Rails.root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, reported &quot;dangerous&quot; values (&lt;code&gt;user_input&lt;/code&gt; in JSON reports) for command injection are more specific. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;system &quot;rm -rf #{some_var}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;used to report the entire string &lt;code&gt;&quot;rm -rf #{some_var}&quot;&lt;/code&gt; as dangerous, even though it's really warning about the interpolation of &lt;code&gt;some_var&lt;/code&gt;. Now Brakeman will report the first potentially dangerous interpolated value. Note that this does not change fingerprints for existing warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/404&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Verification&lt;/h3&gt;

&lt;p&gt;The SHA-1 for the Brakeman 2.2.0 gem is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f3a2b369bda79c677a913cdb2350cbda8bce8a90  brakeman-2.2.0.gem
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 2.1.2 Released - Important Security Update</title>
    <link href="http://brakemanscanner.org/blog/2013/09/18/brakeman-2-dot-1-2-released-important-security-update/"/>
    <updated>2013-09-18T01:38:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/09/18/brakeman-2-dot-1-2-released-important-security-update</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Important&lt;/em&gt;: Contrary to the &quot;Brakeman Philosophy,&quot; there is one situation in which Brakeman attempts to load files from an application. This is a security risk since the code in the files would be executed (typical &lt;code&gt;require&lt;/code&gt; behavior). Note that this is only a real problem if running Brakeman against code outside one's control. Since most users are scanning their own code, this should not be a concern for the majority of Brakeman users.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 2.1.1:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not attempt to load custom Haml filters&lt;/li&gt;
&lt;li&gt;Do not warn about &lt;code&gt;to_json&lt;/code&gt; XSS in Rails 4&lt;/li&gt;
&lt;li&gt;Remove fuzzy matching on dangerous &lt;code&gt;attr_accessible&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;Add --table-width option to set width of text reports (&lt;a href=&quot;https://github.com/ssendev&quot;&gt;ssendev&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Custom Haml Filters&lt;/h3&gt;

&lt;p&gt;Brakeman no longer attempts to load custom Haml filters. This was a hack (from nearly three years ago) to help compile some Haml templates. It was recently noted that this introduces a security risk when scanning untrusted code.&lt;/p&gt;

&lt;p&gt;For now, custom Haml filters will cause a Brakeman error and the Haml templates using them will not be scanned.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/commit/8a6ae98df3039bf5f3d7cc0852efb1006362f143#L1L3&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;JSON Output in Rails 4&lt;/h3&gt;

&lt;p&gt;As of Rails 4, the output of &lt;code&gt;to_json&lt;/code&gt; is now safe by default. Brakeman should no longer warn about cross-site scripting with &lt;code&gt;to_json&lt;/code&gt; in Rails 4 applications.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/392&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Less Fuzzy Mass Assignment&lt;/h3&gt;

&lt;p&gt;Brakeman no longer uses fuzzy matching for potentially dangerous model attributes allowed for mass assignment, such as any value containing &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/390&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Text Report Width Option&lt;/h3&gt;

&lt;p&gt;The width of text reports can now be controlled with the &lt;code&gt;--table-width&lt;/code&gt; option. For example, this can be useful when capturing text output to a file.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/387&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 2.1.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/08/21/brakeman-2-dot-1-1-released/"/>
    <updated>2013-08-21T12:00:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/08/21/brakeman-2-dot-1-1-released</id>
    <content type="html">&lt;p&gt;This is a small bug fix release. The only expected changes in warnings are for dangerous attributes in &lt;code&gt;attr_accessible&lt;/code&gt;
and cross site scripting involving model attributes. Some warning fingerprints may change as a result of this update.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 2.1.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More accurate results for model attribute warnings (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/385&quot;&gt;#385&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not warn on &lt;code&gt;attr_accessible&lt;/code&gt; using roles (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/372&quot;&gt;#372&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;New warning code for dangerous attributes in &lt;code&gt;attr_accessible&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix infinite loop when run as rake task (&lt;a href=&quot;https://github.com/arkadyan&quot;&gt;Matthew Shanley&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use exit code zero with &lt;code&gt;-z&lt;/code&gt; if all warnings ignored (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/381&quot;&gt;#381&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect ignored warnings in rescans (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/382&quot;&gt;#382&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect ignored warnings in tabs format reports&lt;/li&gt;
&lt;li&gt;Ignore dynamic controller names in routes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;More Accurate Model Matching&lt;/h3&gt;

&lt;p&gt;Model attributes which are reported as user input should now be reported more accurately. For example, instead of reporting &lt;code&gt;Model.find(1)&lt;/code&gt; as user input, the entire attribute will be reported. For example: &lt;code&gt;Model.find(1).name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As a side effect, several methods which were already intended to be ignored (such as &lt;code&gt;count&lt;/code&gt;) will actually be ignored for XSS warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/386&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;attr_accessible Check Updates&lt;/h3&gt;

&lt;p&gt;The check for potentially dangerous attributes whitelisted in &lt;code&gt;attr_accessible&lt;/code&gt; has been updated to ignore attributes protected by roles. Additionally, it now has its own warning code to separate it from regular mass assignment warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/388&quot;&gt;warning code change&lt;/a&gt;, &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/384&quot;&gt;role change&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Rake Task Fix&lt;/h3&gt;

&lt;p&gt;The last release included a method named &lt;code&gt;load_dependency&lt;/code&gt; which handles calling &lt;code&gt;require&lt;/code&gt; for optional dependencies. Unfortunately, Rails overrides &lt;code&gt;require&lt;/code&gt; to call its own method called &lt;code&gt;load_dependency&lt;/code&gt;. Rails is loaded when any &lt;code&gt;rake&lt;/code&gt; command is used, so when Brakeman is run with Rake it causes an infinite loop between &lt;code&gt;load_dependency&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/arkadyan&quot;&gt;Matthew Shanley&lt;/a&gt; for reporting the issue and providing a fix.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/375&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Exit Code Fixed When Warnings Ignored&lt;/h3&gt;

&lt;p&gt;Brakeman will now return &lt;code&gt;0&lt;/code&gt; when using &lt;code&gt;-z&lt;/code&gt; and all reported warnings are ignored.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/375&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Ignore Warnings in Rescans&lt;/h3&gt;

&lt;p&gt;Ignored warnings should now be ignored during rescans (for use with &lt;a href=&quot;https://github.com/guard/guard-brakeman&quot;&gt;guard-brakeman&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/383&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Remove Ignored Warnings in Tabs Report&lt;/h3&gt;

&lt;p&gt;Ignoring warnings should now work for those using the Jenkins plugin.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/374&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Ignore Dynamic Controller Name in Routes&lt;/h3&gt;

&lt;p&gt;Instead of completely aborting route processing, dynamic controller names are just ignored.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/379&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 2.1.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/07/17/brakeman-2-dot-1-0-released/"/>
    <updated>2013-07-17T16:36:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/07/17/brakeman-2-dot-1-0-released</id>
    <content type="html">&lt;p&gt;Brakeman recently passed 250,000 downloads on &lt;a href=&quot;http://rubygems.org/gems/brakeman&quot;&gt;RubyGems.org&lt;/a&gt;! Thanks to everyone who has contributed!&lt;/p&gt;

&lt;p&gt;With this release, the most requested and most controversional feature has been added: it is now possible to ignore warnings based on a configuration file.&lt;/p&gt;

&lt;p&gt;Also, the brakeman-min gem has been updated to provide a minimal-dependency version of Brakeman.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 2.0.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add support for ignoring warnings&lt;/li&gt;
&lt;li&gt;Add brakeman-min gem&lt;/li&gt;
&lt;li&gt;Add check for dangerous model attributes defined in &lt;code&gt;attr_accessible&lt;/code&gt; (&lt;a href=&quot;https://github.com/themetric&quot;&gt;Paul Deardorff&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add check for &lt;code&gt;authenticate_or_request_with_http_basic&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/301&quot;&gt;#301&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--branch-limit&lt;/code&gt; option, limit to 5 by default&lt;/li&gt;
&lt;li&gt;Add more methods to check for command injection (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/206&quot;&gt;#206&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow use of Slim 2.x (&lt;a href=&quot;https://github.com/iwz&quot;&gt;Ian Zabel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Load gem dependencies on-demand&lt;/li&gt;
&lt;li&gt;Output JSON diff to file if &lt;code&gt;-o&lt;/code&gt; option is used&lt;/li&gt;
&lt;li&gt;Refactor of SQL injection check code (&lt;a href=&quot;https://github.com/barttenbrinke&quot;&gt;Bart ten Brinke&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Return error exit code when application path is not found&lt;/li&gt;
&lt;li&gt;Fix detection of duplicate XSS warnings&lt;/li&gt;
&lt;li&gt;Fix output format detection to be more strict again&lt;/li&gt;
&lt;li&gt;Fix Gemfile.lock parsing for non-native line endings (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/359&quot;&gt;#359&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow empty Brakeman configuration file (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/343&quot;&gt;#343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to ruby_parser 3.2.2&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Ignoring Warnings&lt;/h3&gt;

&lt;p&gt;It should be stressed that warnings should only be ignored when it is absolutely certain they are false positives &lt;em&gt;and&lt;/em&gt; the false positive cannot be fixed on Brakeman's side. If there is uncertainty, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/new&quot;&gt;open an issue&lt;/a&gt; so we have the opportunity to improve Brakeman.&lt;/p&gt;

&lt;p&gt;The ignore configuration is a JSON file containing a list of warnings and some metadata. Right now the metadata is not actually used, but it might be useful in the future. The only warning information which is actually used is the fingerprint.&lt;/p&gt;

&lt;p&gt;By default Brakeman will look for a &lt;code&gt;brakeman.ignore&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; directory of the application. This can be changed with the &lt;code&gt;-i&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Since creating and managing the file by hand would be a pain, the &lt;code&gt;-I&lt;/code&gt; provides interactive management of the ignore configuration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/bm-I.png&quot; alt=&quot;brakeman -I&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JSON reports now include an array of &lt;code&gt;ignored_warnings&lt;/code&gt;, HTML reports have a table of ignored warnings which is hidden by default, and the basic text output will include the number of warnings ignored, if any.&lt;/p&gt;

&lt;p&gt;Again, please use this power responsibly.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/368&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;brakeman-min Gem Updated&lt;/h3&gt;

&lt;p&gt;You may have noticed the ancient (0.5.2) version of brakeman-min hanging around and hopefully you ignored it.&lt;/p&gt;

&lt;p&gt;In order to work &quot;out of the box&quot;, Brakeman includes dependencies on HAML, Slim, and Erubis, and depends on several gems for different report types. The brakeman-min gem strips out all optional dependencies, which reduces the gems required from 13 to just 4. This allows you to just install the gems you actually need.&lt;/p&gt;

&lt;p&gt;Since the minimal version also removes terminal-table and HighLine, the default output for brakeman-min is JSON. Install those two gems to get the familiar text table report.&lt;/p&gt;

&lt;p&gt;The version for brakeman-min will match the regular gem and there are no changes in functionality between the gems.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/367&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Mass Assignment to Dangerous Attributes&lt;/h3&gt;

&lt;p&gt;Paul Deardorff has added a new check which warns on model attributes included in &lt;code&gt;attr_accessible&lt;/code&gt; which perhaps should not have been.&lt;/p&gt;

&lt;h3&gt;More Basic Auth Warnings&lt;/h3&gt;

&lt;p&gt;Brakeman will now warn on use of password strings used directly in &lt;code&gt;authenticate_or_request_with_http_basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/362&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Branch Limiting&lt;/h3&gt;

&lt;p&gt;When dealing with conditional branches, Brakeman generates basically &quot;union&quot; values of possible values for a given variable. (See one of the many other issues dealing with this for more info, like &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/297&quot;&gt;#297&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In some situations (lots of assignments to the same variable inside different branches), however, these values can grow to be unreasonably large. In most &lt;em&gt;useful&lt;/em&gt; cases, the values aren't that large.&lt;/p&gt;

&lt;p&gt;This change introduces a limit on these union values. The default is &lt;code&gt;5&lt;/code&gt;, which means a given variable should only have five alternative values. If a sixth alternative is encountered (i.e. assignment inside another branch), the old values get kicked out, the new value is saved and the process starts over. This seems like a decent compromise between being flow insensitive (like &lt;code&gt;--no-branching&lt;/code&gt;) and the current state of affairs (track everything, causing massive slowdowns and memory usage).&lt;/p&gt;

&lt;p&gt;To turn off the limiting, use &lt;code&gt;--branch-limit -1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--branch-limit 0&lt;/code&gt; is almost like &lt;code&gt;--no-branching&lt;/code&gt; except slower because it's still trying to track stuff.&lt;/p&gt;

&lt;p&gt;In testing, a value of &lt;code&gt;5&lt;/code&gt; did not show any difference in detected vulnerabilities, although it is entirely possible (though empirical evidence points towards unlikely) that some vulnerabilities would be hidden because of this.&lt;/p&gt;

&lt;p&gt;(Description copied from the &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/345&quot;&gt;pull request&lt;/a&gt;.)&lt;/p&gt;

&lt;h3&gt;More Command Injection Methods&lt;/h3&gt;

&lt;p&gt;Several more Ruby methods for launching processes have been added to the command injection check, including a bunch from &lt;a href=&quot;http://rdoc.info/stdlib/open3/Open3&quot;&gt;Open3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/348&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support for Slim 2.x&lt;/h3&gt;

&lt;p&gt;No real changes here, but the gem has been updated to allow Slim 2.x.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/353&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Gems Loaded On-Demand&lt;/h3&gt;

&lt;p&gt;Gem dependencies which Brakeman does not need for its core functionality are now loaded as-needed instead of everything being loaded at start time. Besides maybe wasting less time and memory, this enabled the brakeman-min gem discussed above.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/367&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Output JSON Compare to File&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-o&lt;/code&gt; option can now be used with &lt;code&gt;--compare&lt;/code&gt; to output the JSON diff to a file.&lt;/p&gt;

&lt;p&gt;If multiple &lt;code&gt;-o&lt;/code&gt; options are given, the first one will be used for the JSON diff, and the other &lt;code&gt;-o&lt;/code&gt; files will be used to output a regular report.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/363&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Error Exit Code When Application Not Found&lt;/h3&gt;

&lt;p&gt;The last version of Brakeman had a bug where the program would exit with return code &lt;code&gt;0&lt;/code&gt; when no Rails application was found. It will now return &lt;code&gt;1&lt;/code&gt; like it did before.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/350&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fewer Cross Site Scripting Duplicates&lt;/h3&gt;

&lt;p&gt;Some cross site scripting warnings were being reported with both high and low confidence. This has been fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/355&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Stricter Report Format Detection&lt;/h3&gt;

&lt;p&gt;For a while, Brakeman would match &lt;code&gt;-o&lt;/code&gt; file names like &lt;code&gt;blah.jsonness&lt;/code&gt; and assume you wanted JSON output. This is fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/346&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Parse Gemfile.lock with Non-Native Line Endings&lt;/h3&gt;

&lt;p&gt;Thanks to Paul Deardorff for updating Gemfile.lock parsing for files created on a different operating system.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/370&quot;&gt;changes&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Allow Empty Brakeman Config File&lt;/h3&gt;

&lt;p&gt;Sure, why not?&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/344&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;RubyParser Update&lt;/h3&gt;

&lt;p&gt;Brakeman now uses the latest ruby_parser, which has support for Ruby 2.0 syntax and a lot of bug fixes. You may also notice some line numbers in warnings will be more accurate.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;This was a big release, so please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt;! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 2.0.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/05/20/brakeman-2-dot-0-0-released/"/>
    <updated>2013-05-20T10:09:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/05/20/brakeman-2-dot-0-0-released</id>
    <content type="html">&lt;p&gt;Brakeman 2.0 is here! While it does include a lot of updates, the &quot;2.0&quot; is mostly to indicate this release includes some changes which may break external tools (also, who wants a version &quot;1.10&quot;?). Tool maintainers are encouraged to avoid dependencies on warning messages and types (use the &quot;warning code&quot; instead), and to use warning fingerprints + line numbers for comparing warnings.&lt;/p&gt;

&lt;p&gt;Lots more features are on the horizon for the 2.x family!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.5&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove &quot;timestamp&quot; key from JSON reports&lt;/li&gt;
&lt;li&gt;Relative paths are used by default in JSON reports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--absolute-paths&lt;/code&gt; replaces &lt;code&gt;--relative-paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix fingerprint generation to actually use the file path&lt;/li&gt;
&lt;li&gt;Clean up SQL CVE warning messages&lt;/li&gt;
&lt;li&gt;Remove deprecated config file locations&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--only-files&lt;/code&gt; option to specify files/paths to scan (&lt;a href=&quot;https://github.com/ehlertij&quot;&gt;Ian Ehlert&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Marshal/CSV deserialization check&lt;/li&gt;
&lt;li&gt;Combine Marshal/YAML/CSV deserialization checks into single check&lt;/li&gt;
&lt;li&gt;Avoid duplicate &quot;Dangerous Send&quot; and &quot;Unsafe Reflection&quot; warnings&lt;/li&gt;
&lt;li&gt;Avoid duplicate results for Symbol DoS check&lt;/li&gt;
&lt;li&gt;Medium confidence for mass assignment to &lt;code&gt;attr_protected&lt;/code&gt; models&lt;/li&gt;
&lt;li&gt;Only treat classes with names containing &lt;code&gt;Controller&lt;/code&gt; like controllers&lt;/li&gt;
&lt;li&gt;Better handling of classes nested inside controllers&lt;/li&gt;
&lt;li&gt;Better handling of controller classes nested in classes/modules&lt;/li&gt;
&lt;li&gt;Handle &lt;code&gt;-&amp;gt;&lt;/code&gt; lambdas with no arguments (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/331&quot;&gt;#331&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle explicit block argument destructuring&lt;/li&gt;
&lt;li&gt;Skip Rails config options that are real objects (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/324&quot;&gt;#324&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Detect Rails 3 JSON escape config option&lt;/li&gt;
&lt;li&gt;Much better tracking of warning file names&lt;/li&gt;
&lt;li&gt;Fix errors when using &lt;code&gt;--separate-models&lt;/code&gt; (&lt;a href=&quot;https://github.com/noahd1&quot;&gt;Noah Davis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix text report console output in JRuby (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/229&quot;&gt;#229&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positives on &lt;code&gt;Model#id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix false positives on &lt;code&gt;params.to_json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix model path guesses to use &quot;models/&quot; instead of &quot;controllers/&quot;&lt;/li&gt;
&lt;li&gt;Use exceptions instead of abort in brakeman lib (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/230&quot;&gt;#230&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Update to Ruby2Ruby 2.0.5&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;JSON Report Changes&lt;/h3&gt;

&lt;p&gt;Several changes were made to JSON reports in this release. The &lt;code&gt;[&quot;scan_info&quot;][&quot;timestamp&quot;]&lt;/code&gt; key was removed, since it was just a duplicate of &lt;code&gt;[&quot;scan_info&quot;][&quot;end_time&quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;JSON reports now default to reporting relative paths for file names in warnings, which seems to be more useful for external tools. Because of this change, the &lt;code&gt;--relative-paths&lt;/code&gt; option has been removed and replaced with &lt;code&gt;--absolute-paths&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/333&quot;&gt;timestamp change&lt;/a&gt;, &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/330&quot;&gt;relative paths change&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fingerprint Generation&lt;/h3&gt;

&lt;p&gt;The previous release had a bug where fingerprints were not really including the file name as part of the fingerprint. This has been resolved, and fingerprints should be a reliable way of tracking warnings now.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/317&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Warning Messages&lt;/h3&gt;

&lt;p&gt;The warning messages for SQL CVEs were unnecessarily verbose, so they have been trimmed down. Of course, this shouldn't affect anyone, because all apps have upgraded to Rails versions without reported vulnerabilities, right?&lt;/p&gt;

&lt;p&gt;Some small changes have been made to other warning messages. Please do not rely on warning messages remaining constant. To track warnings, use the &lt;code&gt;warning_code&lt;/code&gt; attribute which will never change.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/334&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Config File Default Locations&lt;/h3&gt;

&lt;p&gt;The following locations will no longer be automatically searched for Brakeman configuration files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* `./config.yaml`
* `.brakeman/config.yaml`
* `/etc/brakeman/config.yaml`
* The Brakeman `lib/` directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following locations are still used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* `./config/brakeman.yml`
* `~/.brakeman/config.yml`
* `/etc/brakeman/config.yml`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, Brakeman can use configuration files. See &lt;code&gt;brakeman --help&lt;/code&gt; for details.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/310&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Limiting Scans&lt;/h3&gt;

&lt;p&gt;While individual files can be exempted from a scan using &lt;code&gt;--skip-files&lt;/code&gt;, the new &lt;code&gt;--only-files&lt;/code&gt; option can limit scans to a set of files and directories, thanks to &lt;a href=&quot;https://github.com/ehlertij&quot;&gt;Ian Ehlert&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/316&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Deserialization Checks&lt;/h3&gt;

&lt;p&gt;Brakeman now checks for deserialization of user input using &lt;code&gt;Marshal&lt;/code&gt;, &lt;code&gt;YAML&lt;/code&gt;, and &lt;code&gt;CSV&lt;/code&gt;. The former &lt;code&gt;YAMLLoad&lt;/code&gt; check has been merged into the new &lt;code&gt;CheckDeserialize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/329&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fewer Duplicate Warnings&lt;/h3&gt;

&lt;p&gt;A few new checks (symbol DoS, dangerous sends, and unsafe reflection) were generating a lot of duplicate warnings. This has been fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/338&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Nested Classes and Controllers&lt;/h3&gt;

&lt;p&gt;Brakeman's previous approach to nested classes was to ignore them. But it appears some people use classes as namespaces and place important classes (like controllers) inside them. This release changes how Brakeman deals with nested classes, as well as classes that inherit from &lt;code&gt;ApplicationController&lt;/code&gt; but do not have &lt;code&gt;Controller&lt;/code&gt; in their name. Please see the &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/325&quot;&gt;pull request&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Hopefully this means more accurate scans, but please report any correct warnings from earlier versions missing in 2.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/325&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;&quot;Stabby&quot; Lambdas with No Arguments&lt;/h3&gt;

&lt;p&gt;Errors like &lt;code&gt;undefined method 'each' for 0:Fixnum&lt;/code&gt; caused by use of &lt;code&gt;-&amp;gt;&lt;/code&gt; lambdas with zero arguments should be fixed now.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/332&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Explicit Block Argument Destructuring&lt;/h3&gt;

&lt;p&gt;Explicit block argument destructuring like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blah do |x, (y,z)|
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;used to be ignored, but now the arguments are handled in order to keep block arguments in their proper scope.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/307/&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Rails 3 Config Processing&lt;/h3&gt;

&lt;p&gt;Brakeman only cares about Rails configuration processing to check for specific settings. It converts a setting like &lt;code&gt;config.a.b.z&lt;/code&gt; to a hash entry like &lt;code&gt;[:config][:a][:b][:z]&lt;/code&gt;. However, if real values are found for &lt;code&gt;config.a.b&lt;/code&gt; this messes things up. So for now they are ignored.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/326&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Errors from Separating Models&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/noahd1&quot;&gt;Noah Davis&lt;/a&gt; fixed an error where file names were not being properly set when using the &lt;code&gt;--separate-models&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/313&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Better File Tracking&lt;/h3&gt;

&lt;p&gt;Files associated with warnings should be more accurate now, as file information is better preserved during processing.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/318&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;JRuby Console Output&lt;/h3&gt;

&lt;p&gt;The default text output to a console should now be working again in JRuby. Thanks to &lt;a href=&quot;https://github.com/jeg2&quot;&gt;JEG2&lt;/a&gt; for pushing out a new version of &lt;a href=&quot;http://highline.rubyforge.org/&quot;&gt;HighLine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/339&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Model#id and to_json False Positives&lt;/h3&gt;

&lt;p&gt;There should be fewer warnings generated by &lt;code&gt;Model#id&lt;/code&gt; and &lt;code&gt;to_json&lt;/code&gt; calls on &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/309&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Exceptions instead of Abort&lt;/h3&gt;

&lt;p&gt;A few instances of &lt;code&gt;abort&lt;/code&gt; have been removed from Brakeman and replaced with exceptions. This should make it easier to use Brakeman as a library.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/335&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.5 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/04/05/brakeman-1-dot-9-5-released/"/>
    <updated>2013-04-05T08:42:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/04/05/brakeman-1-dot-9-5-released</id>
    <content type="html">&lt;p&gt;As planned, Brakeman 1.9.5 is mostly internal bug fixes and improvements, with the one exception being a new check for symbol creation from user input. Barring any emergencies, the next release will be 2.0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.4&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for unsafe symbol creation (&lt;a href=&quot;https://github.com/HonoreDB&quot;&gt;Aaron Weiner&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not warn on mass assignment with &lt;code&gt;slice&lt;/code&gt;/&lt;code&gt;only&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/203&quot;&gt;#203&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Do not warn on session secret if in &lt;code&gt;.gitignore&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/241&quot;&gt;#241&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix session secret check for Rails 4&lt;/li&gt;
&lt;li&gt;Fix scoping for blocks and block arguments&lt;/li&gt;
&lt;li&gt;Fix error when modifying blocks in templates&lt;/li&gt;
&lt;li&gt;Fix crash on &lt;code&gt;before_filter&lt;/code&gt; outside controller&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;Sexp&lt;/code&gt; hash cache invalidation&lt;/li&gt;
&lt;li&gt;Respect &lt;code&gt;quiet&lt;/code&gt; option in configuration file (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/300&quot;&gt;#300&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Convert assignment to simple &lt;code&gt;if&lt;/code&gt; expressions to &lt;code&gt;or&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;More fixes for assignments inside branches&lt;/li&gt;
&lt;li&gt;Refactoring of &lt;code&gt;CheckLinkTo&lt;/code&gt; and &lt;code&gt;Report&lt;/code&gt; (&lt;a href=&quot;https://github.com/barttenbrinke&quot;&gt;Bart ten Brinke&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Pin ruby2ruby dependency to version 2.0.3 (&lt;a href=&quot;https://github.com/seattlerb/ruby2ruby/issues/15&quot;&gt;see here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Symbol Creation Check&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/HonoreDB&quot;&gt;Aaron Weiner&lt;/a&gt; added a check for symbol creation from user input, such as &lt;code&gt;params[:x].to_i&lt;/code&gt; which can lead to Denial of Service.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/296&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Mass Assignment with Select Keys&lt;/h3&gt;

&lt;p&gt;A common pattern to avoid mass assignment issues is to use &lt;code&gt;slice&lt;/code&gt; or &lt;code&gt;only&lt;/code&gt; when passing in values to mass assignment methods. Brakeman should no longer warn in these situations.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/303&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Ignoring Session Secrets&lt;/h3&gt;

&lt;p&gt;Brakeman no longer warns if the config file containing the session secret key is included in &lt;code&gt;.gitignore&lt;/code&gt;. This only applies if the default file names are used.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/302&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Warn on Rails 4 Session Secrets&lt;/h3&gt;

&lt;p&gt;Support for Rails 4 session secrets has been added, since the configuration for that changed again.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/302&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Block Scoping&lt;/h3&gt;

&lt;p&gt;Correct scope for blocks is tricky, and there are also some differences between Ruby 1.8 and 1.9 for block arguments. For the most part, Brakeman has ignored blocks, but this lead to some compounding issues with assignments in branches.&lt;/p&gt;

&lt;p&gt;This release now treats all block arguments as local assignments &lt;em&gt;inside&lt;/em&gt; the block and shadows any variables outside the block (this is Ruby 1.9 behavior). This should lead to some performance improvements where block arguments do shadow outer variables.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/305&quot;&gt;changes and examples&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Sexp Hash Cache Invalidation&lt;/h3&gt;

&lt;p&gt;Since Brakeman does a ton of hash table lookups with s-expressions as keys, it caches &lt;code&gt;Sexp#hash&lt;/code&gt; values. In some situations, these cached values were being invalidated when they did not need to be, and not being invalidated when they should have been.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/294&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Quiet Option&lt;/h3&gt;

&lt;p&gt;Brakeman will now be quiet if the option is set in a configuration file.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/306&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Assignments of If Expressions&lt;/h3&gt;

&lt;p&gt;Simple if expression assigments such as &lt;code&gt;x = thing ? this : that&lt;/code&gt; will now be converted to &lt;code&gt;x = this || that&lt;/code&gt;. This should simplify some code reported with warnings as well as avoid warning on values in &lt;code&gt;if&lt;/code&gt; conditions.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/295&quot;&gt;changes and examples&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Assignments in If Expressions&lt;/h3&gt;

&lt;p&gt;Assignments inside &lt;code&gt;if&lt;/code&gt; branches cause Brakeman to &quot;branch&quot; the values for a variable, since it could be two or more different values. However, this branching should only occur &lt;em&gt;after&lt;/em&gt; both branches have been processed. Brakeman 1.9.3 made it so values were not branched inside of a single branch, but there was still an issue where values branched in the &lt;code&gt;then&lt;/code&gt; clause would be used in the &lt;code&gt;else&lt;/code&gt; clause. This release fixes that issue and simplifies branching overall.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/297&quot;&gt;changes and examples&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Refactoring Internals&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/barttenbrinke&quot;&gt;Bart ten Brinke&lt;/a&gt; has begun some work refactoring some of the many ugly parts of Brakeman. Thanks!&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Roadmap&lt;/h3&gt;

&lt;p&gt;Next up should be &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Roadmap&quot;&gt;Brakeman 2.0&lt;/a&gt; unless there needs to be another emergency release. Most of the changes for 2.0 are relatively minor, but break backwards compatibility in areas that may affect external tools. This includes cleaning up warning messages, removing duplicate information from JSON output, combining some checks, changing some defaults, and so on.&lt;/p&gt;

&lt;p&gt;If you have suggestions for other breaking changes, please file an issue ASAP to get it into the next release!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.4 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/03/18/brakeman-1-dot-9-4-released/"/>
    <updated>2013-03-18T17:07:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2013/03/18/brakeman-1-dot-9-4-released</id>
    <content type="html">&lt;p&gt;Another release forced out early due to Rails vulnerabilities reported today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2013-1854&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-1855&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-1856&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-1857&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;--compare&lt;/code&gt; to work with older versions&lt;/li&gt;
&lt;li&gt;Add &quot;no-referrer&quot; to HTML report links&lt;/li&gt;
&lt;li&gt;Don't warn when invoking &lt;code&gt;send&lt;/code&gt; on user input&lt;/li&gt;
&lt;li&gt;Slightly faster cloning of Sexps&lt;/li&gt;
&lt;li&gt;Detect another way to add &lt;code&gt;strong_parameters&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/288&quot;&gt;#288&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Latest Reported Vulnerabilities&lt;/h3&gt;

&lt;p&gt;All CVE checks were included in &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/290&quot;&gt;these changes&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;CVE-2013-1854 - Symbol Denial of Service&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/msg/rubyonrails-security/jgJ4cjjS8FE/BGbHRxnDRTIJ&quot;&gt;CVE-2013-1854&lt;/a&gt; is the creation of symbols when a hash is passed as the value to an ActiveRecord finder method.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on this CVE if there are any models using ActiveRecord and the Rails version is vulnerable.&lt;/p&gt;

&lt;h4&gt;CVE-2013-1855 - sanitize_css&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/msg/rubyonrails-security/4_QHo4BqnN8/_RrdfKk12I4J&quot;&gt;CVE-2013-1855&lt;/a&gt; is a vulnerability in the &lt;code&gt;sanitize_css&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on this CVE for each use of &lt;code&gt;sanitize_css&lt;/code&gt; if the Rails version is vulnerable. Calls obviously sanitizing user input will be high confidence, other calls will be medium confidence.&lt;/p&gt;

&lt;h4&gt;CVE-2013-1856 - JRuby XML Parser&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/msg/rubyonrails-security/KZwsQbYsOiI/5kUV7dSCJGwJ&quot;&gt;CVE-2013-1856&lt;/a&gt; is a vulnerability in the default XML parser used when running Rails on JRuby.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on this CVE if run with JRuby and the Rails version is vulnerable. It will not warn if the provided workaround (not patch) is used in an initializers.&lt;/p&gt;

&lt;h4&gt;CVE-2013-1857 - sanitize&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/msg/rubyonrails-security/zAAU7vGTPvI/1vZDWXqBuXgJ&quot;&gt;CVE-2013-1857&lt;/a&gt; is a vulnerability in the &lt;code&gt;sanitize&lt;/code&gt; method which allows URLs to include JavaScript.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on this CVE for each use of &lt;code&gt;sanitize&lt;/code&gt; if the Rails version is vulnerable. Calls obviously sanitizing user input will be high confidence, other calls will be medium confidence.&lt;/p&gt;

&lt;h3&gt;Fix JSON Compare&lt;/h3&gt;

&lt;p&gt;The 1.9.3 release introduced several new keys for warnings in the JSON output, which then broke &lt;code&gt;--compare&lt;/code&gt; when used with output from an older version. Despite &lt;a href=&quot;https://twitter.com/brakeman/status/307586866721460225&quot;&gt;declaring this would not be fixed&lt;/a&gt;, it has been fixed. &lt;code&gt;--compare&lt;/code&gt; reverts to old behavior if a report is from an older version.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/284&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Remove Referrer from HTML Report Links&lt;/h3&gt;

&lt;p&gt;All warning type links HTML reports now include the &lt;code&gt;rel=&quot;no-referrer&quot;&lt;/code&gt; option. This prevents referrer information from being passed along to the linked site (usually the &lt;a href=&quot;http://brakemanscanner.org/&quot;&gt;Brakeman site&lt;/a&gt;), which means people won't see that you are putting your Brakeman reports on the open internet...&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/286&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fewer Dangerous Send Warnings&lt;/h3&gt;

&lt;p&gt;Now that Brakeman warns on dangerous uses of &lt;code&gt;constantize&lt;/code&gt; and friends, there is no reason to warn on uses of &lt;code&gt;send&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, etc. with user input as a target. User input for the method name will continue to warn.&lt;/p&gt;

&lt;p&gt;For example, this will no longer generate a warning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;params[:name].try(:downcase)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/285&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Faster Sexp Cloning&lt;/h3&gt;

&lt;p&gt;Brakeman spends a lot of time cloning &lt;code&gt;Sexp&lt;/code&gt;s, so this version introduces a slightly faster custom method instead of &lt;code&gt;Marshal.load(Marshal.dump(...))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/287&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Another Strong Paramter Initializer&lt;/h3&gt;

&lt;p&gt;Brakeman now detects this approach to adding the &lt;code&gt;strong_parameters&lt;/code&gt; functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord::Base.send(:include,  ActiveModel::ForbiddenAttributesProtection)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/289&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Roadmap&lt;/h3&gt;

&lt;p&gt;This unexpected release means the roadmap has shifted again. The &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Roadmap&quot;&gt;roadmap&lt;/a&gt; still has one more release (1.9.5) planned before 2.0. The next release will likely only include bug and false positive fixes. Again, Brakeman 2.0 will &lt;em&gt;definitely&lt;/em&gt; include breaking changes, especially for JSON reports.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/03/01/brakeman-1-dot-9-3-released/"/>
    <updated>2013-03-01T09:22:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2013/03/01/brakeman-1-dot-9-3-released</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Changes since 1.9.2&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add warning fingerprints&lt;/li&gt;
&lt;li&gt;Add check for unsafe reflection (&lt;a href=&quot;https://github.com/gquadros&quot;&gt;Gabriel Quadros&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add support for Slim templates (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/214&quot;&gt;#214&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add check for skipping authentication methods with blacklist (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/199&quot;&gt;#199&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add render path to JSON report&lt;/li&gt;
&lt;li&gt;Remove empty tables from reports (&lt;a href=&quot;https://github.com/obduk&quot;&gt;Owen Ben Davies&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle &lt;code&gt;prepend/append_before_filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Performance improvements when handling branches&lt;/li&gt;
&lt;li&gt;Fix processing of &lt;code&gt;production.rb&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/264&quot;&gt;#264&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix version check for Ruby 2.0&lt;/li&gt;
&lt;li&gt;Expand HAML dependency to include 4.0 (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/263&quot;&gt;#263&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Scroll errors into view when expanding in HTML report&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Warning Fingerprints and New Identifiers&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This is a breaking change: &lt;code&gt;brakeman --compare&lt;/code&gt; will not work with reports generated from earlier versions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Tracking of new and fixed warnings is often required when integrating Brakeman with other tools. Current approaches rely on fragile values such as the warning messages or formatting of the code output.&lt;/p&gt;

&lt;p&gt;Additionally, warnings are grouped into large categories, such as &quot;SQL Injection&quot;. Sometimes more fine-grained categorization is required that does not rely on a value intended for display that may need to changed.&lt;/p&gt;

&lt;p&gt;With these two issues in mind, warnings now have a &quot;warning code&quot; and a &quot;fingerprint&quot;. Warning codes are integers which will never change and provide more specific categorization of warnings. For example, each CVE has a separate code. This should make tracking and sorting warnings easier, but also allow for fixes to warning category names in the future.&lt;/p&gt;

&lt;p&gt;The warning fingerprint is a SHA256 hash of five values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Warning code&lt;/li&gt;
&lt;li&gt;S-expression of code that caused the warning&lt;/li&gt;
&lt;li&gt;Location (i.e., template name or class/method)&lt;/li&gt;
&lt;li&gt;Relative file path&lt;/li&gt;
&lt;li&gt;Confidence level&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that line numbers are &lt;em&gt;not&lt;/em&gt; included. Identical warnings on different lines will have the same fingerprint. External tools can make the decision for how to handle this situation.&lt;/p&gt;

&lt;p&gt;Warning fingerprints allow quick comparison of warnings (either by fingerprint, or fingerprint + line number) but are also less fragile than existing approaches. The fingerprint will not change if the warning category (meant for display) changes, if the formatting of the code changes, or if the line number changes (e.g., some blank lines are added at the top of a file).&lt;/p&gt;

&lt;p&gt;If there are any issues with fingerprints, please report them before Brakeman 2.0!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/280&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for Unsafe Constant Creation&lt;/h3&gt;

&lt;p&gt;Gabriel Quadros has contributed a check for methods that create constants (usually classes) from user input. &lt;a href=&quot;http://blog.conviso.com.br/2013/02/exploiting-unsafe-reflection-in.html&quot;&gt;His blog post&lt;/a&gt; on the subject provides a good explanation of why this should be considered very dangerous.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/274&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support for Slim&lt;/h3&gt;

&lt;p&gt;Support for templates using &lt;a href=&quot;http://slim-lang.com/&quot;&gt;Slim&lt;/a&gt; is now here! This should be considered experimental, as it has not yet been tested on a wide set of applications. Also, thanks &lt;a href=&quot;https://github.com/tubaxenor&quot;&gt;tubaxenor&lt;/a&gt; for reporting a require issue with this change.&lt;/p&gt;

&lt;p&gt;Please report any issues, especially false negatives!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/271&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for Skipping of Authentication Methods&lt;/h3&gt;

&lt;p&gt;The check for &lt;code&gt;skip_before_filter&lt;/code&gt;s using &lt;code&gt;except&lt;/code&gt; instead of &lt;code&gt;only&lt;/code&gt; has been expanded to include authentication filters from popular libraries.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/268&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Render Paths in JSON Reports&lt;/h3&gt;

&lt;p&gt;In HTML reports, templates which have a render path longer than one entry have been &quot;expandable&quot; to show the entire render path instead of just one level up. For example, a partial is usually rendered from a view, which is rendered from a controller action.&lt;/p&gt;

&lt;p&gt;JSON reports now also include this information in the &lt;code&gt;render_path&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/279&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;No Empty Report Tables&lt;/h3&gt;

&lt;p&gt;Owen Ben Davies contributed a patch to hide empty warning tables in the text and HTML reports. Looks much cleaner, thanks Owen!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/282&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Handle (Pre|Ap)pended Filters&lt;/h3&gt;

&lt;p&gt;Brakeman will now recognize before filters added with &lt;code&gt;prepend_before_filter&lt;/code&gt; and &lt;code&gt;append_before_filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/266&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Branching Performance Improvements&lt;/h3&gt;

&lt;p&gt;It is entirely embarrassing, but Brakeman stopped working on Redmine some time ago due to how assignments in &lt;code&gt;if&lt;/code&gt; expressions are handled.&lt;/p&gt;

&lt;p&gt;In order to be somewhat flow sensitive, Brakeman combines variables assignments in &lt;code&gt;if&lt;/code&gt; branches into &lt;code&gt;or&lt;/code&gt; expressions. This captures the possible values a variable may have. However, Brakeman was doing that for &lt;em&gt;every&lt;/em&gt; assignment in an &lt;code&gt;if&lt;/code&gt; branch, even if there were multiple assignments to the same variable in the same branch (i.e., the value was not actually branching since the assignments were sequential). This release fixes that issue.&lt;/p&gt;

&lt;p&gt;Additionally, simple arithmetic operations are now distributed across &lt;code&gt;or&lt;/code&gt; expressions containing simple values (strings or numbers at this point), providing some memory savings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/270&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix Processing of Production Environment Settings&lt;/h3&gt;

&lt;p&gt;Processing of &lt;code&gt;production.rb&lt;/code&gt; has been broken for some time, but poor test coverage meant it went unnoticed. But it is fixed now, so settings in &lt;code&gt;production.rb&lt;/code&gt; should override those found in &lt;code&gt;environment.rb&lt;/code&gt;. This only applies to Rails 3 applications.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/265&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix Version Check for Ruby 2.0&lt;/h3&gt;

&lt;p&gt;Brakeman appears to work fine with Ruby 2.0, but the version check for Ruby 1.9 (which affected some behavior and checks) needed to be modified to include 2.0. Definitely report any issues with Ruby 2.0!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/277&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Allow HAML 4.0&lt;/h3&gt;

&lt;p&gt;There appear to be no changes in HAML 4.0 that affect Brakeman, so the gem dependency has been expanded to include the 4.x series.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/269&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix Error Show/Hide in HTML Report&lt;/h3&gt;

&lt;p&gt;Now clicking on &quot;Exceptions&quot; to show or hide scan errors will keep the errors in view.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/267&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Roadmap&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Roadmap&quot;&gt;Brakeman roadmap&lt;/a&gt; has one more release (1.9.4) planned before 2.0. The next release will likely only include bug and false positive fixes. Brakeman 2.0 will &lt;em&gt;definitely&lt;/em&gt; include breaking changes, especially for JSON reports.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/02/13/brakeman-1-dot-9-2-released/"/>
    <updated>2013-02-13T15:48:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2013/02/13/brakeman-1-dot-9-2-released</id>
    <content type="html">&lt;p&gt;This release is almost entirely enhancements to old checks or new checks for recent vulnerabilities. New features in the next release, I promise.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2013-0269&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0276&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0277&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0333&lt;/li&gt;
&lt;li&gt;Check for more send-like methods (&lt;a href=&quot;https://github.com/joernchen&quot;&gt;joernchen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Check for more SQL injection locations&lt;/li&gt;
&lt;li&gt;Check for more dangerous YAML methods (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/246&quot;&gt;#246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support MultiJSON 1.2 for Rails 3.0 and 3.1 (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/247&quot;&gt;#247&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CVE-2013-0269 - Vulnerabilities in JSON gems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/4_YvCpLzL58/discussion&quot;&gt;CVE-2013-0269&lt;/a&gt; is not strictly a Rails issue, but since it was announced on the Rails security list and was relatively easy to check, Brakeman will warn on it.&lt;/p&gt;

&lt;p&gt;Versions of the json/json_pure gem on the 1.7.x branch will raise remote code execution warnings, while any other affected version will be reported as a denial of service vulnerability.&lt;/p&gt;

&lt;p&gt;Applications which do not parse user input are not affected by these issues, but it is a good idea to upgrade anyway, as it should be relatively painless.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/262&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0276 - attr_protected Bypass&lt;/h3&gt;

&lt;p&gt;Brakeman has been warning on uses of &lt;code&gt;attr_protected&lt;/code&gt; since version 1.4.0, but it was reported with weak confidence, since it is really a best-practice issue.&lt;/p&gt;

&lt;p&gt;Now, however, uses of &lt;code&gt;attr_protected&lt;/code&gt; will be reported as medium confidence unless used in a Rails version affected by &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/AFBKNY7VSH8/discussion&quot;&gt;CVE-2013-0276&lt;/a&gt;, in which case it will be high confidence.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/262&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0277 - Serialized Attributes&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/KtmwSbEpzrU/discussion&quot;&gt;CVE-2013-0277&lt;/a&gt; allows attackers to insert malicious YAML into serialized model attributes. Using &lt;code&gt;attr_accessible&lt;/code&gt; or &lt;code&gt;attr_protected&lt;/code&gt; somewhat mitigates this, but it is still possible for an application to manually assign user input to a serialized attribute.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on affected models, with confidence level depending on whether or not the attribute can be mass assigned.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/262&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0333 - JSON Parsing Vulnerability&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/1h2DR63ViGo/discussion&quot;&gt;CVE-2013-0333&lt;/a&gt; is another side effect of the recent YAML vulnerabilities. Rails' default JSON request parser converted requests to YAML then parsed them as YAML.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on affected versions unless the provided workaround (setting the JSON backend to &lt;code&gt;JSONGem&lt;/code&gt;) is present.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/254&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for More Send-like Methods&lt;/h3&gt;

&lt;p&gt;Thanks to joernchen, Brakeman will now warn if user input is passed to &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;public_send&lt;/code&gt;, or &lt;code&gt;__send__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/256&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for More SQL Injection Sites&lt;/h3&gt;

&lt;p&gt;While researching for &lt;a href=&quot;http://rails-sqli.org/&quot;&gt;rails-sqli.org&lt;/a&gt;, a few more methods came up for Brakeman to check.&lt;/p&gt;

&lt;p&gt;Brakeman will now warn on SQL injection in &lt;code&gt;update_all&lt;/code&gt; and &lt;code&gt;pluck&lt;/code&gt; methods.&lt;/p&gt;

&lt;h3&gt;Check for More Dangerous YAML Methods&lt;/h3&gt;

&lt;p&gt;Brakeman will now warn on dangerous uses of &lt;code&gt;load_documents&lt;/code&gt;, &lt;code&gt;load_stream&lt;/code&gt;, &lt;code&gt;parse_documents&lt;/code&gt;, and &lt;code&gt;parse_stream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/249&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support MultiJSON 1.2&lt;/h3&gt;

&lt;p&gt;The MultiJSON gem changed some APIs around version 1.3. For convenience, Brakeman supported 1.3 or higher. However, for the same reason, Rails 3.0 and 3.1 are locked at versions before 1.3.&lt;/p&gt;

&lt;p&gt;For those using Rails 3.0 or 3.1 and including Brakeman in the Gemfile, Brakeman now supports both the old and new interfaces for MultiJSON and the depedency has been pushed back to MultiJSON 1.2.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/248&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;Finally, please check out &lt;a href=&quot;http://rails-sqli.org/&quot;&gt;rails-sqli.org&lt;/a&gt; and send in any feedback. Thanks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/01/18/brakeman-1-dot-9-1-released/"/>
    <updated>2013-01-18T17:36:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2013/01/18/brakeman-1-dot-9-1-released</id>
    <content type="html">&lt;p&gt;This released was forced due to messed up dependencies with Brakeman 1.9.0 and Ruby2Ruby - my fault entirely! As such, this release does not match the roadmap for 1.9.1, which will be changed to 1.9.2.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2012-5664 - SQL Injection&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0155 - SQL Injection&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0156 - Remote Code Execution&lt;/li&gt;
&lt;li&gt;Add check for unsafe &lt;code&gt;YAML.load&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update to RubyParser 3.1.1 (neersighted)&lt;/li&gt;
&lt;li&gt;Remove ActiveSupport dependency (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Do not warn on arrays passed to &lt;code&gt;link_to&lt;/code&gt; (Neil Matatall) (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/232&quot;&gt;#232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Warn on secret tokens (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/200&quot;&gt;#200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Warn on more mass assignment methods (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/223&quot;&gt;#223&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CVE-2012-5664 - SQL Injection&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/DCNTNp_qjFM/discussion&quot;&gt;CVE-2012-5664&lt;/a&gt; is a vulnerability Rails' dynamic finders. While dynamic finders (such as &lt;code&gt;User.find_by_name&lt;/code&gt;) appear to take a single argument, they also accept a hash options which can be used to modify the SQL query. Normally the hash of options would be the second argument, but it can also be the first. If an application passes in user code as the first argument, it will be interpreted as the options hash, leading to SQL injection.&lt;/p&gt;

&lt;p&gt;The provided fix is to only accept the hash if the dynamic finder is called with the proper number of arguments. A workaround is to always cast input to dynamic finders.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/228&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0155 - SQL Injection&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/c7jT-EeN9eI/discussion&quot;&gt;CVE-2013-0155&lt;/a&gt; is a SQL vulnerability where certain JSON input can cause &lt;code&gt;find&lt;/code&gt; methods to add &lt;code&gt;NULL&lt;/code&gt; as a valid value.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/239&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0156 - Remote Code Execution&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/61bkgvnSGTQ/discussion&quot;&gt;CVE-2013-0156&lt;/a&gt; is the worst Rails vulnerability in recent memory. It allows attackers to easily execute arbitrary code on any Rails application.&lt;/p&gt;

&lt;p&gt;Besides upgrading Rails, there are workarounds for this issue: disable XML request parsing or disable YAML/symbol types inside XML requests.&lt;/p&gt;

&lt;p&gt;Exploits for this vulnerability are easily available and already in use in the wild. Please upgrade, patch, or use a workaround.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/239&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for &lt;code&gt;YAML.load&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In light of &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/61bkgvnSGTQ/discussion&quot;&gt;CVE-2013-0156&lt;/a&gt;, Brakeman will now warn on any uses of &lt;code&gt;YAML.load&lt;/code&gt; with user input. Do not load arbitrary YAML in applications!&lt;/p&gt;

&lt;h3&gt;Dependency Changes&lt;/h3&gt;

&lt;p&gt;Brakeman now uses the latest RubyParser and Ruby2Ruby versions.&lt;/p&gt;

&lt;p&gt;Thanks to Neil, Brakeman no longer depends on any version of ActiveSupport or i18n.&lt;/p&gt;

&lt;h3&gt;Namespaced URLs in &lt;code&gt;link_to&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Brakeman will no longer warn on array arguments to &lt;code&gt;link_to&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/233&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Secret Tokens&lt;/h3&gt;

&lt;p&gt;Secret tokens stored in source control are bad! Doubly bad if the source code is available publicly. Anyone with access to an application's secret token can generate any session cookies they would like. See &lt;a href=&quot;http://phenoelit.org/blog/archives/2012/12/21/let_me_github_that_for_you/index.html&quot;&gt;this post&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/227&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;More Mass Assignment&lt;/h3&gt;

&lt;p&gt;Bryan Helmkamp pointed out more Rails methods which perform mass assignment. The following methods have been added: &lt;code&gt;first_or_create&lt;/code&gt;, &lt;code&gt;first_or_create!&lt;/code&gt;, &lt;code&gt;first_or_initialize!&lt;/code&gt;, &lt;code&gt;assign_attributes&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/234&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/12/25/brakeman-1-dot-9-0-released/"/>
    <updated>2012-12-25T11:00:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/12/25/brakeman-1-dot-9-0-released</id>
    <content type="html">&lt;p&gt;Happy &lt;a href=&quot;https://en.wikipedia.org/wiki/Eggnog_Riot&quot;&gt;Eggnog Riot&lt;/a&gt; day!&lt;/p&gt;

&lt;p&gt;This is a major release: 95 changed files with 1,775 additions and 14,484 deletions. This provides ample room for new bugs, so please report any issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update to RubyParser 3&lt;/li&gt;
&lt;li&gt;Ignore route information by default&lt;/li&gt;
&lt;li&gt;Add optional &quot;interprocedural&quot; analysis for controllers&lt;/li&gt;
&lt;li&gt;Properly pass instance variables between before_filters&lt;/li&gt;
&lt;li&gt;Support &lt;code&gt;strong_parameters&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/88&quot;&gt;#88&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support newer &lt;code&gt;validates :format&lt;/code&gt; call (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/198&quot;&gt;#198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add scan time to reports (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/158&quot;&gt;#158&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Brakeman version to reports&lt;/li&gt;
&lt;li&gt;Don't mangle whitespace in JSON code formatting&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;CheckExecute&lt;/code&gt; to warn on all string interpolation (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/213&quot;&gt;#213&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on &lt;code&gt;to_sql&lt;/code&gt; calls&lt;/li&gt;
&lt;li&gt;Add AppTree as facade for filesystem (&lt;a href=&quot;https://github.com/brynary&quot;&gt;Bryan Helmkamp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add link for translate vulnerability warning (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Rakefile to run tests (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Better default config file locations (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove &quot;find by regex&quot; feature from &lt;code&gt;CallIndex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reduce Sexp creation&lt;/li&gt;
&lt;li&gt;Handle empty model files&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Update to RubyParser 3&lt;/h3&gt;

&lt;p&gt;With the update to use RubyParser 3.x, Brakeman no longer includes a vendored version of RubyParser (which was only used with running with Ruby 1.9), which reduced code size by about 14,000 lines.&lt;/p&gt;

&lt;p&gt;RubyParser 3 supports Ruby 1.9 much more fully, so there should be very few parse errors. Additionally, Brakeman no longer chooses parsers based on the current Ruby version.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/190&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Route Information Ignored by Default&lt;/h3&gt;

&lt;p&gt;Route information is only used in Brakeman to determine whether a controller method should perform an implicit render. Since determining Rails routes statically is quite difficult to get right, it is better to assume a method is a routable action. Previous versions provided the &lt;code&gt;-a&lt;/code&gt; option for this, which is now on by default. To turn off this behavior (and revert to the old), use &lt;code&gt;--no-assume-routes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This does not affect default route warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/219&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Optional Interprocedural Analysis for Controllers&lt;/h3&gt;

&lt;p&gt;Currently, Brakeman essentially looks at each method in isolation. Values are propagated from controller actions (including before_filters) through rendered views and templates. But if a controller action calls another method which has an effect on the eventual output of the action, Brakeman does not processed the invoked method.&lt;/p&gt;

&lt;p&gt;This release includes optional, experimental support for analyzing controller methods called from within controller actions.&lt;/p&gt;

&lt;p&gt;For a simple example, instance variables set in helper methods will now be added to a rendered view. Also, values returned from called methods will be tracked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create
  get_user 
  #@user is now User.find(params[:id])

  @account = find_account(@user)  
  #@account is now Account.where(:user =&amp;gt; User.find(params[:id]).id
end

private

def get_user
  @user = User.find(params[:id])
end

def find_account
  Account.where(:user =&amp;gt; @user.id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is limited to methods available in the controller (via a parent class or mixins). It is also limited to a &quot;depth of one&quot;, meaning it will not try to analyze methods called by helper methods (&lt;code&gt;get_user&lt;/code&gt; and &lt;code&gt;find_account&lt;/code&gt; above).&lt;/p&gt;

&lt;p&gt;Since this feature is still experimental and will definitely increase scan times, it is turned off by default. Use &lt;code&gt;--interprocedural&lt;/code&gt; to enable it. (Better name pending suggestions...)&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/218&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Pass Instance Variables between Filters&lt;/h3&gt;

&lt;p&gt;While instance variables set in &lt;code&gt;before_filters&lt;/code&gt; were set properly, &lt;code&gt;before_filter&lt;/code&gt; which used instance variables from an earlier filter could not see those variables. This has been fixed, which will likely lead to new or more accurate warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/224&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support for &lt;code&gt;strong_parameters&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Rails 4, the responsibility for mass assignment protection will move from models to controllers where mass assignment is actually used. A preview of the new functionality is available in the &lt;a href=&quot;https://github.com/rails/strong_parameters&quot;&gt;strong_parameters&lt;/a&gt; gem. Brakeman should no longer warn on mass assignment for models protected with &lt;code&gt;strong_parameters&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/204&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support &lt;code&gt;validates :format&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Rails 3, format validation changed from &lt;code&gt;validates_format_of&lt;/code&gt; to the more generic &lt;code&gt;validates&lt;/code&gt; method. Brakeman will now check &lt;code&gt;validates&lt;/code&gt; calls for proper anchors on regular expressions for &lt;code&gt;:format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/205&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Changes&lt;/h3&gt;

&lt;p&gt;Reports will now contain Brakeman version and scan duration. JSON reports contain &lt;code&gt;start_time&lt;/code&gt; and &lt;code&gt;end_time&lt;/code&gt; timestamps. For now, JSON reports will still have a &lt;code&gt;timestamp&lt;/code&gt; key, but it will be identical to &lt;code&gt;end_time&lt;/code&gt;. It will be removed in Brakeman 2.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/193&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Additionally, code formatting in JSON reports has changed slightly. Previously, code was formatted with the HTML output in mind, so line breaks were removed. Now JSON reports include the code formatted from Ruby2Ruby without any mangling.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/191&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix Command Injection Check&lt;/h3&gt;

&lt;p&gt;The command injection check will now (again) warn on any form on string interpolation used for process execution, whether or not user input is involved.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/216&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix &lt;code&gt;to_sql&lt;/code&gt; False Positives&lt;/h3&gt;

&lt;p&gt;SQL code generated from Arel's &lt;code&gt;to_sql&lt;/code&gt; method will be considered safe.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/194&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;File System Facade&lt;/h3&gt;

&lt;p&gt;Bryan Helmkamp cleaned up Brakeman's file access into a single object. This should simplify future changes and add some consistency to how Brakeman handles files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/197&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Run Tests via Rake&lt;/h3&gt;

&lt;p&gt;Thanks to Michael Grosser, running &lt;code&gt;rake&lt;/code&gt; will now run Brakeman's tests.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/183&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Improved Config File Locations&lt;/h3&gt;

&lt;p&gt;Also thanks to Michael Grosser, Brakeman will check more sane locations for Brakeman configuration files. This version adds &lt;code&gt;./config/brakeman.yml&lt;/code&gt;, &lt;code&gt;~/.brakeman/config.yml&lt;/code&gt;, and &lt;code&gt;/etc/brakeman/config.yml&lt;/code&gt; as default locations for configuration files. The old locations are deprecated now, and will be removed in Brakeman 2.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/182&quot;&gt;changes&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;More Internal Changes&lt;/h3&gt;

&lt;p&gt;Call indexing performance has been given another &lt;a href=&quot;http://blog.presidentbeef.com/&quot;&gt;slight boost&lt;/a&gt; with the removal of the ability to search for call targets via regular expressions (which was not being used anywhere).&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/189&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The number of s-expressions generated by Brakeman has been reduced, although this did not lead to any major performance improvement.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/207&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Data-flow/alias processing was performing two passes. This has been reduced to just one.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/224&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Empty model files will no longer cause errors.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/11/13/brakeman-1-dot-8-3-released/"/>
    <updated>2012-11-13T09:20:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/11/13/brakeman-1-dot-8-3-released</id>
    <content type="html">&lt;p&gt;This is primarily a false positive reduction release. One major change is the change in dependency from the &lt;code&gt;json_pure&lt;/code&gt; gem to &lt;code&gt;multi_json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.2&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;multi_json&lt;/code&gt; gem for better harmony (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/164&quot;&gt;#164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Performance improvement for call indexing&lt;/li&gt;
&lt;li&gt;Fix issue with processing HAML files (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/168&quot;&gt;#168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle pre-release versions when processing &lt;code&gt;Gemfile.lock&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/174&quot;&gt;#174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only check first argument of &lt;code&gt;redirect_to&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/98&quot;&gt;#98&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positives from &lt;code&gt;Model.arel_table&lt;/code&gt; accesses&lt;/li&gt;
&lt;li&gt;Fix false positives on redirects to models decorated with Draper gem (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/172&quot;&gt;#172&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on redirect to model association (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/111&quot;&gt;#111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on &lt;code&gt;YAML.load&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/142&quot;&gt;#142&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive XSS on any &lt;code&gt;to_i&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;Fix error on Rails 2 named routes with no args&lt;/li&gt;
&lt;li&gt;Fix error in rescan of mixins with symbols in method name&lt;/li&gt;
&lt;li&gt;Do not rescan non-Ruby files in config/&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Change to MultiJSON&lt;/h3&gt;

&lt;p&gt;Brakeman now depends on the &lt;a href=&quot;http://rdoc.info/github/intridea/multi_json&quot;&gt;multijson&lt;/a&gt; gem instead of &lt;code&gt;json_pure&lt;/code&gt;. This should make it easier for people who include Brakeman as a dependency.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/166&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Faster Call Indexing&lt;/h3&gt;

&lt;p&gt;Dumb code in the &lt;code&gt;CallIndex&lt;/code&gt; was causing call indexing to be slow on some large applications. This should now be faster and require less memory!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/180&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix HAML Processing&lt;/h3&gt;

&lt;p&gt;Some HAML files were causing Brakeman's alias processing to slow to a crawl. This was due to the template code (sometimes) directly appending to the output variable via &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. Since Brakeman attempts to treat targets of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; as arrays, Brakeman was generating large data structures each time &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; was encountered.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/170&quot;&gt;changes&lt;/a&gt;]&lt;/p&gt;

&lt;h3&gt;Handle Pre-release Versions&lt;/h3&gt;

&lt;p&gt;When a &lt;code&gt;Gemfile.lock&lt;/code&gt; file is present in a Rails application, Brakeman uses it to determine the version of Rails in use. Previous versions did not accept pre-release version numbers (like &lt;code&gt;3.1.2.rc1&lt;/code&gt;), leading to version inappropriate warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/176&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Redirect False Positives&lt;/h3&gt;

&lt;p&gt;Several false positives related to redirects have been fixed, and the scope of the redirect check is somewhat reduced.&lt;/p&gt;

&lt;p&gt;Calls beginning with &lt;code&gt;Model.arel_table&lt;/code&gt; should no longer be treated as user input (in any context).&lt;/p&gt;

&lt;p&gt;Model instances returned by the &lt;code&gt;decorate&lt;/code&gt; method in the &lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;Draper&lt;/a&gt; gem are considered safe.&lt;/p&gt;

&lt;p&gt;Redirects to model associations (e.g, &lt;code&gt;belongs_to :account&lt;/code&gt;) are considered safe.&lt;/p&gt;

&lt;p&gt;Redirects to method calls with safe values should no longer warn. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redirect_to blah(User.first) #No warning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, only the first argument of &lt;code&gt;redirect_to&lt;/code&gt; will be checked for user input.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/177&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;YAML False Positive&lt;/h3&gt;

&lt;p&gt;File access warnings for YAML calls have been reduced to only those calls which actually access files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/178&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Integer Output False Positives&lt;/h3&gt;

&lt;p&gt;Calls to &lt;code&gt;to_i&lt;/code&gt; should not trigger XSS warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/179&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Errors on Named Routes&lt;/h3&gt;

&lt;p&gt;Rails 2 named routes with no arguments were causing errors, which have now been fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/181&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Future Work&lt;/h3&gt;

&lt;p&gt;Now that RubyParser 3.x is officially released, work is underway to use the new version. This will increase Ruby 1.9 syntax compatibility and remove the need to parse applications with the same Ruby version as the application uses. Additionally, it will allow us to get rid of the vendored version of RubyParser that Brakeman uses for Ruby 1.9. Unfortunately, RubyParser 3.x introduces a lot of incompatibilities and upgrading requires a significant amount of effort.&lt;/p&gt;

&lt;p&gt;Another exciting feature in development is limited interprocedural analysis. Brakeman will be able to handle simple things like calls to helper methods in controllers which set instance variables or return user input. This should help with the &quot;obvious&quot; vulnerabilities that Brakeman often misses.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/10/17/brakeman-1-dot-8-2-released/"/>
    <updated>2012-10-17T10:44:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/10/17/brakeman-1-dot-8-2-released</id>
    <content type="html">&lt;p&gt;This is a bugfix release, in particular fixing rescanning (used by &lt;a href=&quot;https://github.com/guard/guard-brakeman&quot;&gt;guard-brakeman&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fixed rescanning problems caused by 1.8.0 changes&lt;/li&gt;
&lt;li&gt;Fix scope calls with single argument&lt;/li&gt;
&lt;li&gt;Report specific model name in rendered collections&lt;/li&gt;
&lt;li&gt;Handle overwritten JSON escape settings (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add CHANGES to gemspec&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Rescan Fixes&lt;/h3&gt;

&lt;p&gt;Brakeman supports rescanning a subset of files in an application, with the caveat that the previous scan must still be in memory. This functionality was broken in the the 1.8.0 release, due to the lack of tests.&lt;/p&gt;

&lt;p&gt;This release updates rescanning to be more robust and work with the 1.8.0 changes to how &quot;render paths&quot; are stored. Also, a number of tests were added to help prevent breakage in the future.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/165&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Scope Calls with One Argument&lt;/h3&gt;

&lt;p&gt;Calls to &lt;code&gt;scope&lt;/code&gt; with a single argument were causing errors in Brakeman's SQL injection check.&lt;/p&gt;

&lt;p&gt;The fixed error looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;undefined method `node_type' for nil:NilClass  /something/brakeman/lib/brakeman/checks/check_sql.rb:75:in `block (2 levels) in find_scope_calls'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/157&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Model Names for Rendered Collections&lt;/h3&gt;

&lt;p&gt;In cases like below, where a collection of models is being rendered and the model name could be known, any resulting warnings will now reference the actual model name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= render 'user', :collection =&amp;gt; User.all %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, Brakeman would report warnings with &lt;code&gt;UnknownModel&lt;/code&gt;, whether or not the model name was actually known.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/155&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Overwritten JSON Escape Config&lt;/h3&gt;

&lt;p&gt;It is possible that a config setting in one initializer overrides a setting in a different initializer. This is now handled for the JSON escape settings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/154&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CHANGES File in Gem&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/presidentbeef/brakeman/blob/master/CHANGES&quot;&gt;CHANGES&lt;/a&gt; file is now included in the gem file as requested.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/153&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Brakeman Roadmap&lt;/h3&gt;

&lt;p&gt;A rough guide to Brakeman 1.9 and 2.0 has been &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Roadmap&quot;&gt;posted here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/09/24/brakeman-1-dot-8-1-released/"/>
    <updated>2012-09-24T12:09:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/09/24/brakeman-1-dot-8-1-released</id>
    <content type="html">&lt;p&gt;Bug fixes!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recover from errors in output formatting (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/148&quot;&gt;#148&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive in &lt;code&gt;redirect_to&lt;/code&gt; (Neil Matatall) (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/143&quot;&gt;#143&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix problems with removal of &lt;code&gt;Sexp#method_missing&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/150&quot;&gt;#150&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix array indexing in alias processing (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/145&quot;&gt;#145&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix old &lt;code&gt;mail_to&lt;/code&gt; vulnerability check (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/147&quot;&gt;#147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix rescans when only controller action changes (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/141&quot;&gt;#141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow comparison of versions with unequal lengths (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/144&quot;&gt;#144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle super calls with blocks (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/146&quot;&gt;#146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove malformed Sexps from HAML processing  (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/149&quot;&gt;#149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect &lt;code&gt;-q&lt;/code&gt; flag for &quot;Rails 3 detected&quot; message&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Fix Crashes when Generating Report&lt;/h3&gt;

&lt;p&gt;Some scans were causing Brakeman to crash while generating reports with an error like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lib/brakeman/warning.rb:78:in `format_code': undefined method `gsub' for nil:NilClass (NoMethodError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was due to a combination of the removal of &lt;code&gt;method_missing&lt;/code&gt; behavior from &lt;code&gt;Sexp&lt;/code&gt; and the &lt;code&gt;OutputProcessor&lt;/code&gt; not handling errors well.&lt;/p&gt;

&lt;p&gt;The problem should be fixed now, but please report an issue if &quot;[Format Error]&quot; shows up in reports.&lt;/p&gt;

&lt;h3&gt;False Positive in Redirect Check&lt;/h3&gt;

&lt;p&gt;Neil Matatall fixed &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/143&quot;&gt;an issue&lt;/a&gt; with a false positive when redirecting to an array.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;redirect_to&lt;/code&gt; is given an array, Rails eventually falls through to &lt;code&gt;polymorphic_path&lt;/code&gt;, which will only return a path, not a full URL. Brakeman only checks for redirects that can redirect to a different host, so this is considered safe.&lt;/p&gt;

&lt;h3&gt;Sexp and &lt;code&gt;method_missing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The original &lt;code&gt;Sexp&lt;/code&gt; code from RubyParser uses &lt;code&gt;method_missing&lt;/code&gt; to find and optionally delete nodes. This functionality is not used very often (never in Brakeman) but has covered up bugs that would otherwise been found. Therefore, &lt;code&gt;Sexp#method_missing&lt;/code&gt; has been removed in Brakeman. However, it turns out that &lt;a href=&quot;https://github.com/seattlerb/ruby2ruby&quot;&gt;Ruby2Ruby&lt;/a&gt; uses it in a couple places. Brakeman uses Ruby2Ruby to covert s-expressions back to readable Ruby code, particularly when generating reports. This lead to some crashes.&lt;/p&gt;

&lt;h3&gt;Fix Array Indexing&lt;/h3&gt;

&lt;p&gt;Brakeman can handle pulling values out of simple arrays. Or it should be able to, but it keeps breaking. Should be fixed now!&lt;/p&gt;

&lt;h3&gt;Fix &lt;code&gt;mail_to&lt;/code&gt; Check&lt;/h3&gt;

&lt;p&gt;There is a Brakeman check for an &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/8CpI7egxX4E/discussion&quot;&gt;old vulnerability&lt;/a&gt; in &lt;code&gt;mail_to&lt;/code&gt;. However, it turns out this check has been broken for a while. But now it is fixed! And there are regression tests.&lt;/p&gt;

&lt;h3&gt;Fix Rescans on Controller Changes&lt;/h3&gt;

&lt;p&gt;There were some crashes when rescanning was triggered by a controller change.&lt;/p&gt;

&lt;h3&gt;HAML Processing&lt;/h3&gt;

&lt;p&gt;Some very old code for HAML processing was generating malformed s-expressions, which then had to be handled specially in the output formatter. It turns out these nodes were not even used, so they were removed. Please report any problems arising from this! We do not have a lot of HAML test cases.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/09/04/brakeman-1-dot-8-0-released/"/>
    <updated>2012-09-04T11:26:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/09/04/brakeman-1-dot-8-0-released</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Changes since 1.7.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support relative paths in reports (fsword)&lt;/li&gt;
&lt;li&gt;Allow Brakeman to be run without tty (fsword)&lt;/li&gt;
&lt;li&gt;Fix exit code with &lt;code&gt;--compare&lt;/code&gt; (fsword)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;--rake&lt;/code&gt; option (Deepak Kumar)&lt;/li&gt;
&lt;li&gt;Add high confidence warnings for &lt;code&gt;to_json&lt;/code&gt; XSS (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;redirect_to&lt;/code&gt; false negative&lt;/li&gt;
&lt;li&gt;Fix duplicate warnings with &lt;code&gt;raw&lt;/code&gt; calls&lt;/li&gt;
&lt;li&gt;Fix shadowing of rendered partials&lt;/li&gt;
&lt;li&gt;Add &quot;render chain&quot; to HTML reports&lt;/li&gt;
&lt;li&gt;Add check for XSS in &lt;code&gt;content_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add full backtrace for errors in debug mode&lt;/li&gt;
&lt;li&gt;Treat model attributes in &lt;code&gt;or&lt;/code&gt; expressions as immediate values&lt;/li&gt;
&lt;li&gt;Switch to method access for Sexp nodes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Relative Paths in Reports&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--relative-paths&lt;/code&gt; option will now cause Brakeman to output relative paths for warnings in reports in either JSON or tabs format. This is useful when comparing reports run on different machines or just in different directories.&lt;/p&gt;

&lt;h3&gt;Brakeman without TTY&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://fsword.github.com/&quot;&gt;fsword&lt;/a&gt;, Brakeman can now run without a TTY available.&lt;/p&gt;

&lt;h3&gt;Exit Code for Compare&lt;/h3&gt;

&lt;p&gt;Also thanks to fsword, Brakeman will return a proper exit code when run with &lt;code&gt;-z --compare&lt;/code&gt;. If any changes are found, the exit code will be nonzero.&lt;/p&gt;

&lt;h3&gt;Rake Task Generation Fixed&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--rake&lt;/code&gt; option was broken, but &lt;a href=&quot;https://github.com/deepakinseattle&quot;&gt;Deepak Kumar&lt;/a&gt; noticed and fixed it!&lt;/p&gt;

&lt;h3&gt;High Confidence Warnings for JSON&lt;/h3&gt;

&lt;p&gt;Older versions of Rails default to not escaping &lt;code&gt;to_json&lt;/code&gt; calls, leading to &lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/cross_site_scripting_to_json/&quot;&gt;cross site scripting problems&lt;/a&gt;. Since Rails 2.1.0, Rails has provided an option to escape JSON output by default. Brakeman will check this option, and warn on unescaped &lt;code&gt;to_json&lt;/code&gt; calls.&lt;/p&gt;

&lt;h3&gt;Fix Redirect False Negative&lt;/h3&gt;

&lt;p&gt;Brakeman was incorrectly checking for &lt;code&gt;:only_path =&amp;gt; true&lt;/code&gt; in &lt;em&gt;any&lt;/em&gt; argument to &lt;code&gt;redirect_to&lt;/code&gt;. However, it is only valid as part of the first argument.&lt;/p&gt;

&lt;h3&gt;Fix Duplicate Warnings on Raw Calls&lt;/h3&gt;

&lt;p&gt;A logic mistake sometimes caused a high and weak confidence warning to be reported for the same code using &lt;code&gt;raw&lt;/code&gt;. This has been fixed.&lt;/p&gt;

&lt;h3&gt;Fix Shadowing of Rendered Partials&lt;/h3&gt;

&lt;p&gt;Due to the way Brakeman was storing rendered partials, a view that was rendered multiple times via different code paths would only store a single instance of the rendered view. This could result in some vulnerabilities not being reported.&lt;/p&gt;

&lt;p&gt;To fix this, Brakeman now stores the entire &quot;render chain&quot; (that is, each location of a &lt;code&gt;render&lt;/code&gt;). This ensures a unique key for each rendered template.&lt;/p&gt;

&lt;h3&gt;Report Render Chain in HTML&lt;/h3&gt;

&lt;p&gt;HTML reports now have a new feature that reports the &quot;render chain&quot; for view warnings (if the chain is more than a single call deep).&lt;/p&gt;

&lt;p&gt;A warning like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/unexpanded_call_chain.png&quot; alt=&quot;Unexpanded&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Might expand to show this chain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/expanded_call_chain.png&quot; alt=&quot;Expanded&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Check for XSS in &lt;code&gt;content_tag&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;content_tag&lt;/code&gt; is a view helper for generating HTML tags containing some content. In Rails 2.x, &lt;code&gt;content_tag&lt;/code&gt; did not escape this content. In Rails 3.x, this changed so that now it is escaped. While &lt;code&gt;content_tag&lt;/code&gt; does have an &lt;code&gt;escape&lt;/code&gt; parameter (true by default), this only applies to the tag attribute &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Brakeman now warns on possible cross site scripting via &lt;code&gt;content_tag&lt;/code&gt; calls. &lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/content_tag&quot;&gt;See here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3&gt;Backtraces in Debug Mode&lt;/h3&gt;

&lt;p&gt;By default, Brakeman tries its best to recover from errors and produce a report. However, this can sometimes make it difficult to track down the sources of errors. Now, with the &lt;code&gt;-d&lt;/code&gt; option, Brakeman will report backtraces for errors encountered while running, as well as including backtraces in HTML reports.&lt;/p&gt;

&lt;h3&gt;Convenience Methods for Sexp Access&lt;/h3&gt;

&lt;p&gt;Previously, all code dealing with &lt;a href=&quot;https://en.wikipedia.org/wiki/S-exp&quot;&gt;s-expressions&lt;/a&gt; in the &lt;code&gt;Sexp&lt;/code&gt; class accessed nodes via array access, e.g. &lt;code&gt;exp[1]&lt;/code&gt; or &lt;code&gt;exp[2]&lt;/code&gt;. This led to hard-to-read code like &lt;code&gt;exp[2][3][1][1..-1]&lt;/code&gt;. This release includes convenience methods to replace those types of calls. Available methods are &lt;a href=&quot;http://rdoc.info/gems/brakeman/Sexp&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully this leads to code that is both easier to read and easier to write.&lt;/p&gt;

&lt;h3&gt;Reporting Problems&lt;/h3&gt;

&lt;p&gt;This release touches a lot of code (76 changed files with 1,515 additions and 598 deletions), so there is ample opportunity for bugs to sneak in. Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; and following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.7.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/08/13/brakeman-1-dot-7-1-released/"/>
    <updated>2012-08-13T11:04:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/08/13/brakeman-1-dot-7-1-released</id>
    <content type="html">&lt;p&gt;This is a small release to add checks for the &lt;a href=&quot;http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/&quot;&gt;Rails vulnerabilities reported last week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.7.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/fV3QUToSMSw/discussion&quot;&gt;CVE-2012-3463&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/kKGNeMrnmiY/discussion&quot;&gt;CVE-2012-3464&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/FgVEtBajcTY/discussion&quot;&gt;CVE-2012-3465&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add charset to HTML report (&lt;a href=&quot;https://github.com/hooopo&quot;&gt;hooopo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Report XSS in select() for Rails 2&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CVE-2012-3463 - XSS in select_tag Prompt&lt;/h3&gt;

&lt;p&gt;In Rails 3.x, values supplied to the &lt;code&gt;:prompt&lt;/code&gt; option in the &lt;code&gt;select_tag&lt;/code&gt; helper are not escaped, leading to a cross-site scripting vulnerability.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on all uses of &lt;code&gt;select_tag&lt;/code&gt; with unescaped user input in the &lt;code&gt;:prompt&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;CVE-2012-3464 - Single Quotes are Unescaped&lt;/h3&gt;

&lt;p&gt;This is pretty much a known issue (&lt;a href=&quot;http://www.ruby-forum.com/topic/166894&quot;&gt;example from 2008&lt;/a&gt;), but Rails 3.2.8 fixes it.&lt;/p&gt;

&lt;p&gt;Single quotes are most dangerous when interpolating values into HTML attributes that use single quotes, which is why it is often recommended to always use double quotes in HTML.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/kKGNeMrnmiY/discussion&quot;&gt;provided workaround&lt;/a&gt; for earlier versions of Rails which replaces &lt;code&gt;ERB::Util.html_escape&lt;/code&gt; with &lt;code&gt;Rack::Utils.escape_html&lt;/code&gt;. This method adds escaping for both single quotes (&lt;code&gt;'&lt;/code&gt;) and forward slashes (&lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If the provided workaround is used in an initializer, as suggested, then Brakeman will not generate a warning for this vulnerability. Otherwise, Brakeman will generate a warning for affected versions.&lt;/p&gt;

&lt;h3&gt;CVE-2012-3465 - XSS in strip_tags&lt;/h3&gt;

&lt;p&gt;Another vulnerability has been reported for &lt;code&gt;strip_tags&lt;/code&gt; (earlier report was &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/K5EwdJt06hI/discussion&quot;&gt;CVE-2011-2931&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Brakeman will warn on affected versions if uses of &lt;code&gt;strip_tags&lt;/code&gt; are detected.&lt;/p&gt;

&lt;h3&gt;XSS in select Helper&lt;/h3&gt;

&lt;p&gt;This vulnerability was &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/CdoMUVpsRmQ/discussion&quot;&gt;reported a while ago&lt;/a&gt;, but it was unclear if it applied to Rails 2.x or just Rails 3. Thanks to Neil Matatall, it has been confirmed to be an issue in Rails 2.x as well.&lt;/p&gt;

&lt;p&gt;Therefore, Brakeman will be reporting the vulnerability (&lt;code&gt;select&lt;/code&gt; does not escape options list if supplied as a straight string) for Rails 2.x as well.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.7.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/07/31/brakeman-1-dot-7-0-released/"/>
    <updated>2012-07-31T17:44:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/07/31/brakeman-1-dot-7-0-released</id>
    <content type="html">&lt;p&gt;This release includes improvements to Rails 3 route processing, better performance, several bug fixes, and more!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.2&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2012-3424&lt;/li&gt;
&lt;li&gt;Link report types to descriptions on website&lt;/li&gt;
&lt;li&gt;Report errors raised while running check&lt;/li&gt;
&lt;li&gt;Improve processing of Rails 3 routes&lt;/li&gt;
&lt;li&gt;Improve file access check&lt;/li&gt;
&lt;li&gt;Avoid warning on non-ActiveModel models&lt;/li&gt;
&lt;li&gt;Fix how &lt;code&gt;params[:x] ||=&lt;/code&gt; is handled&lt;/li&gt;
&lt;li&gt;Treat user input in &lt;code&gt;or&lt;/code&gt; expressions as immediate values&lt;/li&gt;
&lt;li&gt;Fix processing of negative array indexes&lt;/li&gt;
&lt;li&gt;Fix &quot;empty char-class&quot; error&lt;/li&gt;
&lt;li&gt;Speed improvements by stripping down SexpProcessor&lt;/li&gt;
&lt;li&gt;Add line breaks to truncated table rows&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Check for HTTP Auth Digest DoS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/vxJjrc15qYM/discussion&quot;&gt;CVE-2012-3424&lt;/a&gt;, a potential denial of service vulnerability in how Rails handles HTTP authentication digest parameters, was recently announced. It affects Rails 3.x, and is fixed in 3.0.16, 3.1.7, and 3.2.7.&lt;/p&gt;

&lt;p&gt;Brakeman will generate a warning for the Rails versions affected, but will only report a high confidence warning if &lt;code&gt;authenticate_or_request_with_http_digest&lt;/code&gt; or &lt;code&gt;authenticate_with_http_digest&lt;/code&gt; methods are called.&lt;/p&gt;

&lt;h3&gt;Links to Warning Information&lt;/h3&gt;

&lt;p&gt;HTML reports now link warning types to descriptions on the Brakeman website. JSON reports will also include the link information. Due to this change, it is not possible to compare JSON reports from previous versions using the &lt;code&gt;--compare&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Suggestions and &lt;a href=&quot;https://github.com/presidentbeef/brakeman-site&quot;&gt;pull requests&lt;/a&gt; for improving the documention are welcome!&lt;/p&gt;

&lt;h3&gt;Report Check Errors&lt;/h3&gt;

&lt;p&gt;Previously, errors encounted while running checks were not included in reports. This has been fixed.&lt;/p&gt;

&lt;h3&gt;Better Rails 3 Route Processing&lt;/h3&gt;

&lt;p&gt;Even the simple information Brakeman uses (which methods are routes) is difficult to extract from Rails 3 routes due to all the different options it offers. This release should decrease the number of &quot;Error while processing routes&quot; messages that come up.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/116&quot;&gt;this pull request&lt;/a&gt; for more information about specific fixes.&lt;/p&gt;

&lt;h3&gt;Improved File Access Check&lt;/h3&gt;

&lt;p&gt;The check for user input in file access calls has been improved so the confidence of the warnings will vary according to how the user input is used, like most other checks.&lt;/p&gt;

&lt;p&gt;Additionally, the check will now respect the &lt;code&gt;--report-direct&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;No SQLi Warnings for Non-ActiveModel&lt;/h3&gt;

&lt;p&gt;Models which do not inherit from &lt;code&gt;ActiveRecord::Base&lt;/code&gt; will no longer be reported in SQL injection warnings.&lt;/p&gt;

&lt;h3&gt;Default Assignment to &lt;code&gt;params&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Normally, when Brakeman processes an assignment like &lt;code&gt;x ||= y&lt;/code&gt;, it will assign &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; if no previous value is found for &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, in this case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;params[:x] ||= y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The information that the left hand side is a &lt;code&gt;params&lt;/code&gt; hash is lost.&lt;/p&gt;

&lt;p&gt;This has been changed so default assignment to a &lt;code&gt;params&lt;/code&gt; hash will not replace the entire value, but will handle it as &lt;code&gt;params[:x] || y&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;User Input in &lt;code&gt;or&lt;/code&gt; Expressions&lt;/h3&gt;

&lt;p&gt;Previously, unescaped output like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= params[:x] || z %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would have been reported as a weak confidence warning. This has been changed so that any user input in an &lt;code&gt;or&lt;/code&gt; expression will be considered immediate (versus &quot;indirect&quot;) output and will likely result in high confidence warnings.&lt;/p&gt;

&lt;h3&gt;Speed Improvements&lt;/h3&gt;

&lt;p&gt;Scan times should decrease by 15-25% with this release. This is mostly due to stripping unused bits out of SexpProcessor.&lt;/p&gt;

&lt;h3&gt;Bug Fixes&lt;/h3&gt;

&lt;p&gt;Besides errors raised when processing Rails 3 routes, the &lt;code&gt;Result must be a Sexp, was Symbol::array&lt;/code&gt; and &lt;code&gt;empty char-class&lt;/code&gt; errors should be resolved now.&lt;/p&gt;

&lt;p&gt;Please report any errors raised when performing scans, as they are usually bugs.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/06/12/brakeman-1-dot-6-2-released/"/>
    <updated>2012-06-12T17:07:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/06/12/brakeman-1-dot-6-2-released</id>
    <content type="html">&lt;p&gt;Besides checks for the latest CVEs, this release includes a slightly improved redirect check, noiser output with &lt;code&gt;--compare&lt;/code&gt;, and better handling of &lt;code&gt;before_filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add checks for CVE-2012-2660, CVE-2012-2661, CVE-2012-2694, CVE-2012-2695 (Dave Worth)&lt;/li&gt;
&lt;li&gt;Avoid warning when redirecting to a model instance&lt;/li&gt;
&lt;li&gt;Raise confidence level for model attributes in redirects&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;request.parameters&lt;/code&gt; as a parameters hash&lt;/li&gt;
&lt;li&gt;Return non-zero exit code when missing dependencies&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;before_filter :except&lt;/code&gt; logic&lt;/li&gt;
&lt;li&gt;Only accept symbol literals as before_filter names&lt;/li&gt;
&lt;li&gt;Cache before_filter lookups&lt;/li&gt;
&lt;li&gt;Turn off quiet mode by default for &lt;code&gt;--compare&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Latest CVEs&lt;/h3&gt;

&lt;p&gt;A number of Rails vulnerabilities were announced recently, although there are really only two issues.&lt;/p&gt;

&lt;p&gt;One issue is that query parameters like &lt;code&gt;?name[]&lt;/code&gt; and &lt;code&gt;?name[]=1&amp;amp;name[]&lt;/code&gt; get converted to &lt;code&gt;{&quot;name&quot; =&amp;gt; [nil]}&lt;/code&gt; and &lt;code&gt;{&quot;name&quot; =&amp;gt; [&quot;1&quot;, nil]}&lt;/code&gt;. This, in turn, causes ActiveRecord to produce SQL queries with either &lt;code&gt;IS NULL&lt;/code&gt; or &lt;code&gt;IN ('1', NULL)&lt;/code&gt;. This is probably unexpected behavior.&lt;/p&gt;

&lt;p&gt;The other issue is that query parameters like &lt;code&gt;?name[users.id]=1&lt;/code&gt; or &lt;code&gt;?name[users][id]=1&lt;/code&gt; get converted to &lt;code&gt;{&quot;name&quot; =&amp;gt; { &quot;users.id&quot; =&amp;gt; 1 }}&lt;/code&gt; or &lt;code&gt;{&quot;name&quot; =&amp;gt; { &quot;users&quot; =&amp;gt; { &quot;id&quot; =&amp;gt; 1 }}}&lt;/code&gt;. ActiveRecord interprets &lt;code&gt;&quot;users.id&quot;&lt;/code&gt; and &lt;code&gt;&quot;users&quot; =&amp;gt; { &quot;id&quot; ...}&lt;/code&gt; as &lt;code&gt;&quot;users&quot;.&quot;id&quot;&lt;/code&gt; in the WHERE clause, allowing an attacker to control the table/columns being queried.&lt;/p&gt;

&lt;p&gt;Updated versions for Rails 3.x have been released.&lt;/p&gt;

&lt;p&gt;For Rails 2.3, I believe &lt;a href=&quot;https://github.com/presidentbeef/rails/pull/1/files&quot;&gt;these changes&lt;/a&gt; will fix the first issue, and there is another &lt;a href=&quot;https://rubyonrails-security.googlegroups.com/attach/aee3413fb038bf56/2-3-sql-injection.patch?view=1&amp;amp;part=3&quot;&gt;patch available&lt;/a&gt; for the second issue.&lt;/p&gt;

&lt;p&gt;Older versions of Rails 2.x may be vulnerable to the &quot;NULL&quot; issue, but not to the nested hashes problem.&lt;/p&gt;

&lt;h3&gt;Unprotected Redirect Check&lt;/h3&gt;

&lt;p&gt;There have been some minor changes to &lt;code&gt;CheckRedirect&lt;/code&gt;. In most cases, it should no longer warn when redirecting to a model instance. If there are still false positives with this scenario, please report them.&lt;/p&gt;

&lt;p&gt;The other change is that redirects to model attributes will now be marked as high confidence, instead of weak.&lt;/p&gt;

&lt;h3&gt;Exit Code on Missing Dependencies&lt;/h3&gt;

&lt;p&gt;Brakeman catches errors from missing dependencies in order to show a nicer error message. Unfortunately, it was also returning &lt;code&gt;0&lt;/code&gt; on exit. This is undesirable behavior when chaining commands together.&lt;/p&gt;

&lt;p&gt;This has been changed to return a non-zero exit code.&lt;/p&gt;

&lt;h3&gt;Before Filter Changes&lt;/h3&gt;

&lt;p&gt;There were some isues with how &lt;code&gt;before_filter&lt;/code&gt; was being handled. The logic when using &lt;code&gt;:except&lt;/code&gt; was broken, causing Brakeman to treat it like &lt;code&gt;:only&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other issue caused Brakeman to interpret arguments such as method calls as method names. For example, &lt;code&gt;before_filter blah&lt;/code&gt; would be treated like &lt;code&gt;before_filter :blah&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While dealing with this, caching of filter lookups was also added for a minor performance improvement.&lt;/p&gt;

&lt;h3&gt;Noisier &lt;code&gt;--compare&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;--compare&lt;/code&gt; option now shows the same output as a regular scan. If you are piping the output of &lt;code&gt;--compare&lt;/code&gt; to a file or elsewhere, you may wish to use the &lt;code&gt;--quiet&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/05/23/brakeman-1-dot-6-1-released/"/>
    <updated>2012-05-23T12:45:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/05/23/brakeman-1-dot-6-1-released</id>
    <content type="html">&lt;p&gt;Wow, it's been over a month since the last release!&lt;/p&gt;

&lt;p&gt;The major change in this version is a rewrite of the SQL injection check. Many more methods are covered, and there should be a reduction of false positives as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Major rewrite of CheckSQL&lt;/li&gt;
&lt;li&gt;Process actions mixed into controllers&lt;/li&gt;
&lt;li&gt;Check for inherited &lt;code&gt;attr_accessible&lt;/code&gt; (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Handle &lt;code&gt;render :template =&amp;gt; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Report line number of highlighted value, if available&lt;/li&gt;
&lt;li&gt;Fix highlighting of HTML escaped values in HTML report&lt;/li&gt;
&lt;li&gt;Fix rescanning of deleted templates&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Updated SQL Injection Check&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CheckSQL&lt;/code&gt; has been completely revamped. Brakeman now has a much better understanding of the various ActiveRecord::FinderMethods and ActiveRecord::QueryMethods, as well as their options.&lt;/p&gt;

&lt;p&gt;The check is also more conservative about what it warns on. Previously, since string interpolation is the main entry point for SQL injection in Rails, any interpolated value in a query would generate a warning. Now, &quot;safe&quot; sanitization methods, obviously safe methods like &lt;code&gt;to_i&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;, constants, strings, and other literal values should not cause warnings.&lt;/p&gt;

&lt;p&gt;The &quot;highlighted&quot; value (or &quot;user input&quot;) reported for SQL warnings should be much more accurate now, making it easier to determine why a warning was reported.&lt;/p&gt;

&lt;h3&gt;Controller Mixins&lt;/h3&gt;

&lt;p&gt;Methods on controller mixins that are used as actions should now be processed as if they were defined in the controller itself.&lt;/p&gt;

&lt;h3&gt;Check for Inherited Mass Assignment Protection&lt;/h3&gt;

&lt;p&gt;Since mass assignment protection via &lt;code&gt;attr_accessible&lt;/code&gt; is inheritable, Brakeman will no longer warn about models whose parent uses &lt;code&gt;attr_accessible&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Template Option in Render&lt;/h3&gt;

&lt;p&gt;Somehow, the &lt;code&gt;:template&lt;/code&gt; option for &lt;code&gt;render&lt;/code&gt; has been ignored this whole time. Sorry!&lt;/p&gt;

&lt;h3&gt;Better Line Numbers&lt;/h3&gt;

&lt;p&gt;Warnings which have a &lt;code&gt;:user_input&lt;/code&gt; field use that value to &quot;highlight&quot; part of the code in the reported warning. This value usually corresponds to the code which actually caused the warning to be generated.&lt;/p&gt;

&lt;p&gt;If a warning has this field, the line number of that code is used, instead of the starting line number of the entire piece of code. This often leads to more accurate and helpful line numbers.&lt;/p&gt;

&lt;h3&gt;Highlighted Values in HTML Reports&lt;/h3&gt;

&lt;p&gt;Since the warnings output in HTML reports are HTML-escaped, there was a sometimes mismatch between the value that needed to be highlighted and the HTML warning output, causing nothing to be highlighted. This is fixed now.&lt;/p&gt;

&lt;h3&gt;Rescanning of Deleted Templates&lt;/h3&gt;

&lt;p&gt;In the rescanning logic, templates which are related to a changed file (a view or partial that is rendered, usually) will be rescanned. However, there is the possibility that the template which needs to be rescanned as a related file has been deleted as part of the set of changes. This caused the rescanning to blow up, but that has been fixed now.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;Don't forget to check out the &lt;a href=&quot;https://speakerdeck.com/u/presidentbeef/p/keeping-rails-applications-on-track-with-brakeman&quot;&gt;RailsConf Brakeman presentation slides&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/04/20/brakeman-1-dot-6-released/"/>
    <updated>2012-04-20T10:22:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/04/20/brakeman-1-dot-6-released</id>
    <content type="html">&lt;p&gt;A lot of code has changed in this release, particularly with the removal of the Ruport library for reporting. While Ruport worked pretty well, it caused some issues just due to the large number of (out-dated) dependencies it brought with it.&lt;/p&gt;

&lt;p&gt;Also, this release changes the JSON report output. This is a backwards &lt;em&gt;incompatible&lt;/em&gt; change. But, given how useless the previous JSON reports were, hopefully this will not affect too many people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.5.3:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the Ruport dependency (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add more informational JSON output (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add comparison to previous JSON report (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add highlighting of dangerous values in HTML/text reports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model#update_attribute&lt;/code&gt; should not raise mass assignment warning (Dave Worth)&lt;/li&gt;
&lt;li&gt;Don't check &lt;code&gt;find_by_*&lt;/code&gt; method for SQL injection&lt;/li&gt;
&lt;li&gt;Fix duplicate reporting of mass assignment and SQL injection&lt;/li&gt;
&lt;li&gt;Fix rescanning of deleted files&lt;/li&gt;
&lt;li&gt;Properly check for &lt;code&gt;rails_xss&lt;/code&gt; in Gemfile&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;No More Ruport&lt;/h3&gt;

&lt;p&gt;Ruport is a nice library, but it also has not been updated in over two years and its dependency tree was ridiculous.&lt;/p&gt;

&lt;p&gt;Thanks to Neil Matatall, Brakeman no longer depends on Ruport, but the reports should look essentially the same. The HTML reports are now rendered through ERB templates, so it should not be too difficult to customize the reports if desired.&lt;/p&gt;

&lt;h3&gt;Better JSON Output&lt;/h3&gt;

&lt;p&gt;JSON output now includes meta-information about the scan, errors raised during the scan, and line numbers for each warning.&lt;/p&gt;

&lt;h3&gt;JSON Report Comparison&lt;/h3&gt;

&lt;p&gt;Being able to compare Brakeman reports is essential for tracking warnings over time. Prior to this release, the only decent way of doing that was via the &lt;a href=&quot;http://brakemanscanner.org/docs/jenkins/&quot;&gt;Jenkins plugin&lt;/a&gt;. But now Brakeman can compare results to the JSON report from a previous scan.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brakeman -o report.json
brakeman --compare report.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run another scan, then output a comparison of the reports (in JSON). The report includes a list of fixed warnings and a list of new warnings that were found.&lt;/p&gt;

&lt;h3&gt;User Input Highlighted in Reports&lt;/h3&gt;

&lt;p&gt;Sometimes it is unclear exactly what value has caused Brakeman to issue a particular warning. This release adds highlighting the detected user input in most warnings. (Some warnings, the code that is reported &lt;em&gt;is&lt;/em&gt; the detected user input). This information is also available in the JSON reports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/user_input_highlight.png&quot; title=&quot;Example of User Input Highlighting&quot; alt=&quot;User Input Highlight&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Fewer Mass Assignment and SQL Injection Methods&lt;/h3&gt;

&lt;p&gt;Dave Worth pointed out that Brakeman was a little overzealous in which methods it considered susceptible to mass assignment and SQL injection attacks.&lt;/p&gt;

&lt;p&gt;Brakeman will no longer check &lt;code&gt;update_attribute&lt;/code&gt; for mass assignment or the &lt;code&gt;find_by_*&lt;/code&gt; dynamic methods for SQL injection.&lt;/p&gt;

&lt;h3&gt;Fewer Mass Assignment and SQL Injection Duplicates&lt;/h3&gt;

&lt;p&gt;Pesky duplicate reports of mass assignment and SQL injection were turning up as template warnings. This occurred when the results of the mass assignment or SQL query were assigned to a variable which was then used in a template. This should now be fixed.&lt;/p&gt;

&lt;p&gt;More details than are probably desired are available &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/82&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Rescanning Fixes&lt;/h3&gt;

&lt;p&gt;Rescanning of deleted files is now supported, and there some other issues with rescanning that are now resolved as well.&lt;/p&gt;

&lt;h3&gt;New Logo&lt;/h3&gt;

&lt;p&gt;Brakeman has a sweet new logo, thanks to &lt;a href=&quot;http://janellelawless.com/&quot;&gt;Janelle Lawless&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/logo_medium.png&quot; alt=&quot;Brakeman Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Updates to the website to reflect this awesomeness are coming soon.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;And don't forget to check out the Brakeman talk at &lt;a href=&quot;http://railsconf2012.com/sessions/44&quot;&gt;RailsConf&lt;/a&gt; in a few days.&lt;/p&gt;
</content>
  </entry>
  
</feed>
