<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Brakeman</title>
  <link href="http://brakemanscanner.org/atom.xml" rel="self"/>
  <link href="http://brakemanscanner.org/"/>
  <updated>2012-03-01T21:03:44-08:00</updated>
  <id>http://brakemanscanner.org/</id>
  <author>
    <name>Justin Collins</name>
    
  </author>

  
  <entry>
    <title>Brakeman 1.5.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/03/01/brakeman-1-dot-5-0-released/"/>
    <updated>2012-03-01T20:23:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/03/01/brakeman-1-dot-5-0-released</id>
    <content type="html">&lt;p&gt;A release was forced today because two new Rails vulnerabilities were reported (the first since November):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/9da0c515a6c4664&quot;&gt;Manual options are not escaped in select()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/edd28f1e3d04e913&quot;&gt;Some operations on SafeBuffer mistakenly return strings marked as html_safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release includes checks for these two vulnerabilities.&lt;/p&gt;

&lt;p&gt;There is also a new check for skipping CSRF token verification, and some other changes which may result in fewer or more vulnerabilities being reported.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.4.0:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add version check for SafeBuffer vulnerability&lt;/li&gt;
&lt;li&gt;Add check for select vulnerability in Rails 3&lt;/li&gt;
&lt;li&gt;select() is no longer considered safe in Rails 2&lt;/li&gt;
&lt;li&gt;Add check for skipping CSRF protection with a blacklist&lt;/li&gt;
&lt;li&gt;Add JSON report format&lt;/li&gt;
&lt;li&gt;Model#id should not be considered XSS&lt;/li&gt;
&lt;li&gt;Standardize methods to check for SQL injection&lt;/li&gt;
&lt;li&gt;Fix Rails 2 route parsing issue with nested routes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Check for SafeBuffer Vulnerability&lt;/h3&gt;

&lt;p&gt;A new vulnerability was reported that affects strings which are marked as &lt;code&gt;html_safe&lt;/code&gt; and then modified in some way. For some operations, the new, modified string will still be marked as &lt;code&gt;html_safe&lt;/code&gt;. Full details &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/edd28f1e3d04e913&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this vulnerability, Brakeman only does a version check and reports if an application is used a vulnerable version of Rails. It only reports on Rails 3 applications, since Rails 3 introduced the concept of SafeBuffers.&lt;/p&gt;

&lt;h3&gt;Check for select Helper Vulnerability&lt;/h3&gt;

&lt;p&gt;Another vulnerability was reported today in the &lt;code&gt;select&lt;/code&gt; form helper. Option tags built by hand (interpolating values into &lt;code&gt;&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;&lt;/code&gt;) will not be escaped by &lt;code&gt;select&lt;/code&gt;. Full details &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/9da0c515a6c4664&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Rails 3 applications, Brakeman checks for uses of &lt;code&gt;select&lt;/code&gt; which have user input in the &lt;code&gt;options&lt;/code&gt; argument. This check may be refined in the future.&lt;/p&gt;

&lt;p&gt;For Rails 2, Brakeman no longer considers &lt;code&gt;select&lt;/code&gt; a safe method when checking for cross site scripting.&lt;/p&gt;

&lt;h3&gt;Check for CSRF Filter Skipping&lt;/h3&gt;

&lt;p&gt;When cross site request forgery protection is enabled, a &lt;code&gt;before_filter&lt;/code&gt; is added called &lt;code&gt;verify_authenticity_token&lt;/code&gt;. This filter checks that actions called responding to a &lt;code&gt;POST&lt;/code&gt; have a correct authenticity token from the client. Since this is a regular &lt;code&gt;before_filter&lt;/code&gt;, it can be skipped using &lt;code&gt;skip_before_filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;skip_before_filter&lt;/code&gt; is called using an &lt;code&gt;:except&lt;/code&gt; option, then the default for the controller becomes NOT checking for an authenticity token:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;skip_before_filter :verify_authenticity_token, :except =&amp;gt; [:create, :delete]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended to use &lt;code&gt;:only&lt;/code&gt; if skipping this filter is actually necessary. This way, any new actions added later will automatically fall under the CSRF protection.&lt;/p&gt;

&lt;p&gt;This check may be extended in the future to other important filters.&lt;/p&gt;

&lt;h3&gt;JSON Report Format&lt;/h3&gt;

&lt;p&gt;While the code for outputting JSON was in the 1.4.0 release, it was not actually added as a proper output format! This has been rectified.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-f json&lt;/code&gt; or &lt;code&gt;-o report.json&lt;/code&gt; will now produce JSON reports.&lt;/p&gt;

&lt;p&gt;The information contained in these reports may change in the future, although that should only be adding more information.&lt;/p&gt;

&lt;h3&gt;SQL Methods&lt;/h3&gt;

&lt;p&gt;The code for finding SQL methods to check for SQL injection was a little messed up. Depending on how the method was called, different sets of methods were considered dangerous.&lt;/p&gt;

&lt;p&gt;This has been changed for better consistency and coverage. This means reports may include new SQL injections, so keep an eye out.&lt;/p&gt;

&lt;h3&gt;Rails 2 Route Parsing Fix&lt;/h3&gt;

&lt;p&gt;There was a bug in the code which determined if a method was being called on &lt;code&gt;map&lt;/code&gt;, which caused Brakeman to think strange methods were route definitions (for example, &lt;code&gt;require&lt;/code&gt;). This has been fixed.&lt;/p&gt;

&lt;h3&gt;Report Problems!&lt;/h3&gt;

&lt;p&gt;Always &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report problems&lt;/a&gt; encountered when running Brakeman.&lt;/p&gt;

&lt;p&gt;Don't forget to join the &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;mailing list&lt;/a&gt; and/or follow &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@Brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.4.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/02/25/brakeman-1-dot-4-0-released/"/>
    <updated>2012-02-25T09:57:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/02/25/brakeman-1-dot-4-0-released</id>
    <content type="html">&lt;p&gt;This is not a big release, but it does add a new check. Also, processing for ERB templates with the &lt;code&gt;rails_xss&lt;/code&gt; plugin has changed, so there is the possibility that line numbers for reported warnings will shift.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.3.0:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for user input in link_to href parameter&lt;/li&gt;
&lt;li&gt;Match ERB processing to rails_xss plugin when plugin used&lt;/li&gt;
&lt;li&gt;Add Brakeman::Report#to_json, Brakeman::Warning#to_json&lt;/li&gt;
&lt;li&gt;Warnings below minimum confidence are dropped completely&lt;/li&gt;
&lt;li&gt;Brakeman.run will now always return a Tracker&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;New Check for link_to&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oreoshake&quot;&gt;Neil Matatall&lt;/a&gt; has contributed a new check for the href parameter in &lt;code&gt;link_to&lt;/code&gt;. Even if HTML escaped, some values can be dangerous, so this check will warn for user input in that parameter. See &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/45&quot;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--url-safe-methods&lt;/code&gt; option can be used to specify escaping methods which are safe for urls.&lt;/p&gt;

&lt;h3&gt;ERB and rails_xss&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;rails_xss&lt;/code&gt; plugin has some fixes for how Erbuis handles certain input. Brakeman now matches those changes, which fixes some parsing errors.&lt;/p&gt;

&lt;h3&gt;Internal Changes&lt;/h3&gt;

&lt;p&gt;There have been some changes which only impact those working with Brakeman as a library.&lt;/p&gt;

&lt;p&gt;First, there is now json output for reports. This actually should be an output format option, but I did not realize it until writing this post. The next release will include this, though!&lt;/p&gt;

&lt;p&gt;The way Brakeman handles the &lt;code&gt;--confidence-level&lt;/code&gt; option has also changed. In the past, warnings would be filtered when output in a report. This meant, for example, that &lt;code&gt;tracker.checks.all_warnings&lt;/code&gt; would still return warnings below the specified confidence level. It also caused problems because there were many places in the code where the warnings needed to be filtered. With this release, warnings below the confidence level will be dropped as soon as they are found and will not need to be filtered at any later point.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;code&gt;Brakeman.run&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;--exit-on-warn&lt;/code&gt; was set, and a &lt;code&gt;Tracker&lt;/code&gt; object otherwise. This has changed. &lt;code&gt;Brakeman.run&lt;/code&gt; will now always return a &lt;code&gt;Tracker&lt;/code&gt; object and the logic for &lt;code&gt;--exit-on-warn&lt;/code&gt; was pushed out to the Brakeman executable.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;As usual, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report any issues&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.3.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/02/08/brakeman-1-dot-3-0-released/"/>
    <updated>2012-02-08T15:11:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/02/08/brakeman-1-dot-3-0-released</id>
    <content type="html">&lt;p&gt;Thanks to everyone who reported problems and suggestions this time around!&lt;/p&gt;

&lt;p&gt;This release includes some new features, better performance on large projects, and more detection criteria. Warnings reported may change after upgrading.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.2.2:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add file paths to HTML report&lt;/li&gt;
&lt;li&gt;Add caching of filters&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--skip-files&lt;/code&gt; option&lt;/li&gt;
&lt;li&gt;Add support for &lt;code&gt;attr_protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add detection of request.env as user input&lt;/li&gt;
&lt;li&gt;Descriptions of checks in &lt;code&gt;-k&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;Improved processing of named scopes&lt;/li&gt;
&lt;li&gt;Check for mass assignment in &lt;code&gt;ActiveRecord::Associations::AssociationCollection#build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Better variable substitution&lt;/li&gt;
&lt;li&gt;Table output option for rescan reports&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;File Paths in HTML Report&lt;/h3&gt;

&lt;p&gt;In the HTML output, any warning which has context associated with it (visible when clicking on the warning message) will now include the file name at the top of the code snippet.&lt;/p&gt;

&lt;h3&gt;Filter Caching&lt;/h3&gt;

&lt;p&gt;Filters (using &lt;code&gt;before_filter&lt;/code&gt;) are now only parsed once, instead of for everytime they are used. This has greatly improved performance when scanning some large projects.&lt;/p&gt;

&lt;h3&gt;Option to Skip Files&lt;/h3&gt;

&lt;p&gt;A list of files to skip can be provided with the &lt;code&gt;--skip-files&lt;/code&gt; option. This will skip any initializers, libraries, controllers, models, or views that match the file names provided. The file names to skip are matched against the end of the absolute path. That is, &lt;code&gt;blah.rb&lt;/code&gt; will skip &lt;em&gt;any&lt;/em&gt; file with a name ending in &lt;code&gt;blah.rb&lt;/code&gt;. This means it is not necessary to provide the full path to a file.&lt;/p&gt;

&lt;h3&gt;Support for Blacklisting Attributes&lt;/h3&gt;

&lt;p&gt;Previously, Brakeman ignored uses of &lt;code&gt;attr_protected&lt;/code&gt;. Ideally, &lt;code&gt;attr_accessible&lt;/code&gt; should always be used to whitelist attributes that can be set using mass assignment. This way, attributes can never be &quot;accidentally&quot; exposed. However, it can also be tedious for large models.&lt;/p&gt;

&lt;p&gt;With this release, Brakeman will downgrade mass assignment warnings to &quot;weak&quot; confidence if &lt;code&gt;attr_protected&lt;/code&gt; is used, as well as suggesting that &lt;code&gt;attr_accessible&lt;/code&gt; be used instead.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--ignore-protected&lt;/code&gt; option can be used to suppress any warnings for models that use &lt;code&gt;attr_protected&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Request Environment is User Input&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;request.env&lt;/code&gt; will now be treated as user input.&lt;/p&gt;

&lt;h3&gt;Check Descriptions&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-k&lt;/code&gt; option now includes descriptions of each check.&lt;/p&gt;

&lt;h3&gt;Named Scope Improvements&lt;/h3&gt;

&lt;p&gt;The 1.2.0 release added checking for SQL injection in named scopes, but it was not very accurate. This has been improved.&lt;/p&gt;

&lt;h3&gt;Better Variable Substitution&lt;/h3&gt;

&lt;p&gt;Variable substitution would sometimes &quot;explode&quot; if a set of code was processed for aliasing several times.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Might become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts clean(clean(clean(clean(x))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should now be prevented, so it would just become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts clean(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There may be subtle issues with this code (although I have not seen any yet), but it's better than creating a bunch of useless substitutions.&lt;/p&gt;

&lt;h3&gt;Table Output for Rescan Reports&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RescanReport#to_s(true)&lt;/code&gt; will now output formatted tables, thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/33&quot;&gt;Dave Worth&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Issues?&lt;/h3&gt;

&lt;p&gt;As usual, please report any issues on &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;GitHub&lt;/a&gt;, send a tweet to &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@Brakeman&lt;/a&gt;, or send an email to the &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.2.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/01/26/brakeman-1-dot-2-2-released/"/>
    <updated>2012-01-26T13:58:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/01/26/brakeman-1-dot-2-2-released</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Changes since 1.2.1:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;--no-progress works again&lt;/li&gt;
&lt;li&gt;Make CheckLinkTo a separate check&lt;/li&gt;
&lt;li&gt;Don't fail on unknown options to resource(s)&lt;/li&gt;
&lt;li&gt;Handle empty resource(s) blocks&lt;/li&gt;
&lt;li&gt;Add RescanReport#existing_warnings&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;No Progress Option&lt;/h3&gt;

&lt;p&gt;The last release broke the &lt;code&gt;--no-progress&lt;/code&gt; option for hiding the &lt;code&gt;1/100 files processed&lt;/code&gt; type messages. Now it works again!&lt;/p&gt;

&lt;h3&gt;Separate Check for link_to&lt;/h3&gt;

&lt;p&gt;For no great reason, &lt;code&gt;CheckLinkTo&lt;/code&gt; was bundled with &lt;code&gt;CheckCrossSiteScripting&lt;/code&gt;. It has now been moved out to a separate file, allowing it to be treated as a regular check. This means it can be explicitly skipped using &lt;code&gt;-x CheckLinkTo&lt;/code&gt; (if desired).&lt;/p&gt;

&lt;h3&gt;Better Rails 2 Route Handling&lt;/h3&gt;

&lt;p&gt;Brakeman was raising an exception if a hash option to &lt;code&gt;resource&lt;/code&gt; or &lt;code&gt;resources&lt;/code&gt; did not match a set of known options. Now it will only warn instead of aborting route processing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.2.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/01/20/brakeman-1-dot-2-1-released/"/>
    <updated>2012-01-20T12:16:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/01/20/brakeman-1-dot-2-1-released</id>
    <content type="html">&lt;p&gt;This is essentially just a bugfix release, but due to the fixes for &lt;code&gt;link_to&lt;/code&gt; warnings, there is a good possibility the number of reported warnings will decrease when upgrading to this version.&lt;/p&gt;

&lt;p&gt;Changes since 1.2.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove link_to warning for Rails 3.x or when using rails_xss&lt;/li&gt;
&lt;li&gt;Don't warn if first argument to link_to is escaped&lt;/li&gt;
&lt;li&gt;Detect usage of attr_accessible with no arguments&lt;/li&gt;
&lt;li&gt;Fix error when rendering a partial from a view but not through a controller&lt;/li&gt;
&lt;li&gt;Fix some issues with rails_xss, CheckCrossSiteScripting, and CheckTranslateBug&lt;/li&gt;
&lt;li&gt;Simplify Brakeman Rake task&lt;/li&gt;
&lt;li&gt;Avoid modifying $VERBOSE&lt;/li&gt;
&lt;li&gt;Add Brakeman::RescanReport#to_s&lt;/li&gt;
&lt;li&gt;Add Brakeman::Warning#to_s&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;link_to Changes&lt;/h3&gt;

&lt;p&gt;Prior to Rails 3.0, there &lt;a href=&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3518-link_to-doesnt-escape-its-input&quot;&gt;was a bug&lt;/a&gt; in &lt;code&gt;link_to&lt;/code&gt; that caused the body of the link tag to be output without escaping. While this was fixed in Rails 3.0, Brakeman has still been warning on it. This was also fixed in the &lt;a href=&quot;https://github.com/rails/rails_xss/commit/afc1610fe4b94150faee98c16f15a24290d20900&quot;&gt;rails_xss&lt;/a&gt;, so Brakeman should no longer warn on &lt;code&gt;link_to&lt;/code&gt; for Rails 2.x when using the rails_xss plugin.&lt;/p&gt;

&lt;p&gt;Brakeman was also warning on &lt;code&gt;link_to&lt;/code&gt; even if the body argument was manually escaped. This should be resolved now.&lt;/p&gt;

&lt;p&gt;One other related issue was a silly bug causing Brakeman to sometimes ignore &lt;code&gt;--escape-html&lt;/code&gt; or the rails_xss plugin, leading to some confusing output. This is fixed.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/32&quot;&gt;Neil Matatall&lt;/a&gt; for reporting the &lt;code&gt;link_to&lt;/code&gt; issue and &lt;a href=&quot;https://github.com/a5sk4s&quot;&gt;Andreas&lt;/a&gt; for reporting the rails_xss problems.&lt;/p&gt;

&lt;h3&gt;attr_accessible with No Arguments&lt;/h3&gt;

&lt;p&gt;Brakeman was not detecting the case where &lt;code&gt;attr_accessible&lt;/code&gt; is called with zero arguments, causing spurious mass assignment warnings.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/31&quot;&gt;Justin Wiley&lt;/a&gt; for reporting this.&lt;/p&gt;

&lt;h3&gt;Brakeman Rake Task&lt;/h3&gt;

&lt;p&gt;The Brakeman Rake task (installed via &lt;code&gt;--rake&lt;/code&gt;) is even &lt;a href=&quot;http://brakemanscanner.org/docs/rake&quot;&gt;simpler now&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;$VERBOSE&lt;/h3&gt;

&lt;p&gt;Brakeman was using &lt;code&gt;$VERBOSE&lt;/code&gt; and &lt;code&gt;Kernel.warn&lt;/code&gt; for controlling debug output. This has changed and &lt;code&gt;$VERBOSE&lt;/code&gt; will no longer be modified when using Brakeman.&lt;/p&gt;

&lt;h3&gt;Rails 3.2 Support&lt;/h3&gt;

&lt;p&gt;So far, there have not been any issues with Brakeman and Rails 3.2. Please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report&lt;/a&gt; any that come up!&lt;/p&gt;

&lt;h3&gt;JRuby Performance&lt;/h3&gt;

&lt;p&gt;Prior to Brakeman 1.2, &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; was very slow when running Brakeman. This has changed, and now JRuby is probably the fastest option for scanning large applications. Give it a try, especially if you are using Ruby 1.8.7!&lt;/p&gt;

&lt;h3&gt;Mailing List&lt;/h3&gt;

&lt;p&gt;There is now a Brakeman mailing list on &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;librelist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To subscribe, send any email to &lt;a href='&amp;#109;ailto&amp;#58;b&amp;#114;%&amp;#54;1k&amp;#37;65m&amp;#37;&amp;#54;1n&amp;#64;&amp;#37;6Ci&amp;#98;%&amp;#55;2&amp;#101;l%&amp;#54;&amp;#57;st&amp;#46;com'&gt;brakeman&amp;#64;libr&amp;#101;&amp;#108;ist&amp;#46;com&lt;/a&gt;. You will be asked to confirm your subscription.&lt;/p&gt;

&lt;p&gt;Archives are available for browsing on &lt;a href=&quot;http://www.mail-archive.com/brakeman@librelist.com/maillist.html&quot;&gt;The Mail Archive&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/01/13/brakeman-1-dot-2-released/"/>
    <updated>2012-01-13T22:00:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/01/13/brakeman-1-dot-2-released</id>
    <content type="html">&lt;p&gt;First Brakeman release of 2012!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.1:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed improvements for CheckExecute and CheckRender&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;named_scope&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; for SQL injection&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--rake&lt;/code&gt; option to create rake task to run Brakeman&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--summary&lt;/code&gt; option to only output summary&lt;/li&gt;
&lt;li&gt;Add experimental support for rescanning a subset of files&lt;/li&gt;
&lt;li&gt;Fix a problem with Rails 3 routes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Besides those, there has also been quite a bit of code improvement internally.&lt;/p&gt;

&lt;h3&gt;Speed Improvements&lt;/h3&gt;

&lt;p&gt;The checks for command injection and dynamic render paths should be considerably faster now.&lt;/p&gt;

&lt;h3&gt;More SQL Injection Checks&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/30&quot;&gt;a5sk4s&lt;/a&gt; for pointing out that Brakeman was not checking &lt;code&gt;named_scope&lt;/code&gt; for SQL injection. This has been rectified. For Rails 3.1 and up, &lt;code&gt;scope&lt;/code&gt; will be checked.&lt;/p&gt;

&lt;p&gt;Also, it seems common to use &lt;code&gt;Model.table_name&lt;/code&gt; inside SQL statements. This will no longer raise a warning.&lt;/p&gt;

&lt;h3&gt;Brakeman Rake Task&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--rake&lt;/code&gt; option can now be used to install a Rake task for running Brakeman. The task will be copied to &lt;code&gt;lib/tasks/brakeman.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use, run this from the root of the Rails app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brakeman --rake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, to run Brakeman:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake brakeman:run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Naturally, this requires Rake to be installed.&lt;/p&gt;

&lt;p&gt;To output to a specific file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake brakeman:run[&quot;report.html&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More actions may be added in the future.&lt;/p&gt;

&lt;h3&gt;Summary Option&lt;/h3&gt;

&lt;p&gt;Sometimes the specifics of a scan are not needed. The &lt;code&gt;--summary&lt;/code&gt; option will limit the report output to just the summary section.&lt;/p&gt;

&lt;h3&gt;Rescan for Subset of Files&lt;/h3&gt;

&lt;p&gt;This release adds experimental support for rescanning a subset of paths in a Rails application. Please see this &lt;a href=&quot;https://gist.github.com/1563286&quot;&gt;example&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Issues&lt;/h3&gt;

&lt;p&gt;Please report &lt;em&gt;any&lt;/em&gt; problems or questions on &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;GitHub&lt;/a&gt; or send a tweet to &lt;a href=&quot;https://twitter.com/#!/brakemanscanner&quot;&gt;@Brakeman&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/12/21/brakeman-1-dot-1-released/"/>
    <updated>2011-12-21T19:12:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/12/21/brakeman-1-dot-1-released</id>
    <content type="html">&lt;p&gt;This was supposed to be a 1.0.1 release, but quite a bit of code changed.&lt;/p&gt;

&lt;p&gt;Changes since 1.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relax required versions for dependencies (this is for Bundler users)&lt;/li&gt;
&lt;li&gt;Performance improvements for source processing&lt;/li&gt;
&lt;li&gt;Better progress reporting&lt;/li&gt;
&lt;li&gt;Handle basic operators like &amp;lt;&amp;lt; + - * /&lt;/li&gt;
&lt;li&gt;Rescue more errors to prevent Brakeman from completely bailing out&lt;/li&gt;
&lt;li&gt;Compatibility with newer Haml versions&lt;/li&gt;
&lt;li&gt;Fix some 1.9 warnings&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Relax Dependencies&lt;/h3&gt;

&lt;p&gt;The version dependencies for Brakeman have been relaxed somewhat, so it should work fine if included in a Rails 3 Gemfile. Unfortunately, this makes it a little harder to be sure it will work with all setups. Please report any problems!&lt;/p&gt;

&lt;h3&gt;Performance Improvements&lt;/h3&gt;

&lt;p&gt;The 1.0 release reduced the time taken for running the vulnerability checks, but (unrelatedly) the time for processing the source code increased.&lt;/p&gt;

&lt;p&gt;This release makes some improvements that should improve scan times. If it takes an intolerable amount of time for scans (more than 5-10 minutes), try using the &lt;code&gt;--faster&lt;/code&gt; option. This will possibly report fewer vulnerabilities, but should be much faster.&lt;/p&gt;

&lt;h3&gt;Progress Reporting&lt;/h3&gt;

&lt;p&gt;Brakeman will now provide better feedback about its progress while processing applications. For even more output, use the &lt;code&gt;--debug&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;Handle More Operators&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Using-Brakeman::AliasProcessor&quot;&gt;here&lt;/a&gt; for the kinds of simple processing Brakeman can do.&lt;/p&gt;

&lt;h3&gt;Rescue More Errors&lt;/h3&gt;

&lt;p&gt;Brakeman does its best to never completely abort execution and tries to always provide an analysis of whatever it can manage. This release rescues exceptions that may occur while processing configurations and Gemfiles.&lt;/p&gt;

&lt;h3&gt;Problems&lt;/h3&gt;

&lt;p&gt;If you run into any problems, don't hesitate to send a tweet to &lt;a href=&quot;http://twitter.com/brakemanscanner&quot;&gt;@Brakemanscanner&lt;/a&gt; or &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;file an issue&lt;/a&gt; on GitHub!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.0 Released!</title>
    <link href="http://brakemanscanner.org/blog/2011/12/08/brakeman-1-dot-0-released/"/>
    <updated>2011-12-08T01:35:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/12/08/brakeman-1-dot-0-released</id>
    <content type="html">&lt;p&gt;While the step up to 1.0 was essentially forced by major changes since 0.9.2, this is still an important release for Brakeman. Internally, Brakeman is no longer reliant on a global options variable, allowing it to be used as a library inside other applications. Also, all Brakeman modules, classes, and constants have been placed inside the Brakeman namespace.&lt;/p&gt;




&lt;p&gt;Support for Rails 3 is continuing to improve, although it is probably a good idea to run Brakeman with the &lt;code&gt;-m&lt;/code&gt; option to see what routes it is seeing. If you receive a message that says &amp;#8220;Error while processing routes - assuming all public controller methods are actions,&amp;#8221; please consider opening an issue and (if possible) providing your &lt;code&gt;routes.rb&lt;/code&gt; file as evidence.&lt;/p&gt;




&lt;p&gt;The performance of vulnerability checks that search for calls to specific methods (CheckExecute, CheckFileAccess, CheckSQL, etc.) has been drastically improved with the introduction of a call site index. If your scans were spending a lot of time running checks, you should see significant decrease in run time (although memory use may be slightly higher).&lt;/p&gt;




&lt;p&gt;If you are looking for an introduction to Brakeman, there are some &lt;a href=&quot;http://brakemanscanner.org/docs/presentations/&quot;&gt;presentations available&lt;/a&gt; to watch or read.&lt;/p&gt;




&lt;p&gt;As usual, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report&lt;/a&gt; any issues! You can also send a tweet to &lt;a href=&quot;http://twitter.com/brakeman&quot;&gt;@Brakeman&lt;/a&gt; if you have any questions.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Changes since 1.0rc1:&lt;/em&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Better handling of assignments inside ifs&lt;/li&gt;
&lt;li&gt;Check more expressions for SQL injection&lt;/li&gt;
&lt;li&gt;Use latest ruby_parser for better 1.9 syntax support&lt;/li&gt;
&lt;li&gt;Better behavior for Brakeman as a library&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;Assignments Inside &amp;#8216;if&amp;#8217; Branches&lt;/h3&gt;




&lt;p&gt;Brakeman is now a little smarter about handling assignments inside &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;For example:&lt;/p&gt;




&lt;pre&gt;&lt;code&gt;if some_condition
  x = params[:blah]
else
  x = &quot;no blah&quot;
end
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;Previously, &lt;code&gt;x&lt;/code&gt; would end up with the last value encountered, with no regard for execution branches. In this release, Brakeman will now combine the branches (unfortunately, Brakeman still operates along a &amp;#8216;no branching&amp;#8217; policy) and &lt;code&gt;x&lt;/code&gt; will be given the value of &lt;code&gt;params[:blah] or &quot;no blah&quot;&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;While not strictly semantically sound (and, trust me, Brakeman does many things that are not), it will still catch problems like&lt;/p&gt;




&lt;pre&gt;&lt;code&gt;User.all(conditions =&amp;gt; &quot;blah = '#{x}'&quot;)
&lt;/code&gt;&lt;/pre&gt;




&lt;p&gt;Thanks to &lt;a href=&quot;http://osdir.com/ml/RubyonRails:Core/2011-11/msg00098.html&quot;&gt;this message&lt;/a&gt; on Rails Core for mentioning this problem.&lt;/p&gt;




&lt;h3&gt;Use Latest ruby_parser&lt;/h3&gt;




&lt;p&gt;A few releases ago, Brakeman included a slightly modified version of &lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;ruby_parser&lt;/a&gt; to help with Ruby 1.9 syntax issues.&lt;/p&gt;




&lt;p&gt;The very latest ruby_parser source has much better 1.9 support, but there has been no official release yet. So Brakeman comes with the latest code. This is necessary because Rails 3 will generate 1.9 syntax if you happen to run it with Ruby 1.9 when generating code.&lt;/p&gt;




&lt;h3&gt;Brakeman as a Library&lt;/h3&gt;




&lt;p&gt;While it is now possible to use Brakeman as a library (essentially just &lt;code&gt;Brakeman.run&lt;/code&gt;), it is not very well polished. This release improves it slightly from the release candidate.&lt;/p&gt;




&lt;h3&gt;More SQL Injection&lt;/h3&gt;




&lt;p&gt;&lt;code&gt;CheckSQL&lt;/code&gt; will now search most expressions inside a SQL call for user input and string interpolation.&lt;/p&gt;




&lt;h3&gt;Changes Since 0.9.2&lt;/h3&gt;




&lt;p&gt;As a summary, here are the changes since 0.9.2:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Brakeman can now be used as a library&lt;/li&gt;
&lt;li&gt;Faster call search&lt;/li&gt;
&lt;li&gt;Add option to return error code if warnings are found (tw-ngreen)&lt;/li&gt;
&lt;li&gt;Allow truncated messages to be expanded in HTML&lt;/li&gt;
&lt;li&gt;Keep expanded context in view in HTML output&lt;/li&gt;
&lt;li&gt;Fix summary when using warning thresholds&lt;/li&gt;
&lt;li&gt;Better support for Rails 3 routes&lt;/li&gt;
&lt;li&gt;Reduce SQL injection duplicate warnings&lt;/li&gt;
&lt;li&gt;Lower confidence on mass assignment with no user input&lt;/li&gt;
&lt;li&gt;Ignore mass assignment using all literal arguments&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;See the &lt;a href=&quot;http://brakemanscanner.org/blog/2011/12/05/brakeman-1-dot-0-release-candidate-available/&quot;&gt;earlier post&lt;/a&gt; for more details.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.0 Release Candidate Available</title>
    <link href="http://brakemanscanner.org/blog/2011/12/05/brakeman-1-dot-0-release-candidate-available/"/>
    <updated>2011-12-05T14:04:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/12/05/brakeman-1-dot-0-release-candidate-available</id>
    <content type="html">&lt;p&gt;Because there have been some major changes since 0.9.2, I have released a release candidate just in case there are problems. Please try it out and report any issues!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install brakeman --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Changes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brakeman can now be used as a library&lt;/li&gt;
&lt;li&gt;Faster call search&lt;/li&gt;
&lt;li&gt;Add option to return error code if warnings are found (tw-ngreen)&lt;/li&gt;
&lt;li&gt;Allow truncated messages to be expanded in HTML&lt;/li&gt;
&lt;li&gt;Keep expanded context in HTML output&lt;/li&gt;
&lt;li&gt;Fix summary when using warning thresholds&lt;/li&gt;
&lt;li&gt;Better support for Rails 3 routes&lt;/li&gt;
&lt;li&gt;Reduce SQL injection duplicate warnings&lt;/li&gt;
&lt;li&gt;Lower confidence on mass assignment with no user input&lt;/li&gt;
&lt;li&gt;Ignore mass assignment using all literal arguments&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Brakeman as a Library&lt;/h3&gt;

&lt;p&gt;After some re-factoring, Brakeman can now be used as a library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require 'brakeman'

Brakeman.run :app_path =&amp;gt; 'my_app'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Faster Call Search&lt;/h3&gt;

&lt;p&gt;Searching for calls, like many of the checks do, is significantly faster now. Any scans that spend the majority of the time running checks should be much quicker.&lt;/p&gt;

&lt;h3&gt;Option to Return Error Code&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--exit-on-warn&lt;/code&gt; will cause Brakeman to exit with an error code if any warnings are found.&lt;/p&gt;

&lt;h3&gt;Fix Context in HTML Report&lt;/h3&gt;

&lt;p&gt;Truncated messages with no context are now able to be expanded when clicked.&lt;/p&gt;

&lt;p&gt;Expanded context should remain visible in the browser, instead of sometimes scrolling out of view.&lt;/p&gt;

&lt;h3&gt;Fix Report Summary&lt;/h3&gt;

&lt;p&gt;The summary in reports with warnings below the specified threshold will now only show the number of warnings in the actual report.&lt;/p&gt;

&lt;h3&gt;Reduce Duplicate SQL Warnings&lt;/h3&gt;

&lt;p&gt;There should be fewer duplicate SQL injection warnings now.&lt;/p&gt;

&lt;h2&gt;1.0 Release&lt;/h2&gt;

&lt;p&gt;Next up is fixing Rubinius support, making Brakeman more useful as a library, and improving Rails 3 route processing.&lt;/p&gt;

&lt;p&gt;If all is well, the 1.0 release will be ready in a couple days! Report bugs if you got 'em!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.9.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/11/21/brakeman-0-dot-9-2-released/"/>
    <updated>2011-11-21T17:12:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/11/21/brakeman-0-dot-9-2-released</id>
    <content type="html">&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix Rails 3 configuration parsing&lt;/li&gt;
&lt;li&gt;Check both t() and translate() for cross-site scripting bug&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Just a small release to get the Rails 3 config fix out.&lt;/p&gt;

&lt;h3&gt;Rails 3 Configuration Parsing&lt;/h3&gt;

&lt;p&gt;There was an issue that would cause Brakeman to crash on certain configurations. This has been fixed.&lt;/p&gt;

&lt;h3&gt;Look for t()&lt;/h3&gt;

&lt;p&gt;Both the &lt;code&gt;translate&lt;/code&gt; and its shorter alias &lt;code&gt;t&lt;/code&gt; will cause the warning about the cross-site scripting bug in them to be set to high confidence. If neither of these functions are found in the application, the confidence is set to medium.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.9.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/11/18/brakeman-0-dot-9-1-released/"/>
    <updated>2011-11-18T10:41:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/11/18/brakeman-0-dot-9-1-released</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/2b61d70fb73c7cc5&quot;&gt;A new vulnerability was disclosed&lt;/a&gt; yesterday in the Rails &lt;a href=&quot;http://api.rubyonrails.org/classes/ActionView/Helpers/TranslationHelper.html#method-i-translate&quot;&gt;translate helper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This vulnerability affects Rails 2.3.x when using the rails_xss plugin, Rails 3.0 - 3.0.10, and Rails 3.1 - 3.1.1.&lt;/p&gt;

&lt;p&gt;The only change in the 0.9.1 release is a check for this new vulnerability.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.9.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/11/16/brakeman-0-dot-9-0-released/"/>
    <updated>2011-11-16T16:23:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2011/11/16/brakeman-0-dot-9-0-released</id>
    <content type="html">&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process Rails 3 configuration files&lt;/li&gt;
&lt;li&gt;Check for config.active_record.whitelist_attributes = true&lt;/li&gt;
&lt;li&gt;Always produce a warning for without_protection =&gt; true&lt;/li&gt;
&lt;li&gt;Fix CSV output&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is just a small release on the way to 1.0.&lt;/p&gt;

&lt;h3&gt;Rails 3 Configs&lt;/h3&gt;

&lt;p&gt;Configurations in &lt;code&gt;config/application&lt;/code&gt; and &lt;code&gt;config/environments/production.rb&lt;/code&gt; will now be parsed.&lt;/p&gt;

&lt;h3&gt;Check for Disabled Mass Assignment&lt;/h3&gt;

&lt;p&gt;A new option was added in Rails 3.1 to globally disable mass assignment using &lt;code&gt;config.active_record.whitelist_attributes = true&lt;/code&gt;. Brakeman will now turn off mass assignment warnings if this configuration setting is detected.&lt;/p&gt;

&lt;h3&gt;Always Warn on without_protection&lt;/h3&gt;

&lt;p&gt;Rails 3.1 adds a way to bypass attribute protection when doing mass assignment.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.new(params, :without_protection =&amp;gt; true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brakeman will now &lt;em&gt;always&lt;/em&gt; warn when &lt;code&gt;without_protection&lt;/code&gt; is used, even if mass assignment is disabled or attributes are protected on that model.&lt;/p&gt;

&lt;h3&gt;Fix CSV Output&lt;/h3&gt;

&lt;p&gt;Brakeman reports using the CSV format should work once again.&lt;/p&gt;

&lt;p&gt;There is a bug in Ruport when using Ruby 1.9.2 and CSV output. A temporary patch has been added until this is resolved.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.8.4 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/11/04/brakeman-0-dot-8-4-released/"/>
    <updated>2011-11-04T14:58:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/11/04/brakeman-0-dot-8-4-released</id>
    <content type="html">&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option for separate attr_accessible warnings&lt;/li&gt;
&lt;li&gt;Option to set CSS file for HTML output&lt;/li&gt;
&lt;li&gt;Add file names for version-specific warnings&lt;/li&gt;
&lt;li&gt;Add line number for default routes in a controller&lt;/li&gt;
&lt;li&gt;Fix hash_insert()&lt;/li&gt;
&lt;li&gt;Remove use of Queue from threaded checks&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Separate attr_accessible Warnings&lt;/h3&gt;

&lt;p&gt;The current default is to roll all controllers lacking &lt;code&gt;attr_accessible&lt;/code&gt; into a single warning. This is convenient when manually looking at HTML or text output, but for Jenkins/Hudson it is better to have each be a separate warning. That way it is easier to track new and fixed warnings.&lt;/p&gt;

&lt;p&gt;To turn on this behavior, use &lt;code&gt;--separate-models&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Custom CSS for HTML Output&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;--css-file&lt;/code&gt; option to set a custom CSS file for styling HTML output. This file is copied directly into the report.&lt;/p&gt;

&lt;h3&gt;File Names for Version-Specific Warnings&lt;/h3&gt;

&lt;p&gt;Previously, there would be no file name associated with warnings about certain versions of Rails. This caused the warnings to not show up in the Jenkins/Hudson plugin. Now either &lt;code&gt;Gemfile&lt;/code&gt; or &lt;code&gt;config/environment.rb&lt;/code&gt; will be used as the file name for warnings based on the detected Rails version.&lt;/p&gt;

&lt;h3&gt;Line Number for Default Routes&lt;/h3&gt;

&lt;p&gt;When default routes were detected for specific controllers, there will now be a line number (from &lt;code&gt;routes.rb&lt;/code&gt;) associated with the warning.&lt;/p&gt;

&lt;h3&gt;hash_insert() Fixed&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hash_insert&lt;/code&gt; was broken and would cause some spurious warnings. For example, sometimes &lt;code&gt;only_path =&amp;gt; true&lt;/code&gt; would be set in &lt;code&gt;params&lt;/code&gt;, but Brakeman would mess up the &lt;code&gt;params&lt;/code&gt; hash and a redirect warning would still be created.&lt;/p&gt;

&lt;h3&gt;Threaded Checks No Longer Use Queue&lt;/h3&gt;

&lt;p&gt;When using threaded checks, the resulting warnings were stored in a thread-safe Queue. This has been removed, and the resulting value from each thread will be used instead. This should avoid some (small) locking overhead and is just simpler.&lt;/p&gt;

&lt;h3&gt;&quot;Like&quot; Brakeman on Ruby Toolbox&lt;/h3&gt;

&lt;p&gt;Please consider 'liking' Brakeman on the &lt;a href=&quot;https://www.ruby-toolbox.com/projects/brakeman&quot;&gt;Ruby Toolbox&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.8.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/10/25/brakeman-0-dot-8-3-released/"/>
    <updated>2011-10-25T10:00:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/10/25/brakeman-0-dot-8-3-released</id>
    <content type="html">&lt;p&gt;Changes for 0.8.3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Respect -w flag in .tabs format (&lt;a href=&quot;https://github.com/tw-ngreen&quot;&gt;tw-ngreen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Escape HTML output of error messages&lt;/li&gt;
&lt;li&gt;Add --skip-libs option&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changes since 0.8.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run checks in parallel threads by default&lt;/li&gt;
&lt;li&gt;Fix compatibility with ruby_parser 2.3.1&lt;/li&gt;
&lt;li&gt;Add option to assume all controller methods are actions&lt;/li&gt;
&lt;li&gt;Recover from errors when parsing routes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Fix for .tabs Format&lt;/h3&gt;

&lt;p&gt;Brakeman will now pay attention to the &lt;code&gt;-w&lt;/code&gt; flag (setting minimum confidence levels) when using the &lt;code&gt;.tabs&lt;/code&gt; format.&lt;/p&gt;

&lt;h3&gt;Escape Error Messages in HTML&lt;/h3&gt;

&lt;p&gt;Error message will now be escaped in the HTML output so they do not mess up the formatting.&lt;/p&gt;

&lt;h3&gt;--skip-libs Option&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--skip-libs&lt;/code&gt; option will cause Brakeman to not process the files in the &lt;code&gt;lib&lt;/code&gt; directory. At the moment, the results from this directory are only used in a couple places, so it is unlikely that skipping them will cause any problems.&lt;/p&gt;

&lt;h3&gt;Parallel Checks&lt;/h3&gt;

&lt;p&gt;Checks are now run in separate threads by default. Thus far, there does not seem to be a big difference between using threads and the sequential approach. To turn off threads, use the &lt;code&gt;-n&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;ruby_parser Compatibility&lt;/h3&gt;

&lt;p&gt;This is a stop-gap measure until &lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;ruby_parser&lt;/a&gt; supports Ruby 1.9, which is getting closer to reality.&lt;/p&gt;

&lt;h3&gt;Route Processing&lt;/h3&gt;

&lt;p&gt;Brakeman will no longer crash if there are problems parsing &lt;code&gt;routes.rb&lt;/code&gt;. Instead, it will assume all public methods on controllers are actions. The &lt;code&gt;-a&lt;/code&gt; option will also turn this behavior on.&lt;/p&gt;

&lt;p&gt;Rails 3.1 route parsing is still a work in progress, so this should at least allow analysis of 3.1 apps, even if it means slightly reduced accuracy.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman Plugin 'Officially' Available for Jenkins</title>
    <link href="http://brakemanscanner.org/blog/2011/10/21/brakeman-plugin-officially-available-for-jenkins/"/>
    <updated>2011-10-21T11:54:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/10/21/brakeman-plugin-officially-available-for-jenkins</id>
    <content type="html">&lt;p&gt;While a Brakeman plugin for the &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt;/&lt;a href=&quot;http://hudson-ci.org&quot;&gt;Hudson&lt;/a&gt; continuous integration tool has been available since January, thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman-jenkins-plugin/issues/1&quot;&gt;some prodding&lt;/a&gt; the plugin is now available through the official Jenkins plugin manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/brakeman_trend_graph.png&quot; title=&quot;Example Plugin Graph&quot; alt=&quot;Example Plugin Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Installation of the plugin is no longer an arduous manual process. Just go to &lt;code&gt;Manage Jenkins -&amp;gt; Manage Plugins -&amp;gt; Available&lt;/code&gt; and search for &quot;Brakeman&quot;. Check the box and then click the &quot;Install&quot; button down at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Some more information about the plugin can be found on the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;Jenkins wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;docs/jenkins/setup&quot;&gt;instructions&lt;/a&gt; for how to set up a job to use the Brakeman plugin.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.8.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/09/15/brakeman-0-dot-8-0-released/"/>
    <updated>2011-09-15T10:06:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/09/15/brakeman-0-dot-8-0-released</id>
    <content type="html">&lt;p&gt;Change list for Brakeman 0.8.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for mass assignment using without_protection&lt;/li&gt;
&lt;li&gt;Add check for password in http_basic_authenticate_with&lt;/li&gt;
&lt;li&gt;Warn on user input in hash argument with mass assignment&lt;/li&gt;
&lt;li&gt;auto_link is now considered safe for Rails &gt;= 3.0.6&lt;/li&gt;
&lt;li&gt;Output detected Rails version in report&lt;/li&gt;
&lt;li&gt;Keep track of methods called in class definition&lt;/li&gt;
&lt;li&gt;Add ruby_parser hack for Ruby 1.9 hash syntax&lt;/li&gt;
&lt;li&gt;Add a few Rails 3.1 tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As always, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report any issues&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;New Checks&lt;/h2&gt;

&lt;p&gt;This release adds two checks specific to Rails 3.1.&lt;/p&gt;

&lt;p&gt;The first looks for mass assignment which deliberately bypasses attribute protection. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.new(params[:user], :without_protection) =&amp;gt; true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If user input is used for initializing the record, the warning will be set to high confidence. Otherwise, it will show up as medium confidence.&lt;/p&gt;

&lt;p&gt;The second new check looks for controllers using the new &lt;code&gt;http_basic_authenticate_with&lt;/code&gt; method and including the password directly in the source.&lt;/p&gt;

&lt;p&gt;The example from the &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html&quot;&gt;Rails guide&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class PostsController &amp;lt; ApplicationController

  http_basic_authenticate_with :name =&amp;gt; &quot;dhh&quot;, :password =&amp;gt; &quot;secret&quot;, :except =&amp;gt; :index

  #...

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would raise a warning, mostly because it is a bad idea to have passwords in plain text right in your source code.&lt;/p&gt;

&lt;h2&gt;Changes to Existing Warnings&lt;/h2&gt;

&lt;p&gt;Mass assignment has been changed to raise a warning if there is any user input when calling &lt;code&gt;Model.new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auto_link&lt;/code&gt; was previously set to be a &quot;known dangerous&quot; method because it did not escape its output. That was fixed in Rails 3.0.6, so it will be considered safe for versions 3.0.6 and up. But then &lt;code&gt;auto_link&lt;/code&gt; was removed in Rails 3.1, so for 3.1 and up it will be treated as a regular method.&lt;/p&gt;

&lt;h2&gt;Changes to Output&lt;/h2&gt;

&lt;p&gt;Warnings reports will now include the detected Rails version as part of the information reported.&lt;/p&gt;

&lt;h2&gt;Support for Ruby 1.9 Hash Syntax&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;RubyParser&lt;/a&gt;, used by Brakeman for all its Ruby parsing needs, &lt;a href=&quot;http://blog.zenspider.com/2010/12/bounty-ruby-parser-needs-19-lo.html&quot;&gt;does not support the new Ruby 1.9 syntax&lt;/a&gt;. After coming across an application which uses the &lt;a href=&quot;http://blog.peepcode.com/tutorials/2011/rip-ruby-hash-rocket-syntax&quot;&gt;1.9 hash syntax&lt;/a&gt; &lt;em&gt;extremely&lt;/em&gt; liberally, a temporary hack has been added that should allow Brakeman to parse it correctly.&lt;/p&gt;

&lt;p&gt;This does mean that Brakeman is overriding RubyParser's code to add in this functionality. That is why it is a &lt;em&gt;temporary hack&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;New Tests&lt;/h2&gt;

&lt;p&gt;Work has begun on a test application using Rails 3.1. There do not seem to be any huge changes in 3.1 that would prevent Brakeman from working, though.&lt;/p&gt;

&lt;h2&gt;Next Version&lt;/h2&gt;

&lt;p&gt;The main area of focus for the next (major) release will be Rails 3.x routing. Brakeman is currently quite limited in what kinds of routes in understands.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>One Year Anniversary</title>
    <link href="http://brakemanscanner.org/blog/2011/08/27/one-year-anniversary-and-a-website/"/>
    <updated>2011-08-27T01:00:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/08/27/one-year-anniversary-and-a-website</id>
    <content type="html">&lt;p&gt;One year ago, Brakeman 0.0.1 was released as a gem. Then it was promptly yanked and replaced with &lt;a href=&quot;http://rubygems.org/gems/brakeman/versions/0.0.2&quot;&gt;Brakeman 0.0.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In celebration of this grand anniversary, there have been several new releases today.&lt;/p&gt;

&lt;p&gt;The first is &lt;a href=&quot;http://rubygems.org/gems/brakeman/versions/0.7.2&quot;&gt;Brakeman 0.7.2&lt;/a&gt;, a minor release adding CVE numbers for the &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/f878a33159ac9967&quot;&gt;latest vulnerabilities&lt;/a&gt; and fixing how nested params/cookie accesses are handled (e.g., &lt;code&gt;params[:user][:name]&lt;/code&gt; is now considered a direct use of a parameter).&lt;/p&gt;

&lt;p&gt;Next up, Brakeman has its own Twitter feed &lt;a href=&quot;https://twitter.com/brakemanscanner&quot;&gt;@BrakemanScanner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, there is this new website. Look forward to tutorials and more in-depth information about how to use Brakeman effectively.&lt;/p&gt;
</content>
  </entry>
  
</feed>
