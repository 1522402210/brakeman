<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Brakeman - Rails Security Scanner</title>
  <link href="http://brakemanscanner.org/atom.xml" rel="self"/>
  <link href="http://brakemanscanner.org/"/>
  <updated>2013-01-18T18:15:11-08:00</updated>
  <id>http://brakemanscanner.org/</id>
  <author>
    <name>Justin Collins</name>
    
  </author>

  
  <entry>
    <title>Brakeman 1.9.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2013/01/18/brakeman-1-dot-9-1-released/"/>
    <updated>2013-01-18T17:36:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2013/01/18/brakeman-1-dot-9-1-released</id>
    <content type="html">&lt;p&gt;This released was forced due to messed up dependencies with Brakeman 1.9.0 and Ruby2Ruby - my fault entirely! As such, this release does not match the roadmap for 1.9.1, which will be changed to 1.9.2.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.9.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2012-5664 - SQL Injection&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0155 - SQL Injection&lt;/li&gt;
&lt;li&gt;Add check for CVE-2013-0156 - Remote Code Execution&lt;/li&gt;
&lt;li&gt;Add check for unsafe &lt;code&gt;YAML.load&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update to RubyParser 3.1.1 (neersighted)&lt;/li&gt;
&lt;li&gt;Remove ActiveSupport dependency (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Do not warn on arrays passed to &lt;code&gt;link_to&lt;/code&gt; (Neil Matatall) (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/232&quot;&gt;#232&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Warn on secret tokens (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/200&quot;&gt;#200&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Warn on more mass assignment methods (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/223&quot;&gt;#223&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CVE-2012-5664 - SQL Injection&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/DCNTNp_qjFM/discussion&quot;&gt;CVE-2012-5664&lt;/a&gt; is a vulnerability Rails' dynamic finders. While dynamic finders (such as &lt;code&gt;User.find_by_name&lt;/code&gt;) appear to take a single argument, they also accept a hash options which can be used to modify the SQL query. Normally the hash of options would be the second argument, but it can also be the first. If an application passes in user code as the first argument, it will be interpreted as the options hash, leading to SQL injection.&lt;/p&gt;

&lt;p&gt;The provided fix is to only accept the hash if the dynamic finder is called with the proper number of arguments. A workaround is to always cast input to dynamic finders.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/228&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0155 - SQL Injection&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/c7jT-EeN9eI/discussion&quot;&gt;CVE-2013-0155&lt;/a&gt; is a SQL vulnerability where certain JSON input can cause &lt;code&gt;find&lt;/code&gt; methods to add &lt;code&gt;NULL&lt;/code&gt; as a valid value.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/239&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CVE-2013-0156 - Remote Code Execution&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/61bkgvnSGTQ/discussion&quot;&gt;CVE-2013-0156&lt;/a&gt; is the worst Rails vulnerability in recent memory. It allows attackers to easily execute arbitrary code on any Rails application.&lt;/p&gt;

&lt;p&gt;Besides upgrading Rails, there are workarounds for this issue: disable XML request parsing or disable YAML/symbol types inside XML requests.&lt;/p&gt;

&lt;p&gt;Exploits for this vulnerability are easily available and already in use in the wild. Please upgrade, patch, or use a workaround.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/239&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Check for &lt;code&gt;YAML.load&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In light of &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/61bkgvnSGTQ/discussion&quot;&gt;CVE-2013-0156&lt;/a&gt;, Brakeman will now warn on any uses of &lt;code&gt;YAML.load&lt;/code&gt; with user input. Do not load arbitrary YAML in applications!&lt;/p&gt;

&lt;h3&gt;Dependency Changes&lt;/h3&gt;

&lt;p&gt;Brakeman now uses the latest RubyParser and Ruby2Ruby versions.&lt;/p&gt;

&lt;p&gt;Thanks to Neil, Brakeman no longer depends on any version of ActiveSupport or i18n.&lt;/p&gt;

&lt;h3&gt;Namespaced URLs in &lt;code&gt;link_to&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Brakeman will no longer warn on array arguments to &lt;code&gt;link_to&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/233&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Secret Tokens&lt;/h3&gt;

&lt;p&gt;Secret tokens stored in source control are bad! Doubly bad if the source code is available publicly. Anyone with access to an application's secret token can generate any session cookies they would like. See &lt;a href=&quot;http://phenoelit.org/blog/archives/2012/12/21/let_me_github_that_for_you/index.html&quot;&gt;this post&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/227&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;More Mass Assignment&lt;/h3&gt;

&lt;p&gt;Bryan Helmkamp pointed out more Rails methods which perform mass assignment. The following methods have been added: &lt;code&gt;first_or_create&lt;/code&gt;, &lt;code&gt;first_or_create!&lt;/code&gt;, &lt;code&gt;first_or_initialize!&lt;/code&gt;, &lt;code&gt;assign_attributes&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/234&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.9.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/12/25/brakeman-1-dot-9-0-released/"/>
    <updated>2012-12-25T11:00:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/12/25/brakeman-1-dot-9-0-released</id>
    <content type="html">&lt;p&gt;Happy &lt;a href=&quot;https://en.wikipedia.org/wiki/Eggnog_Riot&quot;&gt;Eggnog Riot&lt;/a&gt; day!&lt;/p&gt;

&lt;p&gt;This is a major release: 95 changed files with 1,775 additions and 14,484 deletions. This provides ample room for new bugs, so please report any issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.3&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update to RubyParser 3&lt;/li&gt;
&lt;li&gt;Ignore route information by default&lt;/li&gt;
&lt;li&gt;Add optional &quot;interprocedural&quot; analysis for controllers&lt;/li&gt;
&lt;li&gt;Properly pass instance variables between before_filters&lt;/li&gt;
&lt;li&gt;Support &lt;code&gt;strong_parameters&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/88&quot;&gt;#88&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support newer &lt;code&gt;validates :format&lt;/code&gt; call (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/198&quot;&gt;#198&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add scan time to reports (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/158&quot;&gt;#158&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Brakeman version to reports&lt;/li&gt;
&lt;li&gt;Don't mangle whitespace in JSON code formatting&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;CheckExecute&lt;/code&gt; to warn on all string interpolation (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/213&quot;&gt;#213&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on &lt;code&gt;to_sql&lt;/code&gt; calls&lt;/li&gt;
&lt;li&gt;Add AppTree as facade for filesystem (&lt;a href=&quot;https://github.com/brynary&quot;&gt;Bryan Helmkamp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add link for translate vulnerability warning (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Add Rakefile to run tests (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Better default config file locations (&lt;a href=&quot;https://github.com/grosser&quot;&gt;Michael Grosser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove &quot;find by regex&quot; feature from &lt;code&gt;CallIndex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reduce Sexp creation&lt;/li&gt;
&lt;li&gt;Handle empty model files&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Update to RubyParser 3&lt;/h3&gt;

&lt;p&gt;With the update to use RubyParser 3.x, Brakeman no longer includes a vendored version of RubyParser (which was only used with running with Ruby 1.9), which reduced code size by about 14,000 lines.&lt;/p&gt;

&lt;p&gt;RubyParser 3 supports Ruby 1.9 much more fully, so there should be very few parse errors. Additionally, Brakeman no longer chooses parsers based on the current Ruby version.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/190&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Route Information Ignored by Default&lt;/h3&gt;

&lt;p&gt;Route information is only used in Brakeman to determine whether a controller method should perform an implicit render. Since determining Rails routes statically is quite difficult to get right, it is better to assume a method is a routable action. Previous versions provided the &lt;code&gt;-a&lt;/code&gt; option for this, which is now on by default. To turn off this behavior (and revert to the old), use &lt;code&gt;--no-assume-routes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This does not affect default route warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/219&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Optional Interprocedural Analysis for Controllers&lt;/h3&gt;

&lt;p&gt;Currently, Brakeman essentially looks at each method in isolation. Values are propagated from controller actions (including before_filters) through rendered views and templates. But if a controller action calls another method which has an effect on the eventual output of the action, Brakeman does not processed the invoked method.&lt;/p&gt;

&lt;p&gt;This release includes optional, experimental support for analyzing controller methods called from within controller actions.&lt;/p&gt;

&lt;p&gt;For a simple example, instance variables set in helper methods will now be added to a rendered view. Also, values returned from called methods will be tracked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def create
  get_user 
  #@user is now User.find(params[:id])

  @account = find_account(@user)  
  #@account is now Account.where(:user =&amp;gt; User.find(params[:id]).id
end

private

def get_user
  @user = User.find(params[:id])
end

def find_account
  Account.where(:user =&amp;gt; @user.id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is limited to methods available in the controller (via a parent class or mixins). It is also limited to a &quot;depth of one&quot;, meaning it will not try to analyze methods called by helper methods (&lt;code&gt;get_user&lt;/code&gt; and &lt;code&gt;find_account&lt;/code&gt; above).&lt;/p&gt;

&lt;p&gt;Since this feature is still experimental and will definitely increase scan times, it is turned off by default. Use &lt;code&gt;--interprocedural&lt;/code&gt; to enable it. (Better name pending suggestions...)&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/218&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Pass Instance Variables between Filters&lt;/h3&gt;

&lt;p&gt;While instance variables set in &lt;code&gt;before_filters&lt;/code&gt; were set properly, &lt;code&gt;before_filter&lt;/code&gt; which used instance variables from an earlier filter could not see those variables. This has been fixed, which will likely lead to new or more accurate warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/224&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support for &lt;code&gt;strong_parameters&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Rails 4, the responsibility for mass assignment protection will move from models to controllers where mass assignment is actually used. A preview of the new functionality is available in the &lt;a href=&quot;https://github.com/rails/strong_parameters&quot;&gt;strong_parameters&lt;/a&gt; gem. Brakeman should no longer warn on mass assignment for models protected with &lt;code&gt;strong_parameters&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/204&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Support &lt;code&gt;validates :format&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In Rails 3, format validation changed from &lt;code&gt;validates_format_of&lt;/code&gt; to the more generic &lt;code&gt;validates&lt;/code&gt; method. Brakeman will now check &lt;code&gt;validates&lt;/code&gt; calls for proper anchors on regular expressions for &lt;code&gt;:format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/205&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Changes&lt;/h3&gt;

&lt;p&gt;Reports will now contain Brakeman version and scan duration. JSON reports contain &lt;code&gt;start_time&lt;/code&gt; and &lt;code&gt;end_time&lt;/code&gt; timestamps. For now, JSON reports will still have a &lt;code&gt;timestamp&lt;/code&gt; key, but it will be identical to &lt;code&gt;end_time&lt;/code&gt;. It will be removed in Brakeman 2.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/193&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Additionally, code formatting in JSON reports has changed slightly. Previously, code was formatted with the HTML output in mind, so line breaks were removed. Now JSON reports include the code formatted from Ruby2Ruby without any mangling.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/191&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix Command Injection Check&lt;/h3&gt;

&lt;p&gt;The command injection check will now (again) warn on any form on string interpolation used for process execution, whether or not user input is involved.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/216&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix &lt;code&gt;to_sql&lt;/code&gt; False Positives&lt;/h3&gt;

&lt;p&gt;SQL code generated from Arel's &lt;code&gt;to_sql&lt;/code&gt; method will be considered safe.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/194&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;File System Facade&lt;/h3&gt;

&lt;p&gt;Bryan Helmkamp cleaned up Brakeman's file access into a single object. This should simplify future changes and add some consistency to how Brakeman handles files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/197&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Run Tests via Rake&lt;/h3&gt;

&lt;p&gt;Thanks to Michael Grosser, running &lt;code&gt;rake&lt;/code&gt; will now run Brakeman's tests.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/183&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Improved Config File Locations&lt;/h3&gt;

&lt;p&gt;Also thanks to Michael Grosser, Brakeman will check more sane locations for Brakeman configuration files. This version adds &lt;code&gt;./config/brakeman.yml&lt;/code&gt;, &lt;code&gt;~/.brakeman/config.yml&lt;/code&gt;, and &lt;code&gt;/etc/brakeman/config.yml&lt;/code&gt; as default locations for configuration files. The old locations are deprecated now, and will be removed in Brakeman 2.0.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/182&quot;&gt;changes&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;More Internal Changes&lt;/h3&gt;

&lt;p&gt;Call indexing performance has been given another &lt;a href=&quot;http://blog.presidentbeef.com/&quot;&gt;slight boost&lt;/a&gt; with the removal of the ability to search for call targets via regular expressions (which was not being used anywhere).&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/189&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The number of s-expressions generated by Brakeman has been reduced, although this did not lead to any major performance improvement.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/207&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Data-flow/alias processing was performing two passes. This has been reduced to just one.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/224&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Empty model files will no longer cause errors.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/11/13/brakeman-1-dot-8-3-released/"/>
    <updated>2012-11-13T09:20:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/11/13/brakeman-1-dot-8-3-released</id>
    <content type="html">&lt;p&gt;This is primarily a false positive reduction release. One major change is the change in dependency from the &lt;code&gt;json_pure&lt;/code&gt; gem to &lt;code&gt;multi_json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.2&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;multi_json&lt;/code&gt; gem for better harmony (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/164&quot;&gt;#164&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Performance improvement for call indexing&lt;/li&gt;
&lt;li&gt;Fix issue with processing HAML files (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/168&quot;&gt;#168&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle pre-release versions when processing &lt;code&gt;Gemfile.lock&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/174&quot;&gt;#174&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Only check first argument of &lt;code&gt;redirect_to&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/98&quot;&gt;#98&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positives from &lt;code&gt;Model.arel_table&lt;/code&gt; accesses&lt;/li&gt;
&lt;li&gt;Fix false positives on redirects to models decorated with Draper gem (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/172&quot;&gt;#172&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on redirect to model association (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/111&quot;&gt;#111&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive on &lt;code&gt;YAML.load&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/142&quot;&gt;#142&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive XSS on any &lt;code&gt;to_i&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;Fix error on Rails 2 named routes with no args&lt;/li&gt;
&lt;li&gt;Fix error in rescan of mixins with symbols in method name&lt;/li&gt;
&lt;li&gt;Do not rescan non-Ruby files in config/&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Change to MultiJSON&lt;/h3&gt;

&lt;p&gt;Brakeman now depends on the &lt;a href=&quot;http://rdoc.info/github/intridea/multi_json&quot;&gt;multijson&lt;/a&gt; gem instead of &lt;code&gt;json_pure&lt;/code&gt;. This should make it easier for people who include Brakeman as a dependency.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/166&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Faster Call Indexing&lt;/h3&gt;

&lt;p&gt;Dumb code in the &lt;code&gt;CallIndex&lt;/code&gt; was causing call indexing to be slow on some large applications. This should now be faster and require less memory!&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/180&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Fix HAML Processing&lt;/h3&gt;

&lt;p&gt;Some HAML files were causing Brakeman's alias processing to slow to a crawl. This was due to the template code (sometimes) directly appending to the output variable via &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;. Since Brakeman attempts to treat targets of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; as arrays, Brakeman was generating large data structures each time &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; was encountered.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/170&quot;&gt;changes&lt;/a&gt;]&lt;/p&gt;

&lt;h3&gt;Handle Pre-release Versions&lt;/h3&gt;

&lt;p&gt;When a &lt;code&gt;Gemfile.lock&lt;/code&gt; file is present in a Rails application, Brakeman uses it to determine the version of Rails in use. Previous versions did not accept pre-release version numbers (like &lt;code&gt;3.1.2.rc1&lt;/code&gt;), leading to version inappropriate warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/176&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Redirect False Positives&lt;/h3&gt;

&lt;p&gt;Several false positives related to redirects have been fixed, and the scope of the redirect check is somewhat reduced.&lt;/p&gt;

&lt;p&gt;Calls beginning with &lt;code&gt;Model.arel_table&lt;/code&gt; should no longer be treated as user input (in any context).&lt;/p&gt;

&lt;p&gt;Model instances returned by the &lt;code&gt;decorate&lt;/code&gt; method in the &lt;a href=&quot;https://github.com/drapergem/draper&quot;&gt;Draper&lt;/a&gt; gem are considered safe.&lt;/p&gt;

&lt;p&gt;Redirects to model associations (e.g, &lt;code&gt;belongs_to :account&lt;/code&gt;) are considered safe.&lt;/p&gt;

&lt;p&gt;Redirects to method calls with safe values should no longer warn. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redirect_to blah(User.first) #No warning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, only the first argument of &lt;code&gt;redirect_to&lt;/code&gt; will be checked for user input.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/177&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;YAML False Positive&lt;/h3&gt;

&lt;p&gt;File access warnings for YAML calls have been reduced to only those calls which actually access files.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/178&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Integer Output False Positives&lt;/h3&gt;

&lt;p&gt;Calls to &lt;code&gt;to_i&lt;/code&gt; should not trigger XSS warnings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/179&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Errors on Named Routes&lt;/h3&gt;

&lt;p&gt;Rails 2 named routes with no arguments were causing errors, which have now been fixed.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/181&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Future Work&lt;/h3&gt;

&lt;p&gt;Now that RubyParser 3.x is officially released, work is underway to use the new version. This will increase Ruby 1.9 syntax compatibility and remove the need to parse applications with the same Ruby version as the application uses. Additionally, it will allow us to get rid of the vendored version of RubyParser that Brakeman uses for Ruby 1.9. Unfortunately, RubyParser 3.x introduces a lot of incompatibilities and upgrading requires a significant amount of effort.&lt;/p&gt;

&lt;p&gt;Another exciting feature in development is limited interprocedural analysis. Brakeman will be able to handle simple things like calls to helper methods in controllers which set instance variables or return user input. This should help with the &quot;obvious&quot; vulnerabilities that Brakeman often misses.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/10/17/brakeman-1-dot-8-2-released/"/>
    <updated>2012-10-17T10:44:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/10/17/brakeman-1-dot-8-2-released</id>
    <content type="html">&lt;p&gt;This is a bugfix release, in particular fixing rescanning (used by &lt;a href=&quot;https://github.com/guard/guard-brakeman&quot;&gt;guard-brakeman&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fixed rescanning problems caused by 1.8.0 changes&lt;/li&gt;
&lt;li&gt;Fix scope calls with single argument&lt;/li&gt;
&lt;li&gt;Report specific model name in rendered collections&lt;/li&gt;
&lt;li&gt;Handle overwritten JSON escape settings (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add CHANGES to gemspec&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Rescan Fixes&lt;/h3&gt;

&lt;p&gt;Brakeman supports rescanning a subset of files in an application, with the caveat that the previous scan must still be in memory. This functionality was broken in the the 1.8.0 release, due to the lack of tests.&lt;/p&gt;

&lt;p&gt;This release updates rescanning to be more robust and work with the 1.8.0 changes to how &quot;render paths&quot; are stored. Also, a number of tests were added to help prevent breakage in the future.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/165&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Scope Calls with One Argument&lt;/h3&gt;

&lt;p&gt;Calls to &lt;code&gt;scope&lt;/code&gt; with a single argument were causing errors in Brakeman's SQL injection check.&lt;/p&gt;

&lt;p&gt;The fixed error looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;undefined method `node_type' for nil:NilClass  /something/brakeman/lib/brakeman/checks/check_sql.rb:75:in `block (2 levels) in find_scope_calls'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/157&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Model Names for Rendered Collections&lt;/h3&gt;

&lt;p&gt;In cases like below, where a collection of models is being rendered and the model name could be known, any resulting warnings will now reference the actual model name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= render 'user', :collection =&amp;gt; User.all %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Previously, Brakeman would report warnings with &lt;code&gt;UnknownModel&lt;/code&gt;, whether or not the model name was actually known.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/155&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Overwritten JSON Escape Config&lt;/h3&gt;

&lt;p&gt;It is possible that a config setting in one initializer overrides a setting in a different initializer. This is now handled for the JSON escape settings.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/154&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;CHANGES File in Gem&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/presidentbeef/brakeman/blob/master/CHANGES&quot;&gt;CHANGES&lt;/a&gt; file is now included in the gem file as requested.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/153&quot;&gt;changes&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release! Take a look at &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/How-to-Report-a-Brakeman-Issue&quot;&gt;this guide&lt;/a&gt; to reporting Brakeman problems.&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;h3&gt;Brakeman Roadmap&lt;/h3&gt;

&lt;p&gt;A rough guide to Brakeman 1.9 and 2.0 has been &lt;a href=&quot;https://github.com/presidentbeef/brakeman/wiki/Roadmap&quot;&gt;posted here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/09/24/brakeman-1-dot-8-1-released/"/>
    <updated>2012-09-24T12:09:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/09/24/brakeman-1-dot-8-1-released</id>
    <content type="html">&lt;p&gt;Bug fixes!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.8.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recover from errors in output formatting (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/148&quot;&gt;#148&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix false positive in &lt;code&gt;redirect_to&lt;/code&gt; (Neil Matatall) (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/143&quot;&gt;#143&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix problems with removal of &lt;code&gt;Sexp#method_missing&lt;/code&gt; (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/150&quot;&gt;#150&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix array indexing in alias processing (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/145&quot;&gt;#145&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix old &lt;code&gt;mail_to&lt;/code&gt; vulnerability check (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/147&quot;&gt;#147&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix rescans when only controller action changes (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/141&quot;&gt;#141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Allow comparison of versions with unequal lengths (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/144&quot;&gt;#144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Handle super calls with blocks (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/146&quot;&gt;#146&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remove malformed Sexps from HAML processing  (&lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/149&quot;&gt;#149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Respect &lt;code&gt;-q&lt;/code&gt; flag for &quot;Rails 3 detected&quot; message&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Fix Crashes when Generating Report&lt;/h3&gt;

&lt;p&gt;Some scans were causing Brakeman to crash while generating reports with an error like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lib/brakeman/warning.rb:78:in `format_code': undefined method `gsub' for nil:NilClass (NoMethodError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was due to a combination of the removal of &lt;code&gt;method_missing&lt;/code&gt; behavior from &lt;code&gt;Sexp&lt;/code&gt; and the &lt;code&gt;OutputProcessor&lt;/code&gt; not handling errors well.&lt;/p&gt;

&lt;p&gt;The problem should be fixed now, but please report an issue if &quot;[Format Error]&quot; shows up in reports.&lt;/p&gt;

&lt;h3&gt;False Positive in Redirect Check&lt;/h3&gt;

&lt;p&gt;Neil Matatall fixed &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/143&quot;&gt;an issue&lt;/a&gt; with a false positive when redirecting to an array.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;redirect_to&lt;/code&gt; is given an array, Rails eventually falls through to &lt;code&gt;polymorphic_path&lt;/code&gt;, which will only return a path, not a full URL. Brakeman only checks for redirects that can redirect to a different host, so this is considered safe.&lt;/p&gt;

&lt;h3&gt;Sexp and &lt;code&gt;method_missing&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The original &lt;code&gt;Sexp&lt;/code&gt; code from RubyParser uses &lt;code&gt;method_missing&lt;/code&gt; to find and optionally delete nodes. This functionality is not used very often (never in Brakeman) but has covered up bugs that would otherwise been found. Therefore, &lt;code&gt;Sexp#method_missing&lt;/code&gt; has been removed in Brakeman. However, it turns out that &lt;a href=&quot;https://github.com/seattlerb/ruby2ruby&quot;&gt;Ruby2Ruby&lt;/a&gt; uses it in a couple places. Brakeman uses Ruby2Ruby to covert s-expressions back to readable Ruby code, particularly when generating reports. This lead to some crashes.&lt;/p&gt;

&lt;h3&gt;Fix Array Indexing&lt;/h3&gt;

&lt;p&gt;Brakeman can handle pulling values out of simple arrays. Or it should be able to, but it keeps breaking. Should be fixed now!&lt;/p&gt;

&lt;h3&gt;Fix &lt;code&gt;mail_to&lt;/code&gt; Check&lt;/h3&gt;

&lt;p&gt;There is a Brakeman check for an &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/8CpI7egxX4E/discussion&quot;&gt;old vulnerability&lt;/a&gt; in &lt;code&gt;mail_to&lt;/code&gt;. However, it turns out this check has been broken for a while. But now it is fixed! And there are regression tests.&lt;/p&gt;

&lt;h3&gt;Fix Rescans on Controller Changes&lt;/h3&gt;

&lt;p&gt;There were some crashes when rescanning was triggered by a controller change.&lt;/p&gt;

&lt;h3&gt;HAML Processing&lt;/h3&gt;

&lt;p&gt;Some very old code for HAML processing was generating malformed s-expressions, which then had to be handled specially in the output formatter. It turns out these nodes were not even used, so they were removed. Please report any problems arising from this! We do not have a lot of HAML test cases.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.8.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/09/04/brakeman-1-dot-8-0-released/"/>
    <updated>2012-09-04T11:26:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/09/04/brakeman-1-dot-8-0-released</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Changes since 1.7.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support relative paths in reports (fsword)&lt;/li&gt;
&lt;li&gt;Allow Brakeman to be run without tty (fsword)&lt;/li&gt;
&lt;li&gt;Fix exit code with &lt;code&gt;--compare&lt;/code&gt; (fsword)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;--rake&lt;/code&gt; option (Deepak Kumar)&lt;/li&gt;
&lt;li&gt;Add high confidence warnings for &lt;code&gt;to_json&lt;/code&gt; XSS (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;redirect_to&lt;/code&gt; false negative&lt;/li&gt;
&lt;li&gt;Fix duplicate warnings with &lt;code&gt;raw&lt;/code&gt; calls&lt;/li&gt;
&lt;li&gt;Fix shadowing of rendered partials&lt;/li&gt;
&lt;li&gt;Add &quot;render chain&quot; to HTML reports&lt;/li&gt;
&lt;li&gt;Add check for XSS in &lt;code&gt;content_tag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add full backtrace for errors in debug mode&lt;/li&gt;
&lt;li&gt;Treat model attributes in &lt;code&gt;or&lt;/code&gt; expressions as immediate values&lt;/li&gt;
&lt;li&gt;Switch to method access for Sexp nodes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Relative Paths in Reports&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--relative-paths&lt;/code&gt; option will now cause Brakeman to output relative paths for warnings in reports in either JSON or tabs format. This is useful when comparing reports run on different machines or just in different directories.&lt;/p&gt;

&lt;h3&gt;Brakeman without TTY&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://fsword.github.com/&quot;&gt;fsword&lt;/a&gt;, Brakeman can now run without a TTY available.&lt;/p&gt;

&lt;h3&gt;Exit Code for Compare&lt;/h3&gt;

&lt;p&gt;Also thanks to fsword, Brakeman will return a proper exit code when run with &lt;code&gt;-z --compare&lt;/code&gt;. If any changes are found, the exit code will be nonzero.&lt;/p&gt;

&lt;h3&gt;Rake Task Generation Fixed&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--rake&lt;/code&gt; option was broken, but &lt;a href=&quot;https://github.com/deepakinseattle&quot;&gt;Deepak Kumar&lt;/a&gt; noticed and fixed it!&lt;/p&gt;

&lt;h3&gt;High Confidence Warnings for JSON&lt;/h3&gt;

&lt;p&gt;Older versions of Rails default to not escaping &lt;code&gt;to_json&lt;/code&gt; calls, leading to &lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/cross_site_scripting_to_json/&quot;&gt;cross site scripting problems&lt;/a&gt;. Since Rails 2.1.0, Rails has provided an option to escape JSON output by default. Brakeman will check this option, and warn on unescaped &lt;code&gt;to_json&lt;/code&gt; calls.&lt;/p&gt;

&lt;h3&gt;Fix Redirect False Negative&lt;/h3&gt;

&lt;p&gt;Brakeman was incorrectly checking for &lt;code&gt;:only_path =&amp;gt; true&lt;/code&gt; in &lt;em&gt;any&lt;/em&gt; argument to &lt;code&gt;redirect_to&lt;/code&gt;. However, it is only valid as part of the first argument.&lt;/p&gt;

&lt;h3&gt;Fix Duplicate Warnings on Raw Calls&lt;/h3&gt;

&lt;p&gt;A logic mistake sometimes caused a high and weak confidence warning to be reported for the same code using &lt;code&gt;raw&lt;/code&gt;. This has been fixed.&lt;/p&gt;

&lt;h3&gt;Fix Shadowing of Rendered Partials&lt;/h3&gt;

&lt;p&gt;Due to the way Brakeman was storing rendered partials, a view that was rendered multiple times via different code paths would only store a single instance of the rendered view. This could result in some vulnerabilities not being reported.&lt;/p&gt;

&lt;p&gt;To fix this, Brakeman now stores the entire &quot;render chain&quot; (that is, each location of a &lt;code&gt;render&lt;/code&gt;). This ensures a unique key for each rendered template.&lt;/p&gt;

&lt;h3&gt;Report Render Chain in HTML&lt;/h3&gt;

&lt;p&gt;HTML reports now have a new feature that reports the &quot;render chain&quot; for view warnings (if the chain is more than a single call deep).&lt;/p&gt;

&lt;p&gt;A warning like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/unexpanded_call_chain.png&quot; alt=&quot;Unexpanded&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Might expand to show this chain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/expanded_call_chain.png&quot; alt=&quot;Expanded&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Check for XSS in &lt;code&gt;content_tag&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;content_tag&lt;/code&gt; is a view helper for generating HTML tags containing some content. In Rails 2.x, &lt;code&gt;content_tag&lt;/code&gt; did not escape this content. In Rails 3.x, this changed so that now it is escaped. While &lt;code&gt;content_tag&lt;/code&gt; does have an &lt;code&gt;escape&lt;/code&gt; parameter (true by default), this only applies to the tag attribute &lt;em&gt;values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Brakeman now warns on possible cross site scripting via &lt;code&gt;content_tag&lt;/code&gt; calls. &lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/content_tag&quot;&gt;See here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3&gt;Backtraces in Debug Mode&lt;/h3&gt;

&lt;p&gt;By default, Brakeman tries its best to recover from errors and produce a report. However, this can sometimes make it difficult to track down the sources of errors. Now, with the &lt;code&gt;-d&lt;/code&gt; option, Brakeman will report backtraces for errors encountered while running, as well as including backtraces in HTML reports.&lt;/p&gt;

&lt;h3&gt;Convenience Methods for Sexp Access&lt;/h3&gt;

&lt;p&gt;Previously, all code dealing with &lt;a href=&quot;https://en.wikipedia.org/wiki/S-exp&quot;&gt;s-expressions&lt;/a&gt; in the &lt;code&gt;Sexp&lt;/code&gt; class accessed nodes via array access, e.g. &lt;code&gt;exp[1]&lt;/code&gt; or &lt;code&gt;exp[2]&lt;/code&gt;. This led to hard-to-read code like &lt;code&gt;exp[2][3][1][1..-1]&lt;/code&gt;. This release includes convenience methods to replace those types of calls. Available methods are &lt;a href=&quot;http://rdoc.info/gems/brakeman/Sexp&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully this leads to code that is both easier to read and easier to write.&lt;/p&gt;

&lt;h3&gt;Reporting Problems&lt;/h3&gt;

&lt;p&gt;This release touches a lot of code (76 changed files with 1,515 additions and 598 deletions), so there is ample opportunity for bugs to sneak in. Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; and following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.7.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/08/13/brakeman-1-dot-7-1-released/"/>
    <updated>2012-08-13T11:04:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/08/13/brakeman-1-dot-7-1-released</id>
    <content type="html">&lt;p&gt;This is a small release to add checks for the &lt;a href=&quot;http://weblog.rubyonrails.org/2012/8/9/ann-rails-3-2-8-has-been-released/&quot;&gt;Rails vulnerabilities reported last week&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.7.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/fV3QUToSMSw/discussion&quot;&gt;CVE-2012-3463&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/kKGNeMrnmiY/discussion&quot;&gt;CVE-2012-3464&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add check for &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/FgVEtBajcTY/discussion&quot;&gt;CVE-2012-3465&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add charset to HTML report (&lt;a href=&quot;https://github.com/hooopo&quot;&gt;hooopo&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Report XSS in select() for Rails 2&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CVE-2012-3463 - XSS in select_tag Prompt&lt;/h3&gt;

&lt;p&gt;In Rails 3.x, values supplied to the &lt;code&gt;:prompt&lt;/code&gt; option in the &lt;code&gt;select_tag&lt;/code&gt; helper are not escaped, leading to a cross-site scripting vulnerability.&lt;/p&gt;

&lt;p&gt;Brakeman will warn on all uses of &lt;code&gt;select_tag&lt;/code&gt; with unescaped user input in the &lt;code&gt;:prompt&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;CVE-2012-3464 - Single Quotes are Unescaped&lt;/h3&gt;

&lt;p&gt;This is pretty much a known issue (&lt;a href=&quot;http://www.ruby-forum.com/topic/166894&quot;&gt;example from 2008&lt;/a&gt;), but Rails 3.2.8 fixes it.&lt;/p&gt;

&lt;p&gt;Single quotes are most dangerous when interpolating values into HTML attributes that use single quotes, which is why it is often recommended to always use double quotes in HTML.&lt;/p&gt;

&lt;p&gt;There is a &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/kKGNeMrnmiY/discussion&quot;&gt;provided workaround&lt;/a&gt; for earlier versions of Rails which replaces &lt;code&gt;ERB::Util.html_escape&lt;/code&gt; with &lt;code&gt;Rack::Utils.escape_html&lt;/code&gt;. This method adds escaping for both single quotes (&lt;code&gt;'&lt;/code&gt;) and forward slashes (&lt;code&gt;/&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If the provided workaround is used in an initializer, as suggested, then Brakeman will not generate a warning for this vulnerability. Otherwise, Brakeman will generate a warning for affected versions.&lt;/p&gt;

&lt;h3&gt;CVE-2012-3465 - XSS in strip_tags&lt;/h3&gt;

&lt;p&gt;Another vulnerability has been reported for &lt;code&gt;strip_tags&lt;/code&gt; (earlier report was &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/K5EwdJt06hI/discussion&quot;&gt;CVE-2011-2931&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Brakeman will warn on affected versions if uses of &lt;code&gt;strip_tags&lt;/code&gt; are detected.&lt;/p&gt;

&lt;h3&gt;XSS in select Helper&lt;/h3&gt;

&lt;p&gt;This vulnerability was &lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/CdoMUVpsRmQ/discussion&quot;&gt;reported a while ago&lt;/a&gt;, but it was unclear if it applied to Rails 2.x or just Rails 3. Thanks to Neil Matatall, it has been confirmed to be an issue in Rails 2.x as well.&lt;/p&gt;

&lt;p&gt;Therefore, Brakeman will be reporting the vulnerability (&lt;code&gt;select&lt;/code&gt; does not escape options list if supplied as a straight string) for Rails 2.x as well.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.7.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/07/31/brakeman-1-dot-7-0-released/"/>
    <updated>2012-07-31T17:44:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/07/31/brakeman-1-dot-7-0-released</id>
    <content type="html">&lt;p&gt;This release includes improvements to Rails 3 route processing, better performance, several bug fixes, and more!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.2&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for CVE-2012-3424&lt;/li&gt;
&lt;li&gt;Link report types to descriptions on website&lt;/li&gt;
&lt;li&gt;Report errors raised while running check&lt;/li&gt;
&lt;li&gt;Improve processing of Rails 3 routes&lt;/li&gt;
&lt;li&gt;Improve file access check&lt;/li&gt;
&lt;li&gt;Avoid warning on non-ActiveModel models&lt;/li&gt;
&lt;li&gt;Fix how &lt;code&gt;params[:x] ||=&lt;/code&gt; is handled&lt;/li&gt;
&lt;li&gt;Treat user input in &lt;code&gt;or&lt;/code&gt; expressions as immediate values&lt;/li&gt;
&lt;li&gt;Fix processing of negative array indexes&lt;/li&gt;
&lt;li&gt;Fix &quot;empty char-class&quot; error&lt;/li&gt;
&lt;li&gt;Speed improvements by stripping down SexpProcessor&lt;/li&gt;
&lt;li&gt;Add line breaks to truncated table rows&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Check for HTTP Auth Digest DoS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/rubyonrails-security/vxJjrc15qYM/discussion&quot;&gt;CVE-2012-3424&lt;/a&gt;, a potential denial of service vulnerability in how Rails handles HTTP authentication digest parameters, was recently announced. It affects Rails 3.x, and is fixed in 3.0.16, 3.1.7, and 3.2.7.&lt;/p&gt;

&lt;p&gt;Brakeman will generate a warning for the Rails versions affected, but will only report a high confidence warning if &lt;code&gt;authenticate_or_request_with_http_digest&lt;/code&gt; or &lt;code&gt;authenticate_with_http_digest&lt;/code&gt; methods are called.&lt;/p&gt;

&lt;h3&gt;Links to Warning Information&lt;/h3&gt;

&lt;p&gt;HTML reports now link warning types to descriptions on the Brakeman website. JSON reports will also include the link information. Due to this change, it is not possible to compare JSON reports from previous versions using the &lt;code&gt;--compare&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Suggestions and &lt;a href=&quot;https://github.com/presidentbeef/brakeman-site&quot;&gt;pull requests&lt;/a&gt; for improving the documention are welcome!&lt;/p&gt;

&lt;h3&gt;Report Check Errors&lt;/h3&gt;

&lt;p&gt;Previously, errors encounted while running checks were not included in reports. This has been fixed.&lt;/p&gt;

&lt;h3&gt;Better Rails 3 Route Processing&lt;/h3&gt;

&lt;p&gt;Even the simple information Brakeman uses (which methods are routes) is difficult to extract from Rails 3 routes due to all the different options it offers. This release should decrease the number of &quot;Error while processing routes&quot; messages that come up.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/116&quot;&gt;this pull request&lt;/a&gt; for more information about specific fixes.&lt;/p&gt;

&lt;h3&gt;Improved File Access Check&lt;/h3&gt;

&lt;p&gt;The check for user input in file access calls has been improved so the confidence of the warnings will vary according to how the user input is used, like most other checks.&lt;/p&gt;

&lt;p&gt;Additionally, the check will now respect the &lt;code&gt;--report-direct&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;No SQLi Warnings for Non-ActiveModel&lt;/h3&gt;

&lt;p&gt;Models which do not inherit from &lt;code&gt;ActiveRecord::Base&lt;/code&gt; will no longer be reported in SQL injection warnings.&lt;/p&gt;

&lt;h3&gt;Default Assignment to &lt;code&gt;params&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Normally, when Brakeman processes an assignment like &lt;code&gt;x ||= y&lt;/code&gt;, it will assign &lt;code&gt;y&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; if no previous value is found for &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, in this case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;params[:x] ||= y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The information that the left hand side is a &lt;code&gt;params&lt;/code&gt; hash is lost.&lt;/p&gt;

&lt;p&gt;This has been changed so default assignment to a &lt;code&gt;params&lt;/code&gt; hash will not replace the entire value, but will handle it as &lt;code&gt;params[:x] || y&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;User Input in &lt;code&gt;or&lt;/code&gt; Expressions&lt;/h3&gt;

&lt;p&gt;Previously, unescaped output like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= params[:x] || z %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;would have been reported as a weak confidence warning. This has been changed so that any user input in an &lt;code&gt;or&lt;/code&gt; expression will be considered immediate (versus &quot;indirect&quot;) output and will likely result in high confidence warnings.&lt;/p&gt;

&lt;h3&gt;Speed Improvements&lt;/h3&gt;

&lt;p&gt;Scan times should decrease by 15-25% with this release. This is mostly due to stripping unused bits out of SexpProcessor.&lt;/p&gt;

&lt;h3&gt;Bug Fixes&lt;/h3&gt;

&lt;p&gt;Besides errors raised when processing Rails 3 routes, the &lt;code&gt;Result must be a Sexp, was Symbol::array&lt;/code&gt; and &lt;code&gt;empty char-class&lt;/code&gt; errors should be resolved now.&lt;/p&gt;

&lt;p&gt;Please report any errors raised when performing scans, as they are usually bugs.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/06/12/brakeman-1-dot-6-2-released/"/>
    <updated>2012-06-12T17:07:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/06/12/brakeman-1-dot-6-2-released</id>
    <content type="html">&lt;p&gt;Besides checks for the latest CVEs, this release includes a slightly improved redirect check, noiser output with &lt;code&gt;--compare&lt;/code&gt;, and better handling of &lt;code&gt;before_filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.1&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add checks for CVE-2012-2660, CVE-2012-2661, CVE-2012-2694, CVE-2012-2695 (Dave Worth)&lt;/li&gt;
&lt;li&gt;Avoid warning when redirecting to a model instance&lt;/li&gt;
&lt;li&gt;Raise confidence level for model attributes in redirects&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;request.parameters&lt;/code&gt; as a parameters hash&lt;/li&gt;
&lt;li&gt;Return non-zero exit code when missing dependencies&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;before_filter :except&lt;/code&gt; logic&lt;/li&gt;
&lt;li&gt;Only accept symbol literals as before_filter names&lt;/li&gt;
&lt;li&gt;Cache before_filter lookups&lt;/li&gt;
&lt;li&gt;Turn off quiet mode by default for &lt;code&gt;--compare&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Latest CVEs&lt;/h3&gt;

&lt;p&gt;A number of Rails vulnerabilities were announced recently, although there are really only two issues.&lt;/p&gt;

&lt;p&gt;One issue is that query parameters like &lt;code&gt;?name[]&lt;/code&gt; and &lt;code&gt;?name[]=1&amp;amp;name[]&lt;/code&gt; get converted to &lt;code&gt;{&quot;name&quot; =&amp;gt; [nil]}&lt;/code&gt; and &lt;code&gt;{&quot;name&quot; =&amp;gt; [&quot;1&quot;, nil]}&lt;/code&gt;. This, in turn, causes ActiveRecord to produce SQL queries with either &lt;code&gt;IS NULL&lt;/code&gt; or &lt;code&gt;IN ('1', NULL)&lt;/code&gt;. This is probably unexpected behavior.&lt;/p&gt;

&lt;p&gt;The other issue is that query parameters like &lt;code&gt;?name[users.id]=1&lt;/code&gt; or &lt;code&gt;?name[users][id]=1&lt;/code&gt; get converted to &lt;code&gt;{&quot;name&quot; =&amp;gt; { &quot;users.id&quot; =&amp;gt; 1 }}&lt;/code&gt; or &lt;code&gt;{&quot;name&quot; =&amp;gt; { &quot;users&quot; =&amp;gt; { &quot;id&quot; =&amp;gt; 1 }}}&lt;/code&gt;. ActiveRecord interprets &lt;code&gt;&quot;users.id&quot;&lt;/code&gt; and &lt;code&gt;&quot;users&quot; =&amp;gt; { &quot;id&quot; ...}&lt;/code&gt; as &lt;code&gt;&quot;users&quot;.&quot;id&quot;&lt;/code&gt; in the WHERE clause, allowing an attacker to control the table/columns being queried.&lt;/p&gt;

&lt;p&gt;Updated versions for Rails 3.x have been released.&lt;/p&gt;

&lt;p&gt;For Rails 2.3, I believe &lt;a href=&quot;https://github.com/presidentbeef/rails/pull/1/files&quot;&gt;these changes&lt;/a&gt; will fix the first issue, and there is another &lt;a href=&quot;https://rubyonrails-security.googlegroups.com/attach/aee3413fb038bf56/2-3-sql-injection.patch?view=1&amp;amp;part=3&quot;&gt;patch available&lt;/a&gt; for the second issue.&lt;/p&gt;

&lt;p&gt;Older versions of Rails 2.x may be vulnerable to the &quot;NULL&quot; issue, but not to the nested hashes problem.&lt;/p&gt;

&lt;h3&gt;Unprotected Redirect Check&lt;/h3&gt;

&lt;p&gt;There have been some minor changes to &lt;code&gt;CheckRedirect&lt;/code&gt;. In most cases, it should no longer warn when redirecting to a model instance. If there are still false positives with this scenario, please report them.&lt;/p&gt;

&lt;p&gt;The other change is that redirects to model attributes will now be marked as high confidence, instead of weak.&lt;/p&gt;

&lt;h3&gt;Exit Code on Missing Dependencies&lt;/h3&gt;

&lt;p&gt;Brakeman catches errors from missing dependencies in order to show a nicer error message. Unfortunately, it was also returning &lt;code&gt;0&lt;/code&gt; on exit. This is undesirable behavior when chaining commands together.&lt;/p&gt;

&lt;p&gt;This has been changed to return a non-zero exit code.&lt;/p&gt;

&lt;h3&gt;Before Filter Changes&lt;/h3&gt;

&lt;p&gt;There were some isues with how &lt;code&gt;before_filter&lt;/code&gt; was being handled. The logic when using &lt;code&gt;:except&lt;/code&gt; was broken, causing Brakeman to treat it like &lt;code&gt;:only&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other issue caused Brakeman to interpret arguments such as method calls as method names. For example, &lt;code&gt;before_filter blah&lt;/code&gt; would be treated like &lt;code&gt;before_filter :blah&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While dealing with this, caching of filter lookups was also added for a minor performance improvement.&lt;/p&gt;

&lt;h3&gt;Noisier &lt;code&gt;--compare&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;code&gt;--compare&lt;/code&gt; option now shows the same output as a regular scan. If you are piping the output of &lt;code&gt;--compare&lt;/code&gt; to a file or elsewhere, you may wish to use the &lt;code&gt;--quiet&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/05/23/brakeman-1-dot-6-1-released/"/>
    <updated>2012-05-23T12:45:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/05/23/brakeman-1-dot-6-1-released</id>
    <content type="html">&lt;p&gt;Wow, it's been over a month since the last release!&lt;/p&gt;

&lt;p&gt;The major change in this version is a rewrite of the SQL injection check. Many more methods are covered, and there should be a reduction of false positives as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.6.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Major rewrite of CheckSQL&lt;/li&gt;
&lt;li&gt;Process actions mixed into controllers&lt;/li&gt;
&lt;li&gt;Check for inherited &lt;code&gt;attr_accessible&lt;/code&gt; (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Handle &lt;code&gt;render :template =&amp;gt; ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Report line number of highlighted value, if available&lt;/li&gt;
&lt;li&gt;Fix highlighting of HTML escaped values in HTML report&lt;/li&gt;
&lt;li&gt;Fix rescanning of deleted templates&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Updated SQL Injection Check&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CheckSQL&lt;/code&gt; has been completely revamped. Brakeman now has a much better understanding of the various ActiveRecord::FinderMethods and ActiveRecord::QueryMethods, as well as their options.&lt;/p&gt;

&lt;p&gt;The check is also more conservative about what it warns on. Previously, since string interpolation is the main entry point for SQL injection in Rails, any interpolated value in a query would generate a warning. Now, &quot;safe&quot; sanitization methods, obviously safe methods like &lt;code&gt;to_i&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;, constants, strings, and other literal values should not cause warnings.&lt;/p&gt;

&lt;p&gt;The &quot;highlighted&quot; value (or &quot;user input&quot;) reported for SQL warnings should be much more accurate now, making it easier to determine why a warning was reported.&lt;/p&gt;

&lt;h3&gt;Controller Mixins&lt;/h3&gt;

&lt;p&gt;Methods on controller mixins that are used as actions should now be processed as if they were defined in the controller itself.&lt;/p&gt;

&lt;h3&gt;Check for Inherited Mass Assignment Protection&lt;/h3&gt;

&lt;p&gt;Since mass assignment protection via &lt;code&gt;attr_accessible&lt;/code&gt; is inheritable, Brakeman will no longer warn about models whose parent uses &lt;code&gt;attr_accessible&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Template Option in Render&lt;/h3&gt;

&lt;p&gt;Somehow, the &lt;code&gt;:template&lt;/code&gt; option for &lt;code&gt;render&lt;/code&gt; has been ignored this whole time. Sorry!&lt;/p&gt;

&lt;h3&gt;Better Line Numbers&lt;/h3&gt;

&lt;p&gt;Warnings which have a &lt;code&gt;:user_input&lt;/code&gt; field use that value to &quot;highlight&quot; part of the code in the reported warning. This value usually corresponds to the code which actually caused the warning to be generated.&lt;/p&gt;

&lt;p&gt;If a warning has this field, the line number of that code is used, instead of the starting line number of the entire piece of code. This often leads to more accurate and helpful line numbers.&lt;/p&gt;

&lt;h3&gt;Highlighted Values in HTML Reports&lt;/h3&gt;

&lt;p&gt;Since the warnings output in HTML reports are HTML-escaped, there was a sometimes mismatch between the value that needed to be highlighted and the HTML warning output, causing nothing to be highlighted. This is fixed now.&lt;/p&gt;

&lt;h3&gt;Rescanning of Deleted Templates&lt;/h3&gt;

&lt;p&gt;In the rescanning logic, templates which are related to a changed file (a view or partial that is rendered, usually) will be rescanned. However, there is the possibility that the template which needs to be rescanned as a related file has been deleted as part of the set of changes. This caused the rescanning to blow up, but that has been fixed now.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;Don't forget to check out the &lt;a href=&quot;https://speakerdeck.com/u/presidentbeef/p/keeping-rails-applications-on-track-with-brakeman&quot;&gt;RailsConf Brakeman presentation slides&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.6 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/04/20/brakeman-1-dot-6-released/"/>
    <updated>2012-04-20T10:22:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/04/20/brakeman-1-dot-6-released</id>
    <content type="html">&lt;p&gt;A lot of code has changed in this release, particularly with the removal of the Ruport library for reporting. While Ruport worked pretty well, it caused some issues just due to the large number of (out-dated) dependencies it brought with it.&lt;/p&gt;

&lt;p&gt;Also, this release changes the JSON report output. This is a backwards &lt;em&gt;incompatible&lt;/em&gt; change. But, given how useless the previous JSON reports were, hopefully this will not affect too many people.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.5.3:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove the Ruport dependency (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add more informational JSON output (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add comparison to previous JSON report (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Add highlighting of dangerous values in HTML/text reports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model#update_attribute&lt;/code&gt; should not raise mass assignment warning (Dave Worth)&lt;/li&gt;
&lt;li&gt;Don't check &lt;code&gt;find_by_*&lt;/code&gt; method for SQL injection&lt;/li&gt;
&lt;li&gt;Fix duplicate reporting of mass assignment and SQL injection&lt;/li&gt;
&lt;li&gt;Fix rescanning of deleted files&lt;/li&gt;
&lt;li&gt;Properly check for &lt;code&gt;rails_xss&lt;/code&gt; in Gemfile&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;No More Ruport&lt;/h3&gt;

&lt;p&gt;Ruport is a nice library, but it also has not been updated in over two years and its dependency tree was ridiculous.&lt;/p&gt;

&lt;p&gt;Thanks to Neil Matatall, Brakeman no longer depends on Ruport, but the reports should look essentially the same. The HTML reports are now rendered through ERB templates, so it should not be too difficult to customize the reports if desired.&lt;/p&gt;

&lt;h3&gt;Better JSON Output&lt;/h3&gt;

&lt;p&gt;JSON output now includes meta-information about the scan, errors raised during the scan, and line numbers for each warning.&lt;/p&gt;

&lt;h3&gt;JSON Report Comparison&lt;/h3&gt;

&lt;p&gt;Being able to compare Brakeman reports is essential for tracking warnings over time. Prior to this release, the only decent way of doing that was via the &lt;a href=&quot;http://brakemanscanner.org/docs/jenkins/&quot;&gt;Jenkins plugin&lt;/a&gt;. But now Brakeman can compare results to the JSON report from a previous scan.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brakeman -o report.json
brakeman --compare report.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run another scan, then output a comparison of the reports (in JSON). The report includes a list of fixed warnings and a list of new warnings that were found.&lt;/p&gt;

&lt;h3&gt;User Input Highlighted in Reports&lt;/h3&gt;

&lt;p&gt;Sometimes it is unclear exactly what value has caused Brakeman to issue a particular warning. This release adds highlighting the detected user input in most warnings. (Some warnings, the code that is reported &lt;em&gt;is&lt;/em&gt; the detected user input). This information is also available in the JSON reports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/user_input_highlight.png&quot; title=&quot;Example of User Input Highlighting&quot; alt=&quot;User Input Highlight&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Fewer Mass Assignment and SQL Injection Methods&lt;/h3&gt;

&lt;p&gt;Dave Worth pointed out that Brakeman was a little overzealous in which methods it considered susceptible to mass assignment and SQL injection attacks.&lt;/p&gt;

&lt;p&gt;Brakeman will no longer check &lt;code&gt;update_attribute&lt;/code&gt; for mass assignment or the &lt;code&gt;find_by_*&lt;/code&gt; dynamic methods for SQL injection.&lt;/p&gt;

&lt;h3&gt;Fewer Mass Assignment and SQL Injection Duplicates&lt;/h3&gt;

&lt;p&gt;Pesky duplicate reports of mass assignment and SQL injection were turning up as template warnings. This occurred when the results of the mass assignment or SQL query were assigned to a variable which was then used in a template. This should now be fixed.&lt;/p&gt;

&lt;p&gt;More details than are probably desired are available &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/82&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Rescanning Fixes&lt;/h3&gt;

&lt;p&gt;Rescanning of deleted files is now supported, and there some other issues with rescanning that are now resolved as well.&lt;/p&gt;

&lt;h3&gt;New Logo&lt;/h3&gt;

&lt;p&gt;Brakeman has a sweet new logo, thanks to &lt;a href=&quot;http://janellelawless.com/&quot;&gt;Janelle Lawless&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/logo_medium.png&quot; alt=&quot;Brakeman Logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Updates to the website to reflect this awesomeness are coming soon.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt; with this release!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;And don't forget to check out the Brakeman talk at &lt;a href=&quot;http://railsconf2012.com/sessions/44&quot;&gt;RailsConf&lt;/a&gt; in a few days.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.5.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/04/10/brakeman-1-dot-5-3-released/"/>
    <updated>2012-04-10T13:18:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/04/10/brakeman-1-dot-5-3-released</id>
    <content type="html">&lt;p&gt;A considerable number of bugs and odd cases have been fixed with this release, and one new check has been added. Upgrading is &lt;em&gt;always&lt;/em&gt; recommended!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.5.2:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for user input in &lt;code&gt;Object#send&lt;/code&gt; (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Support output to multiple formats (Nick Green)&lt;/li&gt;
&lt;li&gt;Prevent infinite loops in mutually recursive templates&lt;/li&gt;
&lt;li&gt;Only check &lt;code&gt;eval&lt;/code&gt; arguments for user input, not the call target&lt;/li&gt;
&lt;li&gt;Handle &lt;code&gt;render :layout&lt;/code&gt; in views&lt;/li&gt;
&lt;li&gt;Search subdirectories for models&lt;/li&gt;
&lt;li&gt;Set values in request hashes and propagate to views&lt;/li&gt;
&lt;li&gt;Add rake task file to gemspec (Anton Ageev)&lt;/li&gt;
&lt;li&gt;Filter rescanning of templates (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Improve handling of modules and nesting&lt;/li&gt;
&lt;li&gt;Test for zero errors in test reports&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;New Check for User Input in Object#send&lt;/h3&gt;

&lt;p&gt;This new check looks for instances where user input can be used to control the method called using &lt;code&gt;send&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user = User.find(params[:user][:id])
method = params[:user][:action].to_sym
user.send(method)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Support for Multiple Output Formats&lt;/h3&gt;

&lt;p&gt;Brakeman can now accept multiple &lt;code&gt;-o&lt;/code&gt; arguments in order to produce more than one report from the same scan:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brakeman -o report.html -o report.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Handle Mutually Recursive Templates&lt;/h3&gt;

&lt;p&gt;In some cases where two templates would render each other as partials, it would cause infinite loops in Brakeman. This is now fixed, at least for the simple common case:&lt;/p&gt;

&lt;p&gt;_one.erb.html:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= render :partial =&amp;gt; 'two' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_two.erb.html:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= render :partial =&amp;gt; 'one' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Only Check &lt;code&gt;eval&lt;/code&gt; Arguments&lt;/h3&gt;

&lt;p&gt;Previously, Brakeman was checking the entire call to methods like &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;class_eval&lt;/code&gt; for user input. This led to false positives when &lt;code&gt;class_eval&lt;/code&gt; was being called on a model.&lt;/p&gt;

&lt;p&gt;Now Brakeman only checks the arguments or block provided to the &lt;code&gt;eval&lt;/code&gt; call.&lt;/p&gt;

&lt;h3&gt;Handle render :layout in views&lt;/h3&gt;

&lt;p&gt;Brakeman was not handling &lt;code&gt;render :layout =&amp;gt; &quot;...&quot;&lt;/code&gt; in views properly. This led to errors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wrong number of arguments (0 for 1): /Users/collins/work/brakeman/lib/brakeman/processors/lib/render_helper.rb:14:in `template_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;render :layout&lt;/code&gt; is now handled just like rendering a partial.&lt;/p&gt;

&lt;h3&gt;Search for Models in Subdirectories&lt;/h3&gt;

&lt;p&gt;Brakeman was only searching &lt;code&gt;app/models/&lt;/code&gt; for models, but not any subdirectories. Now it does!&lt;/p&gt;

&lt;h3&gt;Propagate Request Values&lt;/h3&gt;

&lt;p&gt;While Brakeman has always detected request values (e.g., query parameters) in views, it would not propagate values stored IN those request hashes.&lt;/p&gt;

&lt;p&gt;For example, if an action in a controller did this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;params[:input] = some_random_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That value would not be propagated to the view if the view used &lt;code&gt;params[:input]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Add Rake Task to Gemspec&lt;/h3&gt;

&lt;p&gt;In 1.2.0, Brakeman added the &lt;code&gt;--rake&lt;/code&gt; option to add a Rake task to a Rails application, but the actual task itself was not included in the gem!&lt;/p&gt;

&lt;p&gt;Thanks to Anton Ageev for pointing this out. Either no one else tried this option, or a lot of people were very disappointed.&lt;/p&gt;

&lt;h3&gt;Filter Templates When Rescanning&lt;/h3&gt;

&lt;p&gt;When rescanning (for example, with &lt;a href=&quot;https://github.com/guard/guard-brakeman&quot;&gt;guard-brakeman&lt;/a&gt;), Brakeman was assuming any files in &lt;code&gt;app/views&lt;/code&gt; is a template, but this isn't always true.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;And don't forget to check out the Brakeman talk at &lt;a href=&quot;http://railsconf2012.com/sessions/44&quot;&gt;RailsConf&lt;/a&gt; later this month.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.5.2 Released - Important Fixes</title>
    <link href="http://brakemanscanner.org/blog/2012/03/22/brakeman-1-dot-5-2-released-important-fixes/"/>
    <updated>2012-03-22T13:34:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/03/22/brakeman-1-dot-5-2-released-important-fixes</id>
    <content type="html">&lt;p&gt;This is update includes some important fixes. All users of the &lt;code&gt;rails_xss&lt;/code&gt; plugin are particularly encouraged to upgrade.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.5.1:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix handling of views when using &lt;code&gt;rails_xss&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fix rescanning of lib files (Neil Matatall)&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;link_to&lt;/code&gt; checks for Rails 2.0 and 2.3&lt;/li&gt;
&lt;li&gt;Revert to &lt;code&gt;ruby_parser&lt;/code&gt; 2.3.1 for Ruby 1.8 parsing&lt;/li&gt;
&lt;li&gt;Only warn on user input in render paths&lt;/li&gt;
&lt;li&gt;Output stack trace on interrupt when debugging&lt;/li&gt;
&lt;li&gt;Ignore user input in if statement conditions&lt;/li&gt;
&lt;li&gt;Fix --skip-files option with Ruby 1.8&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Views with rails_xss&lt;/h3&gt;

&lt;p&gt;Some previous changes to make sure Brakeman was processing ERB views the same way as the &lt;code&gt;rails_xss&lt;/code&gt; plugin unfortunately broke the processing of those views.&lt;/p&gt;

&lt;p&gt;These changes caused Brakeman to not report &lt;em&gt;any&lt;/em&gt; output from ERB views when the &lt;code&gt;rails_xss&lt;/code&gt; plugin was in use, hiding any XSS vulnerabilities in those views.&lt;/p&gt;

&lt;p&gt;This now fixed, so if you are using the &lt;code&gt;rails_xss&lt;/code&gt; plugin, it is highly recommended to upgrade.&lt;/p&gt;

&lt;h3&gt;Rescanning lib/ Files&lt;/h3&gt;

&lt;p&gt;Rescanning changed files in the &lt;code&gt;lib&lt;/code&gt; directory was broken, but Neil fixed it!&lt;/p&gt;

&lt;h3&gt;link_to Checks&lt;/h3&gt;

&lt;p&gt;In Rails 2.3, the URL is escaped, but not the body of the link. In Rails 2.0, neither argument is escaped.&lt;/p&gt;

&lt;p&gt;In this release, the check for XSS in &lt;code&gt;link_to&lt;/code&gt; has been updated to handle &lt;code&gt;link_to&lt;/code&gt; with blocks and to warn in Rails 2.0.x if any user input is used as an argument.&lt;/p&gt;

&lt;h3&gt;Revert to ruby_parser for Ruby 1.8&lt;/h3&gt;

&lt;p&gt;Brakeman has been using a vendored version of &lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;ruby_parser&lt;/a&gt; with some updates to Ruby 1.9 syntax parsing. Unfortunately, that version also introduced some regressions for parsing Ruby 1.8 syntax.&lt;/p&gt;

&lt;p&gt;To handle this, Brakeman will now only use the vendored version for 1.9 parsing, but the regular gem version for 1.8 syntax parsing. This should fix some parse errors people are seeing for Ruby 1.8 apps.&lt;/p&gt;

&lt;h3&gt;Dynamic Render Path Updates&lt;/h3&gt;

&lt;p&gt;The check for dynamic render paths was not very good, but it is better now. &quot;Dynamic Render Path&quot; warnings should only be raised when user input is actually used to determine what view, partial, or file to render.&lt;/p&gt;

&lt;h3&gt;Stacktrace Output&lt;/h3&gt;

&lt;p&gt;Brakeman will now output a stacktrace if interrupted while running with the &lt;code&gt;-d&lt;/code&gt; option. This is mostly helpful when Brakeman appears to &quot;hang&quot;.&lt;/p&gt;

&lt;h3&gt;Reporting Issues&lt;/h3&gt;

&lt;p&gt;Please report any &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;issues&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also consider joining the &lt;a href=&quot;http://brakemanscanner.org/contact/&quot;&gt;mailing list&lt;/a&gt; or following &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman Jenkins Plugin 0.7 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/03/22/brakeman-jenkins-plugin-0-dot-7-released/"/>
    <updated>2012-03-22T13:27:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2012/03/22/brakeman-jenkins-plugin-0-dot-7-released</id>
    <content type="html">&lt;p&gt;The &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt;/&lt;a href=&quot;http://hudson-ci.org&quot;&gt;Hudson&lt;/a&gt; plugin which tracks, displays, and alerts on Brakeman warnings has been updated to work with the latest static analysis core plugin. In particular, this means warning thresholds for new warnings will no longer disappear.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;here&lt;/a&gt; for more information about the plugin.&lt;/p&gt;

&lt;p&gt;Thanks to Nick Green for fixing this!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.5.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/03/05/brakeman-1-dot-5-1-released/"/>
    <updated>2012-03-05T18:50:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/03/05/brakeman-1-dot-5-1-released</id>
    <content type="html">&lt;p&gt;After the excitment yesterday with a mass assignment vulnerability being exploited in a very public manner on &lt;a href=&quot;https://gist.github.com/1978249&quot;&gt;Github&lt;/a&gt;, interest in Brakeman has skyrocketed.&lt;/p&gt;

&lt;p&gt;This lead to re-examination of Brakeman's code for detecting that mass assignment has been globally disabled - and it turns out there was a bug or two. So here is a bug-fix release of Brakeman to correct that and some other minor issues.&lt;/p&gt;

&lt;p&gt;Upgrading to 1.5.1 may increase the number of warnings reported.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.5.0&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix detection of global mass assignment setting&lt;/li&gt;
&lt;li&gt;Fix partial rendering in Rails 3&lt;/li&gt;
&lt;li&gt;Show backtrace when interrupt received (Ruby 1.9 only)&lt;/li&gt;
&lt;li&gt;More debug output&lt;/li&gt;
&lt;li&gt;Internal fixes:

&lt;ul&gt;
&lt;li&gt;Remove duplicate method in Brakeman::Rails2XSSErubis&lt;/li&gt;
&lt;li&gt;Add tracking of module and class to Brakeman::BaseProcessor&lt;/li&gt;
&lt;li&gt;Report module when using Brakeman::FindCall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Mass Assignment&lt;/h3&gt;

&lt;p&gt;Mass assignment is not a particularly new issue, but the amount of attention suddenly focused on it this weekend was amazing.&lt;/p&gt;

&lt;p&gt;This release of Brakeman can detect three different methods for defaulting all models to a whitelist of allowed attributes that can be mass assigned.&lt;/p&gt;

&lt;p&gt;The first is probably the most widely-seen version. In an intializer, do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActiveRecord::Base.send(:attr_accessible, nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second is essentially equivalent, but 1.5.1 adds support for it as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module ActiveRecord
  class Base
    attr_accessible nil
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The third option is only available for Rails 3.1.0 and newer. The following configuration setting can be added to &lt;code&gt;application.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.active_record.whitelist_attributes = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Brakeman should correctly detect all of these.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pragtob.wordpress.com/2012/03/06/secure-your-rails-apps/&quot;&gt;This is a very nice post&lt;/a&gt; explaining the dangers of mass assignment (mentioning Brakeman is nice, too.)&lt;/p&gt;

&lt;h3&gt;Partials in Rails 3&lt;/h3&gt;

&lt;p&gt;In Rails 3, &lt;code&gt;render 'blah'&lt;/code&gt; is now equivalent to &lt;code&gt;render :partial =&amp;gt; 'blah'&lt;/code&gt; when used inside a template.&lt;/p&gt;

&lt;p&gt;Brakeman now supports this correctly.&lt;/p&gt;

&lt;h3&gt;Debug Output&lt;/h3&gt;

&lt;p&gt;More debugging output has been added for use with the &lt;code&gt;-d&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Additionally, when interrupting the application (for example, with &lt;code&gt;^C&lt;/code&gt;), a stack trace will be output. Please note, however, that this only works with Ruby 1.9.&lt;/p&gt;

&lt;h3&gt;Internal Changes&lt;/h3&gt;

&lt;p&gt;There have been a few internal changes. There is a possibility that these will affect some warnings. However, it should only result in accurate reporting of class names.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;Please report any problems on &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;Github&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.5.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/03/01/brakeman-1-dot-5-0-released/"/>
    <updated>2012-03-01T20:23:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/03/01/brakeman-1-dot-5-0-released</id>
    <content type="html">&lt;p&gt;A release was forced today because two new Rails vulnerabilities were reported (the first since November):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/9da0c515a6c4664&quot;&gt;Manual options are not escaped in select()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/edd28f1e3d04e913&quot;&gt;Some operations on SafeBuffer mistakenly return strings marked as html_safe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This release includes checks for these two vulnerabilities.&lt;/p&gt;

&lt;p&gt;There is also a new check for skipping CSRF token verification, and some other changes which may result in fewer or more vulnerabilities being reported.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.4.0:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add version check for SafeBuffer vulnerability&lt;/li&gt;
&lt;li&gt;Add check for select vulnerability in Rails 3&lt;/li&gt;
&lt;li&gt;select() is no longer considered safe in Rails 2&lt;/li&gt;
&lt;li&gt;Add check for skipping CSRF protection with a blacklist&lt;/li&gt;
&lt;li&gt;Add JSON report format&lt;/li&gt;
&lt;li&gt;Model#id should not be considered XSS&lt;/li&gt;
&lt;li&gt;Standardize methods to check for SQL injection&lt;/li&gt;
&lt;li&gt;Fix Rails 2 route parsing issue with nested routes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Check for SafeBuffer Vulnerability&lt;/h3&gt;

&lt;p&gt;A new vulnerability was reported that affects strings which are marked as &lt;code&gt;html_safe&lt;/code&gt; and then modified in some way. For some operations, the new, modified string will still be marked as &lt;code&gt;html_safe&lt;/code&gt;. Full details &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/edd28f1e3d04e913&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this vulnerability, Brakeman only does a version check and reports if an application is used a vulnerable version of Rails. It only reports on Rails 3 applications, since Rails 3 introduced the concept of SafeBuffers.&lt;/p&gt;

&lt;h3&gt;Check for select Helper Vulnerability&lt;/h3&gt;

&lt;p&gt;Another vulnerability was reported today in the &lt;code&gt;select&lt;/code&gt; form helper. Option tags built by hand (interpolating values into &lt;code&gt;&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;&lt;/code&gt;) will not be escaped by &lt;code&gt;select&lt;/code&gt;. Full details &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/9da0c515a6c4664&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Rails 3 applications, Brakeman checks for uses of &lt;code&gt;select&lt;/code&gt; which have user input in the &lt;code&gt;options&lt;/code&gt; argument. This check may be refined in the future.&lt;/p&gt;

&lt;p&gt;For Rails 2, Brakeman no longer considers &lt;code&gt;select&lt;/code&gt; a safe method when checking for cross site scripting.&lt;/p&gt;

&lt;h3&gt;Check for CSRF Filter Skipping&lt;/h3&gt;

&lt;p&gt;When cross site request forgery protection is enabled, a &lt;code&gt;before_filter&lt;/code&gt; is added called &lt;code&gt;verify_authenticity_token&lt;/code&gt;. This filter checks that actions called responding to a &lt;code&gt;POST&lt;/code&gt; have a correct authenticity token from the client. Since this is a regular &lt;code&gt;before_filter&lt;/code&gt;, it can be skipped using &lt;code&gt;skip_before_filter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;skip_before_filter&lt;/code&gt; is called using an &lt;code&gt;:except&lt;/code&gt; option, then the default for the controller becomes NOT checking for an authenticity token:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;skip_before_filter :verify_authenticity_token, :except =&amp;gt; [:create, :delete]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is recommended to use &lt;code&gt;:only&lt;/code&gt; if skipping this filter is actually necessary. This way, any new actions added later will automatically fall under the CSRF protection.&lt;/p&gt;

&lt;p&gt;This check may be extended in the future to other important filters.&lt;/p&gt;

&lt;h3&gt;JSON Report Format&lt;/h3&gt;

&lt;p&gt;While the code for outputting JSON was in the 1.4.0 release, it was not actually added as a proper output format! This has been rectified.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-f json&lt;/code&gt; or &lt;code&gt;-o report.json&lt;/code&gt; will now produce JSON reports.&lt;/p&gt;

&lt;p&gt;The information contained in these reports may change in the future, although that should only be adding more information.&lt;/p&gt;

&lt;h3&gt;SQL Methods&lt;/h3&gt;

&lt;p&gt;The code for finding SQL methods to check for SQL injection was a little messed up. Depending on how the method was called, different sets of methods were considered dangerous.&lt;/p&gt;

&lt;p&gt;This has been changed for better consistency and coverage. This means reports may include new SQL injections, so keep an eye out.&lt;/p&gt;

&lt;h3&gt;Rails 2 Route Parsing Fix&lt;/h3&gt;

&lt;p&gt;There was a bug in the code which determined if a method was being called on &lt;code&gt;map&lt;/code&gt;, which caused Brakeman to think strange methods were route definitions (for example, &lt;code&gt;require&lt;/code&gt;). This has been fixed.&lt;/p&gt;

&lt;h3&gt;Report Problems!&lt;/h3&gt;

&lt;p&gt;Always &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report problems&lt;/a&gt; encountered when running Brakeman.&lt;/p&gt;

&lt;p&gt;Don't forget to join the &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;mailing list&lt;/a&gt; and/or follow &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@Brakeman&lt;/a&gt; on Twitter.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.4.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/02/25/brakeman-1-dot-4-0-released/"/>
    <updated>2012-02-25T09:57:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/02/25/brakeman-1-dot-4-0-released</id>
    <content type="html">&lt;p&gt;This is not a big release, but it does add a new check. Also, processing for ERB templates with the &lt;code&gt;rails_xss&lt;/code&gt; plugin has changed, so there is the possibility that line numbers for reported warnings will shift.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.3.0:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for user input in link_to href parameter&lt;/li&gt;
&lt;li&gt;Match ERB processing to rails_xss plugin when plugin used&lt;/li&gt;
&lt;li&gt;Add Brakeman::Report#to_json, Brakeman::Warning#to_json&lt;/li&gt;
&lt;li&gt;Warnings below minimum confidence are dropped completely&lt;/li&gt;
&lt;li&gt;Brakeman.run will now always return a Tracker&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;New Check for link_to&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/oreoshake&quot;&gt;Neil Matatall&lt;/a&gt; has contributed a new check for the href parameter in &lt;code&gt;link_to&lt;/code&gt;. Even if HTML escaped, some values can be dangerous, so this check will warn for user input in that parameter. See &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/45&quot;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--url-safe-methods&lt;/code&gt; option can be used to specify escaping methods which are safe for urls.&lt;/p&gt;

&lt;h3&gt;ERB and rails_xss&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;rails_xss&lt;/code&gt; plugin has some fixes for how Erbuis handles certain input. Brakeman now matches those changes, which fixes some parsing errors.&lt;/p&gt;

&lt;h3&gt;Internal Changes&lt;/h3&gt;

&lt;p&gt;There have been some changes which only impact those working with Brakeman as a library.&lt;/p&gt;

&lt;p&gt;First, there is now json output for reports. This actually should be an output format option, but I did not realize it until writing this post. The next release will include this, though!&lt;/p&gt;

&lt;p&gt;The way Brakeman handles the &lt;code&gt;--confidence-level&lt;/code&gt; option has also changed. In the past, warnings would be filtered when output in a report. This meant, for example, that &lt;code&gt;tracker.checks.all_warnings&lt;/code&gt; would still return warnings below the specified confidence level. It also caused problems because there were many places in the code where the warnings needed to be filtered. With this release, warnings below the confidence level will be dropped as soon as they are found and will not need to be filtered at any later point.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;code&gt;Brakeman.run&lt;/code&gt; would return &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;--exit-on-warn&lt;/code&gt; was set, and a &lt;code&gt;Tracker&lt;/code&gt; object otherwise. This has changed. &lt;code&gt;Brakeman.run&lt;/code&gt; will now always return a &lt;code&gt;Tracker&lt;/code&gt; object and the logic for &lt;code&gt;--exit-on-warn&lt;/code&gt; was pushed out to the Brakeman executable.&lt;/p&gt;

&lt;h3&gt;Report Issues&lt;/h3&gt;

&lt;p&gt;As usual, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report any issues&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.3.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/02/08/brakeman-1-dot-3-0-released/"/>
    <updated>2012-02-08T15:11:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/02/08/brakeman-1-dot-3-0-released</id>
    <content type="html">&lt;p&gt;Thanks to everyone who reported problems and suggestions this time around!&lt;/p&gt;

&lt;p&gt;This release includes some new features, better performance on large projects, and more detection criteria. Warnings reported may change after upgrading.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Changes since 1.2.2:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add file paths to HTML report&lt;/li&gt;
&lt;li&gt;Add caching of filters&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;--skip-files&lt;/code&gt; option&lt;/li&gt;
&lt;li&gt;Add support for &lt;code&gt;attr_protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add detection of request.env as user input&lt;/li&gt;
&lt;li&gt;Descriptions of checks in &lt;code&gt;-k&lt;/code&gt; output&lt;/li&gt;
&lt;li&gt;Improved processing of named scopes&lt;/li&gt;
&lt;li&gt;Check for mass assignment in &lt;code&gt;ActiveRecord::Associations::AssociationCollection#build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Better variable substitution&lt;/li&gt;
&lt;li&gt;Table output option for rescan reports&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;File Paths in HTML Report&lt;/h3&gt;

&lt;p&gt;In the HTML output, any warning which has context associated with it (visible when clicking on the warning message) will now include the file name at the top of the code snippet.&lt;/p&gt;

&lt;h3&gt;Filter Caching&lt;/h3&gt;

&lt;p&gt;Filters (using &lt;code&gt;before_filter&lt;/code&gt;) are now only parsed once, instead of for everytime they are used. This has greatly improved performance when scanning some large projects.&lt;/p&gt;

&lt;h3&gt;Option to Skip Files&lt;/h3&gt;

&lt;p&gt;A list of files to skip can be provided with the &lt;code&gt;--skip-files&lt;/code&gt; option. This will skip any initializers, libraries, controllers, models, or views that match the file names provided. The file names to skip are matched against the end of the absolute path. That is, &lt;code&gt;blah.rb&lt;/code&gt; will skip &lt;em&gt;any&lt;/em&gt; file with a name ending in &lt;code&gt;blah.rb&lt;/code&gt;. This means it is not necessary to provide the full path to a file.&lt;/p&gt;

&lt;h3&gt;Support for Blacklisting Attributes&lt;/h3&gt;

&lt;p&gt;Previously, Brakeman ignored uses of &lt;code&gt;attr_protected&lt;/code&gt;. Ideally, &lt;code&gt;attr_accessible&lt;/code&gt; should always be used to whitelist attributes that can be set using mass assignment. This way, attributes can never be &quot;accidentally&quot; exposed. However, it can also be tedious for large models.&lt;/p&gt;

&lt;p&gt;With this release, Brakeman will downgrade mass assignment warnings to &quot;weak&quot; confidence if &lt;code&gt;attr_protected&lt;/code&gt; is used, as well as suggesting that &lt;code&gt;attr_accessible&lt;/code&gt; be used instead.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--ignore-protected&lt;/code&gt; option can be used to suppress any warnings for models that use &lt;code&gt;attr_protected&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Request Environment is User Input&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;request.env&lt;/code&gt; will now be treated as user input.&lt;/p&gt;

&lt;h3&gt;Check Descriptions&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-k&lt;/code&gt; option now includes descriptions of each check.&lt;/p&gt;

&lt;h3&gt;Named Scope Improvements&lt;/h3&gt;

&lt;p&gt;The 1.2.0 release added checking for SQL injection in named scopes, but it was not very accurate. This has been improved.&lt;/p&gt;

&lt;h3&gt;Better Variable Substitution&lt;/h3&gt;

&lt;p&gt;Variable substitution would sometimes &quot;explode&quot; if a set of code was processed for aliasing several times.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Might become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts clean(clean(clean(clean(x))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should now be prevented, so it would just become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x = clean(x)

puts clean(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There may be subtle issues with this code (although I have not seen any yet), but it's better than creating a bunch of useless substitutions.&lt;/p&gt;

&lt;h3&gt;Table Output for Rescan Reports&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RescanReport#to_s(true)&lt;/code&gt; will now output formatted tables, thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/pull/33&quot;&gt;Dave Worth&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Issues?&lt;/h3&gt;

&lt;p&gt;As usual, please report any issues on &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;GitHub&lt;/a&gt;, send a tweet to &lt;a href=&quot;https://twitter.com/brakeman&quot;&gt;@Brakeman&lt;/a&gt;, or send an email to the &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.2.2 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/01/26/brakeman-1-dot-2-2-released/"/>
    <updated>2012-01-26T13:58:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/01/26/brakeman-1-dot-2-2-released</id>
    <content type="html">&lt;p&gt;&lt;em&gt;Changes since 1.2.1:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;--no-progress works again&lt;/li&gt;
&lt;li&gt;Make CheckLinkTo a separate check&lt;/li&gt;
&lt;li&gt;Don't fail on unknown options to resource(s)&lt;/li&gt;
&lt;li&gt;Handle empty resource(s) blocks&lt;/li&gt;
&lt;li&gt;Add RescanReport#existing_warnings&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;No Progress Option&lt;/h3&gt;

&lt;p&gt;The last release broke the &lt;code&gt;--no-progress&lt;/code&gt; option for hiding the &lt;code&gt;1/100 files processed&lt;/code&gt; type messages. Now it works again!&lt;/p&gt;

&lt;h3&gt;Separate Check for link_to&lt;/h3&gt;

&lt;p&gt;For no great reason, &lt;code&gt;CheckLinkTo&lt;/code&gt; was bundled with &lt;code&gt;CheckCrossSiteScripting&lt;/code&gt;. It has now been moved out to a separate file, allowing it to be treated as a regular check. This means it can be explicitly skipped using &lt;code&gt;-x CheckLinkTo&lt;/code&gt; (if desired).&lt;/p&gt;

&lt;h3&gt;Better Rails 2 Route Handling&lt;/h3&gt;

&lt;p&gt;Brakeman was raising an exception if a hash option to &lt;code&gt;resource&lt;/code&gt; or &lt;code&gt;resources&lt;/code&gt; did not match a set of known options. Now it will only warn instead of aborting route processing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 1.2.1 Released</title>
    <link href="http://brakemanscanner.org/blog/2012/01/20/brakeman-1-dot-2-1-released/"/>
    <updated>2012-01-20T12:16:00-08:00</updated>
    <id>http://brakemanscanner.org/blog/2012/01/20/brakeman-1-dot-2-1-released</id>
    <content type="html">&lt;p&gt;This is essentially just a bugfix release, but due to the fixes for &lt;code&gt;link_to&lt;/code&gt; warnings, there is a good possibility the number of reported warnings will decrease when upgrading to this version.&lt;/p&gt;

&lt;p&gt;Changes since 1.2.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove link_to warning for Rails 3.x or when using rails_xss&lt;/li&gt;
&lt;li&gt;Don't warn if first argument to link_to is escaped&lt;/li&gt;
&lt;li&gt;Detect usage of attr_accessible with no arguments&lt;/li&gt;
&lt;li&gt;Fix error when rendering a partial from a view but not through a controller&lt;/li&gt;
&lt;li&gt;Fix some issues with rails_xss, CheckCrossSiteScripting, and CheckTranslateBug&lt;/li&gt;
&lt;li&gt;Simplify Brakeman Rake task&lt;/li&gt;
&lt;li&gt;Avoid modifying $VERBOSE&lt;/li&gt;
&lt;li&gt;Add Brakeman::RescanReport#to_s&lt;/li&gt;
&lt;li&gt;Add Brakeman::Warning#to_s&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;link_to Changes&lt;/h3&gt;

&lt;p&gt;Prior to Rails 3.0, there &lt;a href=&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3518-link_to-doesnt-escape-its-input&quot;&gt;was a bug&lt;/a&gt; in &lt;code&gt;link_to&lt;/code&gt; that caused the body of the link tag to be output without escaping. While this was fixed in Rails 3.0, Brakeman has still been warning on it. This was also fixed in the &lt;a href=&quot;https://github.com/rails/rails_xss/commit/afc1610fe4b94150faee98c16f15a24290d20900&quot;&gt;rails_xss&lt;/a&gt;, so Brakeman should no longer warn on &lt;code&gt;link_to&lt;/code&gt; for Rails 2.x when using the rails_xss plugin.&lt;/p&gt;

&lt;p&gt;Brakeman was also warning on &lt;code&gt;link_to&lt;/code&gt; even if the body argument was manually escaped. This should be resolved now.&lt;/p&gt;

&lt;p&gt;One other related issue was a silly bug causing Brakeman to sometimes ignore &lt;code&gt;--escape-html&lt;/code&gt; or the rails_xss plugin, leading to some confusing output. This is fixed.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/32&quot;&gt;Neil Matatall&lt;/a&gt; for reporting the &lt;code&gt;link_to&lt;/code&gt; issue and &lt;a href=&quot;https://github.com/a5sk4s&quot;&gt;Andreas&lt;/a&gt; for reporting the rails_xss problems.&lt;/p&gt;

&lt;h3&gt;attr_accessible with No Arguments&lt;/h3&gt;

&lt;p&gt;Brakeman was not detecting the case where &lt;code&gt;attr_accessible&lt;/code&gt; is called with zero arguments, causing spurious mass assignment warnings.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues/31&quot;&gt;Justin Wiley&lt;/a&gt; for reporting this.&lt;/p&gt;

&lt;h3&gt;Brakeman Rake Task&lt;/h3&gt;

&lt;p&gt;The Brakeman Rake task (installed via &lt;code&gt;--rake&lt;/code&gt;) is even &lt;a href=&quot;http://brakemanscanner.org/docs/rake&quot;&gt;simpler now&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;$VERBOSE&lt;/h3&gt;

&lt;p&gt;Brakeman was using &lt;code&gt;$VERBOSE&lt;/code&gt; and &lt;code&gt;Kernel.warn&lt;/code&gt; for controlling debug output. This has changed and &lt;code&gt;$VERBOSE&lt;/code&gt; will no longer be modified when using Brakeman.&lt;/p&gt;

&lt;h3&gt;Rails 3.2 Support&lt;/h3&gt;

&lt;p&gt;So far, there have not been any issues with Brakeman and Rails 3.2. Please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report&lt;/a&gt; any that come up!&lt;/p&gt;

&lt;h3&gt;JRuby Performance&lt;/h3&gt;

&lt;p&gt;Prior to Brakeman 1.2, &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; was very slow when running Brakeman. This has changed, and now JRuby is probably the fastest option for scanning large applications. Give it a try, especially if you are using Ruby 1.8.7!&lt;/p&gt;

&lt;h3&gt;Mailing List&lt;/h3&gt;

&lt;p&gt;There is now a Brakeman mailing list on &lt;a href=&quot;http://librelist.com/browser/brakeman/&quot;&gt;librelist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To subscribe, send any email to &lt;a href='&amp;#109;ailto&amp;#58;b&amp;#114;%&amp;#54;1k&amp;#37;65m&amp;#37;&amp;#54;1n&amp;#64;&amp;#37;6Ci&amp;#98;%&amp;#55;2&amp;#101;l%&amp;#54;&amp;#57;st&amp;#46;com'&gt;brakeman&amp;#64;libr&amp;#101;&amp;#108;ist&amp;#46;com&lt;/a&gt;. You will be asked to confirm your subscription.&lt;/p&gt;

&lt;p&gt;Archives are available for browsing on &lt;a href=&quot;http://www.mail-archive.com/brakeman@librelist.com/maillist.html&quot;&gt;The Mail Archive&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
</feed>
