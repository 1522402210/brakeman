<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Brakeman</title>
  <link href="http://brakemanscanner.org/atom.xml" rel="self"/>
  <link href="http://brakemanscanner.org/"/>
  <updated>2011-11-10T16:32:22-08:00</updated>
  <id>http://brakemanscanner.org/</id>
  <author>
    <name>Justin Collins</name>
    
  </author>

  
  <entry>
    <title>Brakeman 0.8.4 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/11/04/brakeman-0-dot-8-4-released/"/>
    <updated>2011-11-04T14:58:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/11/04/brakeman-0-dot-8-4-released</id>
    <content type="html">&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option for separate attr_accessible warnings&lt;/li&gt;
&lt;li&gt;Option to set CSS file for HTML output&lt;/li&gt;
&lt;li&gt;Add file names for version-specific warnings&lt;/li&gt;
&lt;li&gt;Add line number for default routes in a controller&lt;/li&gt;
&lt;li&gt;Fix hash_insert()&lt;/li&gt;
&lt;li&gt;Remove use of Queue from threaded checks&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Separate attr_accessible Warnings&lt;/h3&gt;

&lt;p&gt;The current default is to roll all controllers lacking &lt;code&gt;attr_accessible&lt;/code&gt; into a single warning. This is convenient when manually looking at HTML or text output, but for Jenkins/Hudson it is better to have each be a separate warning. That way it is easier to track new and fixed warnings.&lt;/p&gt;

&lt;p&gt;To turn on this behavior, use &lt;code&gt;--separate-models&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Custom CSS for HTML Output&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;--css-file&lt;/code&gt; option to set a custom CSS file for styling HTML output. This file is copied directly into the report.&lt;/p&gt;

&lt;h3&gt;File Names for Version-Specific Warnings&lt;/h3&gt;

&lt;p&gt;Previously, there would be no file name associated with warnings about certain versions of Rails. This caused the warnings to not show up in the Jenkins/Hudson plugin. Now either &lt;code&gt;Gemfile&lt;/code&gt; or &lt;code&gt;config/environment.rb&lt;/code&gt; will be used as the file name for warnings based on the detected Rails version.&lt;/p&gt;

&lt;h3&gt;Line Number for Default Routes&lt;/h3&gt;

&lt;p&gt;When default routes were detected for specific controllers, there will now be a line number (from &lt;code&gt;routes.rb&lt;/code&gt;) associated with the warning.&lt;/p&gt;

&lt;h3&gt;hash_insert() Fixed&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hash_insert&lt;/code&gt; was broken and would cause some spurious warnings. For example, sometimes &lt;code&gt;only_path =&amp;gt; true&lt;/code&gt; would be set in &lt;code&gt;params&lt;/code&gt;, but Brakeman would mess up the &lt;code&gt;params&lt;/code&gt; hash and a redirect warning would still be created.&lt;/p&gt;

&lt;h3&gt;Threaded Checks No Longer Use Queue&lt;/h3&gt;

&lt;p&gt;When using threaded checks, the resulting warnings were stored in a thread-safe Queue. This has been removed, and the resulting value from each thread will be used instead. This should avoid some (small) locking overhead and is just simpler.&lt;/p&gt;

&lt;h3&gt;&quot;Like&quot; Brakeman on Ruby Toolbox&lt;/h3&gt;

&lt;p&gt;Please consider 'liking' Brakeman on the &lt;a href=&quot;https://www.ruby-toolbox.com/projects/brakeman&quot;&gt;Ruby Toolbox&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.8.3 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/10/25/brakeman-0-dot-8-3-released/"/>
    <updated>2011-10-25T10:00:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/10/25/brakeman-0-dot-8-3-released</id>
    <content type="html">&lt;p&gt;Changes for 0.8.3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Respect -w flag in .tabs format (&lt;a href=&quot;https://github.com/tw-ngreen&quot;&gt;tw-ngreen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Escape HTML output of error messages&lt;/li&gt;
&lt;li&gt;Add --skip-libs option&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changes since 0.8.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run checks in parallel threads by default&lt;/li&gt;
&lt;li&gt;Fix compatibility with ruby_parser 2.3.1&lt;/li&gt;
&lt;li&gt;Add option to assume all controller methods are actions&lt;/li&gt;
&lt;li&gt;Recover from errors when parsing routes&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Fix for .tabs Format&lt;/h3&gt;

&lt;p&gt;Brakeman will now pay attention to the &lt;code&gt;-w&lt;/code&gt; flag (setting minimum confidence levels) when using the &lt;code&gt;.tabs&lt;/code&gt; format.&lt;/p&gt;

&lt;h3&gt;Escape Error Messages in HTML&lt;/h3&gt;

&lt;p&gt;Error message will now be escaped in the HTML output so they do not mess up the formatting.&lt;/p&gt;

&lt;h3&gt;--skip-libs Option&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;--skip-libs&lt;/code&gt; option will cause Brakeman to not process the files in the &lt;code&gt;lib&lt;/code&gt; directory. At the moment, the results from this directory are only used in a couple places, so it is unlikely that skipping them will cause any problems.&lt;/p&gt;

&lt;h3&gt;Parallel Checks&lt;/h3&gt;

&lt;p&gt;Checks are now run in separate threads by default. Thus far, there does not seem to be a big difference between using threads and the sequential approach. To turn off threads, use the &lt;code&gt;-n&lt;/code&gt; option.&lt;/p&gt;

&lt;h3&gt;ruby_parser Compatibility&lt;/h3&gt;

&lt;p&gt;This is a stop-gap measure until &lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;ruby_parser&lt;/a&gt; supports Ruby 1.9, which is getting closer to reality.&lt;/p&gt;

&lt;h3&gt;Route Processing&lt;/h3&gt;

&lt;p&gt;Brakeman will no longer crash if there are problems parsing &lt;code&gt;routes.rb&lt;/code&gt;. Instead, it will assume all public methods on controllers are actions. The &lt;code&gt;-a&lt;/code&gt; option will also turn this behavior on.&lt;/p&gt;

&lt;p&gt;Rails 3.1 route parsing is still a work in progress, so this should at least allow analysis of 3.1 apps, even if it means slightly reduced accuracy.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman Plugin 'Officially' Available for Jenkins</title>
    <link href="http://brakemanscanner.org/blog/2011/10/21/brakeman-plugin-officially-available-for-jenkins/"/>
    <updated>2011-10-21T11:54:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/10/21/brakeman-plugin-officially-available-for-jenkins</id>
    <content type="html">&lt;p&gt;While a Brakeman plugin for the &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt;/&lt;a href=&quot;http://hudson-ci.org&quot;&gt;Hudson&lt;/a&gt; continuous integration tool has been available since January, thanks to &lt;a href=&quot;https://github.com/presidentbeef/brakeman-jenkins-plugin/issues/1&quot;&gt;some prodding&lt;/a&gt; the plugin is now available through the official Jenkins plugin manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://brakemanscanner.org/images/brakeman_trend_graph.png&quot; title=&quot;Example Plugin Graph&quot; alt=&quot;Example Plugin Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Installation of the plugin is no longer an arduous manual process. Just go to &lt;code&gt;Manage Jenkins -&amp;gt; Manage Plugins -&amp;gt; Available&lt;/code&gt; and search for &quot;Brakeman&quot;. Check the box and then click the &quot;Install&quot; button down at the bottom of the page.&lt;/p&gt;

&lt;p&gt;Some more information about the plugin can be found on the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Brakeman+Plugin&quot;&gt;Jenkins wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;docs/jenkins/setup&quot;&gt;instructions&lt;/a&gt; for how to set up a job to use the Brakeman plugin.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Brakeman 0.8.0 Released</title>
    <link href="http://brakemanscanner.org/blog/2011/09/15/brakeman-0-dot-8-0-released/"/>
    <updated>2011-09-15T10:06:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/09/15/brakeman-0-dot-8-0-released</id>
    <content type="html">&lt;p&gt;Change list for Brakeman 0.8.0:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add check for mass assignment using without_protection&lt;/li&gt;
&lt;li&gt;Add check for password in http_basic_authenticate_with&lt;/li&gt;
&lt;li&gt;Warn on user input in hash argument with mass assignment&lt;/li&gt;
&lt;li&gt;auto_link is now considered safe for Rails &gt;= 3.0.6&lt;/li&gt;
&lt;li&gt;Output detected Rails version in report&lt;/li&gt;
&lt;li&gt;Keep track of methods called in class definition&lt;/li&gt;
&lt;li&gt;Add ruby_parser hack for Ruby 1.9 hash syntax&lt;/li&gt;
&lt;li&gt;Add a few Rails 3.1 tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As always, please &lt;a href=&quot;https://github.com/presidentbeef/brakeman/issues&quot;&gt;report any issues&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;New Checks&lt;/h2&gt;

&lt;p&gt;This release adds two checks specific to Rails 3.1.&lt;/p&gt;

&lt;p&gt;The first looks for mass assignment which deliberately bypasses attribute protection. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User.new(params[:user], :without_protection) =&amp;gt; true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If user input is used for initializing the record, the warning will be set to high confidence. Otherwise, it will show up as medium confidence.&lt;/p&gt;

&lt;p&gt;The second new check looks for controllers using the new &lt;code&gt;http_basic_authenticate_with&lt;/code&gt; method and including the password directly in the source.&lt;/p&gt;

&lt;p&gt;The example from the &lt;a href=&quot;http://guides.rubyonrails.org/getting_started.html&quot;&gt;Rails guide&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class PostsController &amp;lt; ApplicationController

  http_basic_authenticate_with :name =&amp;gt; &quot;dhh&quot;, :password =&amp;gt; &quot;secret&quot;, :except =&amp;gt; :index

  #...

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would raise a warning, mostly because it is a bad idea to have passwords in plain text right in your source code.&lt;/p&gt;

&lt;h2&gt;Changes to Existing Warnings&lt;/h2&gt;

&lt;p&gt;Mass assignment has been changed to raise a warning if there is any user input when calling &lt;code&gt;Model.new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auto_link&lt;/code&gt; was previously set to be a &quot;known dangerous&quot; method because it did not escape its output. That was fixed in Rails 3.0.6, so it will be considered safe for versions 3.0.6 and up. But then &lt;code&gt;auto_link&lt;/code&gt; was removed in Rails 3.1, so for 3.1 and up it will be treated as a regular method.&lt;/p&gt;

&lt;h2&gt;Changes to Output&lt;/h2&gt;

&lt;p&gt;Warnings reports will now include the detected Rails version as part of the information reported.&lt;/p&gt;

&lt;h2&gt;Support for Ruby 1.9 Hash Syntax&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/seattlerb/ruby_parser&quot;&gt;RubyParser&lt;/a&gt;, used by Brakeman for all its Ruby parsing needs, &lt;a href=&quot;http://blog.zenspider.com/2010/12/bounty-ruby-parser-needs-19-lo.html&quot;&gt;does not support the new Ruby 1.9 syntax&lt;/a&gt;. After coming across an application which uses the &lt;a href=&quot;http://blog.peepcode.com/tutorials/2011/rip-ruby-hash-rocket-syntax&quot;&gt;1.9 hash syntax&lt;/a&gt; &lt;em&gt;extremely&lt;/em&gt; liberally, a temporary hack has been added that should allow Brakeman to parse it correctly.&lt;/p&gt;

&lt;p&gt;This does mean that Brakeman is overriding RubyParser's code to add in this functionality. That is why it is a &lt;em&gt;temporary hack&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;New Tests&lt;/h2&gt;

&lt;p&gt;Work has begun on a test application using Rails 3.1. There do not seem to be any huge changes in 3.1 that would prevent Brakeman from working, though.&lt;/p&gt;

&lt;h2&gt;Next Version&lt;/h2&gt;

&lt;p&gt;The main area of focus for the next (major) release will be Rails 3.x routing. Brakeman is currently quite limited in what kinds of routes in understands.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>One Year Anniversary</title>
    <link href="http://brakemanscanner.org/blog/2011/08/27/one-year-anniversary-and-a-website/"/>
    <updated>2011-08-27T01:00:00-07:00</updated>
    <id>http://brakemanscanner.org/blog/2011/08/27/one-year-anniversary-and-a-website</id>
    <content type="html">&lt;p&gt;One year ago, Brakeman 0.0.1 was released as a gem. Then it was promptly yanked and replaced with &lt;a href=&quot;http://rubygems.org/gems/brakeman/versions/0.0.2&quot;&gt;Brakeman 0.0.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In celebration of this grand anniversary, there have been several new releases today.&lt;/p&gt;

&lt;p&gt;The first is &lt;a href=&quot;http://rubygems.org/gems/brakeman/versions/0.7.2&quot;&gt;Brakeman 0.7.2&lt;/a&gt;, a minor release adding CVE numbers for the &lt;a href=&quot;http://groups.google.com/group/rubyonrails-security/browse_thread/thread/f878a33159ac9967&quot;&gt;latest vulnerabilities&lt;/a&gt; and fixing how nested params/cookie accesses are handled (e.g., &lt;code&gt;params[:user][:name]&lt;/code&gt; is now considered a direct use of a parameter).&lt;/p&gt;

&lt;p&gt;Next up, Brakeman has its own Twitter feed &lt;a href=&quot;https://twitter.com/brakemanscanner&quot;&gt;@BrakemanScanner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, there is this new website. Look forward to tutorials and more in-depth information about how to use Brakeman effectively.&lt;/p&gt;
</content>
  </entry>
  
</feed>
